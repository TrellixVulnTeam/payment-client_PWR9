import * as jspb from 'google-protobuf'

import * as google_protobuf_timestamp_pb from 'google-protobuf/google/protobuf/timestamp_pb';
import * as validate_validate_pb from '@mcuc/validate/validate_pb';


export class ActionLog extends jspb.Message {
  getId(): number;
  setId(value: number): ActionLog;

  getCreatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setCreatedAt(value?: google_protobuf_timestamp_pb.Timestamp): ActionLog;
  hasCreatedAt(): boolean;
  clearCreatedAt(): ActionLog;

  getUsername(): string;
  setUsername(value: string): ActionLog;

  getMetadata(): string;
  setMetadata(value: string): ActionLog;

  getServiceId(): string;
  setServiceId(value: string): ActionLog;

  getAction(): string;
  setAction(value: string): ActionLog;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ActionLog.AsObject;
  static toObject(includeInstance: boolean, msg: ActionLog): ActionLog.AsObject;
  static serializeBinaryToWriter(message: ActionLog, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ActionLog;
  static deserializeBinaryFromReader(message: ActionLog, reader: jspb.BinaryReader): ActionLog;
}

export namespace ActionLog {
  export type AsObject = {
    id: number,
    createdAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    username: string,
    metadata: string,
    serviceId: string,
    action: string,
  }
}

export class ListActionLogRequest extends jspb.Message {
  getPage(): number;
  setPage(value: number): ListActionLogRequest;

  getSize(): number;
  setSize(value: number): ListActionLogRequest;

  getFromDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setFromDate(value?: google_protobuf_timestamp_pb.Timestamp): ListActionLogRequest;
  hasFromDate(): boolean;
  clearFromDate(): ListActionLogRequest;

  getToDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setToDate(value?: google_protobuf_timestamp_pb.Timestamp): ListActionLogRequest;
  hasToDate(): boolean;
  clearToDate(): ListActionLogRequest;

  getSortColumn(): string;
  setSortColumn(value: string): ListActionLogRequest;

  getSortOrder(): string;
  setSortOrder(value: string): ListActionLogRequest;

  getUserId(): string;
  setUserId(value: string): ListActionLogRequest;

  getServiceIdsList(): Array<string>;
  setServiceIdsList(value: Array<string>): ListActionLogRequest;
  clearServiceIdsList(): ListActionLogRequest;
  addServiceIds(value: string, index?: number): ListActionLogRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListActionLogRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListActionLogRequest): ListActionLogRequest.AsObject;
  static serializeBinaryToWriter(message: ListActionLogRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListActionLogRequest;
  static deserializeBinaryFromReader(message: ListActionLogRequest, reader: jspb.BinaryReader): ListActionLogRequest;
}

export namespace ListActionLogRequest {
  export type AsObject = {
    page: number,
    size: number,
    fromDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    toDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    sortColumn: string,
    sortOrder: string,
    userId: string,
    serviceIdsList: Array<string>,
  }
}

export class ListActionLogReply extends jspb.Message {
  getPage(): number;
  setPage(value: number): ListActionLogReply;

  getSize(): number;
  setSize(value: number): ListActionLogReply;

  getTotalPage(): number;
  setTotalPage(value: number): ListActionLogReply;

  getTotalRecord(): number;
  setTotalRecord(value: number): ListActionLogReply;

  getDataList(): Array<ActionLog>;
  setDataList(value: Array<ActionLog>): ListActionLogReply;
  clearDataList(): ListActionLogReply;
  addData(value?: ActionLog, index?: number): ActionLog;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListActionLogReply.AsObject;
  static toObject(includeInstance: boolean, msg: ListActionLogReply): ListActionLogReply.AsObject;
  static serializeBinaryToWriter(message: ListActionLogReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListActionLogReply;
  static deserializeBinaryFromReader(message: ListActionLogReply, reader: jspb.BinaryReader): ListActionLogReply;
}

export namespace ListActionLogReply {
  export type AsObject = {
    page: number,
    size: number,
    totalPage: number,
    totalRecord: number,
    dataList: Array<ActionLog.AsObject>,
  }
}

