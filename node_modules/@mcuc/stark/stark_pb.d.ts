import * as jspb from 'google-protobuf'

import * as google_protobuf_timestamp_pb from 'google-protobuf/google/protobuf/timestamp_pb';
import * as stark_api_morgan_pb from '@mcuc/stark/morgan_pb';
import * as stark_api_pepper_pb from '@mcuc/stark/pepper_pb';
import * as stark_api_tony_pb from '@mcuc/stark/tony_pb';
import * as stark_api_ultron_pb from '@mcuc/stark/ultron_pb';


export class Payment extends jspb.Message {
  getId(): number;
  setId(value: number): Payment;

  getCreatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setCreatedAt(value?: google_protobuf_timestamp_pb.Timestamp): Payment;
  hasCreatedAt(): boolean;
  clearCreatedAt(): Payment;

  getUpdatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setUpdatedAt(value?: google_protobuf_timestamp_pb.Timestamp): Payment;
  hasUpdatedAt(): boolean;
  clearUpdatedAt(): Payment;

  getCreatedBy(): string;
  setCreatedBy(value: string): Payment;

  getUpdatedBy(): string;
  setUpdatedBy(value: string): Payment;

  getApprovedBy(): string;
  setApprovedBy(value: string): Payment;

  getMerchantId(): number;
  setMerchantId(value: number): Payment;

  getMethod(): MethodType;
  setMethod(value: MethodType): Payment;

  getType(): PaymentType;
  setType(value: PaymentType): Payment;

  getStatus(): Status;
  setStatus(value: Status): Payment;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Payment.AsObject;
  static toObject(includeInstance: boolean, msg: Payment): Payment.AsObject;
  static serializeBinaryToWriter(message: Payment, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Payment;
  static deserializeBinaryFromReader(message: Payment, reader: jspb.BinaryReader): Payment;
}

export namespace Payment {
  export type AsObject = {
    id: number,
    createdAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    updatedAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    createdBy: string,
    updatedBy: string,
    approvedBy: string,
    merchantId: number,
    method: MethodType,
    type: PaymentType,
    status: Status,
  }
}

export class PaymentDetail extends jspb.Message {
  getBanking(): stark_api_pepper_pb.BankingPaymentDetail | undefined;
  setBanking(value?: stark_api_pepper_pb.BankingPaymentDetail): PaymentDetail;
  hasBanking(): boolean;
  clearBanking(): PaymentDetail;

  getEWallet(): stark_api_tony_pb.EWalletPaymentDetail | undefined;
  setEWallet(value?: stark_api_tony_pb.EWalletPaymentDetail): PaymentDetail;
  hasEWallet(): boolean;
  clearEWallet(): PaymentDetail;

  getTelco(): stark_api_morgan_pb.TelcoPaymentDetail | undefined;
  setTelco(value?: stark_api_morgan_pb.TelcoPaymentDetail): PaymentDetail;
  hasTelco(): boolean;
  clearTelco(): PaymentDetail;

  getCrypto(): stark_api_ultron_pb.CryptoPaymentDetail | undefined;
  setCrypto(value?: stark_api_ultron_pb.CryptoPaymentDetail): PaymentDetail;
  hasCrypto(): boolean;
  clearCrypto(): PaymentDetail;

  getPayloadCase(): PaymentDetail.PayloadCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PaymentDetail.AsObject;
  static toObject(includeInstance: boolean, msg: PaymentDetail): PaymentDetail.AsObject;
  static serializeBinaryToWriter(message: PaymentDetail, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PaymentDetail;
  static deserializeBinaryFromReader(message: PaymentDetail, reader: jspb.BinaryReader): PaymentDetail;
}

export namespace PaymentDetail {
  export type AsObject = {
    banking?: stark_api_pepper_pb.BankingPaymentDetail.AsObject,
    eWallet?: stark_api_tony_pb.EWalletPaymentDetail.AsObject,
    telco?: stark_api_morgan_pb.TelcoPaymentDetail.AsObject,
    crypto?: stark_api_ultron_pb.CryptoPaymentDetail.AsObject,
  }

  export enum PayloadCase { 
    PAYLOAD_NOT_SET = 0,
    BANKING = 1,
    E_WALLET = 2,
    TELCO = 3,
    CRYPTO = 4,
  }
}

export class PaymentWithDetail extends jspb.Message {
  getPayment(): Payment | undefined;
  setPayment(value?: Payment): PaymentWithDetail;
  hasPayment(): boolean;
  clearPayment(): PaymentWithDetail;

  getPaymentDetail(): PaymentDetail | undefined;
  setPaymentDetail(value?: PaymentDetail): PaymentWithDetail;
  hasPaymentDetail(): boolean;
  clearPaymentDetail(): PaymentWithDetail;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PaymentWithDetail.AsObject;
  static toObject(includeInstance: boolean, msg: PaymentWithDetail): PaymentWithDetail.AsObject;
  static serializeBinaryToWriter(message: PaymentWithDetail, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PaymentWithDetail;
  static deserializeBinaryFromReader(message: PaymentWithDetail, reader: jspb.BinaryReader): PaymentWithDetail;
}

export namespace PaymentWithDetail {
  export type AsObject = {
    payment?: Payment.AsObject,
    paymentDetail?: PaymentDetail.AsObject,
  }
}

export class Revision extends jspb.Message {
  getId(): number;
  setId(value: number): Revision;

  getCreatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setCreatedAt(value?: google_protobuf_timestamp_pb.Timestamp): Revision;
  hasCreatedAt(): boolean;
  clearCreatedAt(): Revision;

  getCreatedBy(): string;
  setCreatedBy(value: string): Revision;

  getPaymentId(): number;
  setPaymentId(value: number): Revision;

  getStatus(): Status;
  setStatus(value: Status): Revision;

  getNote(): string;
  setNote(value: string): Revision;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Revision.AsObject;
  static toObject(includeInstance: boolean, msg: Revision): Revision.AsObject;
  static serializeBinaryToWriter(message: Revision, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Revision;
  static deserializeBinaryFromReader(message: Revision, reader: jspb.BinaryReader): Revision;
}

export namespace Revision {
  export type AsObject = {
    id: number,
    createdAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    createdBy: string,
    paymentId: number,
    status: Status,
    note: string,
  }
}

export class CompletePaymentRequest extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): CompletePaymentRequest;

  getPaymentMethod(): MethodType;
  setPaymentMethod(value: MethodType): CompletePaymentRequest;

  getPaymentType(): PaymentType;
  setPaymentType(value: PaymentType): CompletePaymentRequest;

  getPaymentStatus(): Status;
  setPaymentStatus(value: Status): CompletePaymentRequest;

  getPaymentDetail(): PaymentDetail | undefined;
  setPaymentDetail(value?: PaymentDetail): CompletePaymentRequest;
  hasPaymentDetail(): boolean;
  clearPaymentDetail(): CompletePaymentRequest;

  getMexCurrentBalance(): number;
  setMexCurrentBalance(value: number): CompletePaymentRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CompletePaymentRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CompletePaymentRequest): CompletePaymentRequest.AsObject;
  static serializeBinaryToWriter(message: CompletePaymentRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CompletePaymentRequest;
  static deserializeBinaryFromReader(message: CompletePaymentRequest, reader: jspb.BinaryReader): CompletePaymentRequest;
}

export namespace CompletePaymentRequest {
  export type AsObject = {
    paymentId: number,
    paymentMethod: MethodType,
    paymentType: PaymentType,
    paymentStatus: Status,
    paymentDetail?: PaymentDetail.AsObject,
    mexCurrentBalance: number,
  }
}

export class CompletePaymentReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CompletePaymentReply.AsObject;
  static toObject(includeInstance: boolean, msg: CompletePaymentReply): CompletePaymentReply.AsObject;
  static serializeBinaryToWriter(message: CompletePaymentReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CompletePaymentReply;
  static deserializeBinaryFromReader(message: CompletePaymentReply, reader: jspb.BinaryReader): CompletePaymentReply;
}

export namespace CompletePaymentReply {
  export type AsObject = {
  }
}

export enum PaymentType { 
  PAYMENT_UNSPECIFIED = 0,
  TOPUP = 1,
  WITHDRAW = 2,
}
export enum MethodType { 
  METHOD_UNSPECIFIED = 0,
  T = 1,
  I = 2,
  P = 3,
  E = 4,
  C = 5,
}
export enum Status { 
  STATUS_UNSPECIFIED = 0,
  CREATED = 1,
  CANCELED = 2,
  REJECTING = 3,
  REJECTED = 4,
  REJECT_FAILED = 5,
  APPROVED = 6,
  APPROVE_FAILED = 7,
  SUBMITTED = 8,
  SUBMIT_FAILED = 9,
  COMPLETED = 10,
  SUBMITTING = 11,
}
export enum Currency { 
  CURRENCY_UNSPECIFIED = 0,
  VND = 1,
  USDT = 2,
}
