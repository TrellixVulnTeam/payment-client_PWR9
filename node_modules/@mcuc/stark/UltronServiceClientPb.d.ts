/**
 * @fileoverview gRPC-Web generated client stub for mcuc.stark.ultron
 * @enhanceable
 * @public
 */
import * as grpcWeb from 'grpc-web';
import * as stark_api_ultron_pb from './ultron_pb';
export declare class UltronClient {
    client_: grpcWeb.AbstractClientBase;
    hostname_: string;
    credentials_: null | {
        [index: string]: string;
    };
    options_: null | {
        [index: string]: any;
    };
    constructor(hostname: string, credentials?: null | {
        [index: string]: string;
    }, options?: null | {
        [index: string]: any;
    });
    methodInfoCreateCryptoWithdraw: any;
    createCryptoWithdraw(request: stark_api_ultron_pb.CreateCryptoWithdrawRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_ultron_pb.CreateCryptoWithdrawReply>;
    createCryptoWithdraw(request: stark_api_ultron_pb.CreateCryptoWithdrawRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_ultron_pb.CreateCryptoWithdrawReply) => void): grpcWeb.ClientReadableStream<stark_api_ultron_pb.CreateCryptoWithdrawReply>;
    methodInfoCancelCryptoWithdraw: any;
    cancelCryptoWithdraw(request: stark_api_ultron_pb.CancelCryptoWithdrawRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_ultron_pb.CancelCryptoWithdrawReply>;
    cancelCryptoWithdraw(request: stark_api_ultron_pb.CancelCryptoWithdrawRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_ultron_pb.CancelCryptoWithdrawReply) => void): grpcWeb.ClientReadableStream<stark_api_ultron_pb.CancelCryptoWithdrawReply>;
    methodInfoApproveCryptoWithdraw: any;
    approveCryptoWithdraw(request: stark_api_ultron_pb.ApproveCryptoWithdrawRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_ultron_pb.ApproveCryptoWithdrawReply>;
    approveCryptoWithdraw(request: stark_api_ultron_pb.ApproveCryptoWithdrawRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_ultron_pb.ApproveCryptoWithdrawReply) => void): grpcWeb.ClientReadableStream<stark_api_ultron_pb.ApproveCryptoWithdrawReply>;
    methodInfoSubmitCryptoWithdraw: any;
    submitCryptoWithdraw(request: stark_api_ultron_pb.SubmitCryptoWithdrawRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_ultron_pb.SubmitCryptoWithdrawReply>;
    submitCryptoWithdraw(request: stark_api_ultron_pb.SubmitCryptoWithdrawRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_ultron_pb.SubmitCryptoWithdrawReply) => void): grpcWeb.ClientReadableStream<stark_api_ultron_pb.SubmitCryptoWithdrawReply>;
    methodInfoRejectCryptoWithdraw: any;
    rejectCryptoWithdraw(request: stark_api_ultron_pb.RejectCryptoWithdrawRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_ultron_pb.RejectCryptoWithdrawReply>;
    rejectCryptoWithdraw(request: stark_api_ultron_pb.RejectCryptoWithdrawRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_ultron_pb.RejectCryptoWithdrawReply) => void): grpcWeb.ClientReadableStream<stark_api_ultron_pb.RejectCryptoWithdrawReply>;
    methodInfoCancelCryptoTopUp: any;
    cancelCryptoTopUp(request: stark_api_ultron_pb.CancelCryptoTopUpRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_ultron_pb.CancelCryptoTopUpReply>;
    cancelCryptoTopUp(request: stark_api_ultron_pb.CancelCryptoTopUpRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_ultron_pb.CancelCryptoTopUpReply) => void): grpcWeb.ClientReadableStream<stark_api_ultron_pb.CancelCryptoTopUpReply>;
    methodInfoApproveCryptoTopUp: any;
    approveCryptoTopUp(request: stark_api_ultron_pb.ApproveCryptoTopUpRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_ultron_pb.ApproveCryptoTopUpReply>;
    approveCryptoTopUp(request: stark_api_ultron_pb.ApproveCryptoTopUpRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_ultron_pb.ApproveCryptoTopUpReply) => void): grpcWeb.ClientReadableStream<stark_api_ultron_pb.ApproveCryptoTopUpReply>;
    methodInfoRejectCryptoTopUp: any;
    rejectCryptoTopUp(request: stark_api_ultron_pb.RejectCryptoTopUpRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_ultron_pb.RejectCryptoTopUpReply>;
    rejectCryptoTopUp(request: stark_api_ultron_pb.RejectCryptoTopUpRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_ultron_pb.RejectCryptoTopUpReply) => void): grpcWeb.ClientReadableStream<stark_api_ultron_pb.RejectCryptoTopUpReply>;
    methodInfoGetCryptoWallet: any;
    getCryptoWallet(request: stark_api_ultron_pb.GetCryptoWalletRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_ultron_pb.GetCryptoWalletReply>;
    getCryptoWallet(request: stark_api_ultron_pb.GetCryptoWalletRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_ultron_pb.GetCryptoWalletReply) => void): grpcWeb.ClientReadableStream<stark_api_ultron_pb.GetCryptoWalletReply>;
    methodInfoValidateCryptoWallets: any;
    validateCryptoWallets(request: stark_api_ultron_pb.ValidateCryptoWalletsRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_ultron_pb.ValidateCryptoWalletsReply>;
    validateCryptoWallets(request: stark_api_ultron_pb.ValidateCryptoWalletsRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_ultron_pb.ValidateCryptoWalletsReply) => void): grpcWeb.ClientReadableStream<stark_api_ultron_pb.ValidateCryptoWalletsReply>;
    methodInfoImportCryptoWallets: any;
    importCryptoWallets(request: stark_api_ultron_pb.ImportCryptoWalletsRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_ultron_pb.ImportCryptoWalletsReply>;
    importCryptoWallets(request: stark_api_ultron_pb.ImportCryptoWalletsRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_ultron_pb.ImportCryptoWalletsReply) => void): grpcWeb.ClientReadableStream<stark_api_ultron_pb.ImportCryptoWalletsReply>;
    methodInfoListCryptoWallets: any;
    listCryptoWallets(request: stark_api_ultron_pb.ListCryptoWalletsRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_ultron_pb.ListCryptoWalletsReply>;
    listCryptoWallets(request: stark_api_ultron_pb.ListCryptoWalletsRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_ultron_pb.ListCryptoWalletsReply) => void): grpcWeb.ClientReadableStream<stark_api_ultron_pb.ListCryptoWalletsReply>;
    methodInfoValidateCryptoHotWallets: any;
    validateCryptoHotWallets(request: stark_api_ultron_pb.ValidateCryptoHotWalletsRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_ultron_pb.ValidateCryptoHotWalletsReply>;
    validateCryptoHotWallets(request: stark_api_ultron_pb.ValidateCryptoHotWalletsRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_ultron_pb.ValidateCryptoHotWalletsReply) => void): grpcWeb.ClientReadableStream<stark_api_ultron_pb.ValidateCryptoHotWalletsReply>;
    methodInfoImportCryptoHotWallets: any;
    importCryptoHotWallets(request: stark_api_ultron_pb.ImportCryptoHotWalletsRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_ultron_pb.ImportCryptoHotWalletsReply>;
    importCryptoHotWallets(request: stark_api_ultron_pb.ImportCryptoHotWalletsRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_ultron_pb.ImportCryptoHotWalletsReply) => void): grpcWeb.ClientReadableStream<stark_api_ultron_pb.ImportCryptoHotWalletsReply>;
    methodInfoListCryptoHotWallets: any;
    listCryptoHotWallets(request: stark_api_ultron_pb.ListCryptoHotWalletsRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_ultron_pb.ListCryptoHotWalletsReply>;
    listCryptoHotWallets(request: stark_api_ultron_pb.ListCryptoHotWalletsRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_ultron_pb.ListCryptoHotWalletsReply) => void): grpcWeb.ClientReadableStream<stark_api_ultron_pb.ListCryptoHotWalletsReply>;
    methodInfoGetSystemCryptoHotWallets: any;
    getSystemCryptoHotWallets(request: stark_api_ultron_pb.GetSystemCryptoHotWalletsRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_ultron_pb.GetSystemCryptoHotWalletsReply>;
    getSystemCryptoHotWallets(request: stark_api_ultron_pb.GetSystemCryptoHotWalletsRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_ultron_pb.GetSystemCryptoHotWalletsReply) => void): grpcWeb.ClientReadableStream<stark_api_ultron_pb.GetSystemCryptoHotWalletsReply>;
    methodInfoLoadCryptoWallets: any;
    loadCryptoWallets(request: stark_api_ultron_pb.LoadCryptoWalletsRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_ultron_pb.LoadCryptoWalletsReply>;
    loadCryptoWallets(request: stark_api_ultron_pb.LoadCryptoWalletsRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_ultron_pb.LoadCryptoWalletsReply) => void): grpcWeb.ClientReadableStream<stark_api_ultron_pb.LoadCryptoWalletsReply>;
    methodInfoUpdateAutoTransferCryptoWithdraw: any;
    updateAutoTransferCryptoWithdraw(request: stark_api_ultron_pb.UpdateAutoTransferCryptoWithdrawRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_ultron_pb.UpdateAutoTransferCryptoWithdrawReply>;
    updateAutoTransferCryptoWithdraw(request: stark_api_ultron_pb.UpdateAutoTransferCryptoWithdrawRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_ultron_pb.UpdateAutoTransferCryptoWithdrawReply) => void): grpcWeb.ClientReadableStream<stark_api_ultron_pb.UpdateAutoTransferCryptoWithdrawReply>;
    methodInfoGetCryptoSettings: any;
    getCryptoSettings(request: stark_api_ultron_pb.GetCryptoSettingsRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_ultron_pb.GetCryptoSettingsReply>;
    getCryptoSettings(request: stark_api_ultron_pb.GetCryptoSettingsRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_ultron_pb.GetCryptoSettingsReply) => void): grpcWeb.ClientReadableStream<stark_api_ultron_pb.GetCryptoSettingsReply>;
    methodInfoCallbackTransaction: any;
    callbackTransaction(request: stark_api_ultron_pb.CallbackTransactionRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_ultron_pb.CallbackTransactionReply>;
    callbackTransaction(request: stark_api_ultron_pb.CallbackTransactionRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_ultron_pb.CallbackTransactionReply) => void): grpcWeb.ClientReadableStream<stark_api_ultron_pb.CallbackTransactionReply>;
}
