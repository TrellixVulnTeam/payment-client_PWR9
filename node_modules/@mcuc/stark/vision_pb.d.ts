import * as jspb from 'google-protobuf'

import * as google_protobuf_timestamp_pb from 'google-protobuf/google/protobuf/timestamp_pb';
import * as validate_validate_pb from '@greyhole/validate/validate_pb';
import * as groot_api_groot_pb from '@mcuc/groot/groot_pb';
import * as stark_api_stark_pb from '@mcuc/stark/stark_pb';
import * as stark_api_pepper_pb from '@mcuc/stark/pepper_pb';
import * as stark_api_tony_pb from '@mcuc/stark/tony_pb';
import * as stark_api_ultron_pb from '@mcuc/stark/ultron_pb';


export class GetPaymentDetailRequest extends jspb.Message {
  getId(): number;
  setId(value: number): GetPaymentDetailRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetPaymentDetailRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetPaymentDetailRequest): GetPaymentDetailRequest.AsObject;
  static serializeBinaryToWriter(message: GetPaymentDetailRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetPaymentDetailRequest;
  static deserializeBinaryFromReader(message: GetPaymentDetailRequest, reader: jspb.BinaryReader): GetPaymentDetailRequest;
}

export namespace GetPaymentDetailRequest {
  export type AsObject = {
    id: number,
  }
}

export class GetPaymentDetailReply extends jspb.Message {
  getPayment(): stark_api_stark_pb.Payment | undefined;
  setPayment(value?: stark_api_stark_pb.Payment): GetPaymentDetailReply;
  hasPayment(): boolean;
  clearPayment(): GetPaymentDetailReply;

  getPaymentDetail(): stark_api_stark_pb.PaymentDetail | undefined;
  setPaymentDetail(value?: stark_api_stark_pb.PaymentDetail): GetPaymentDetailReply;
  hasPaymentDetail(): boolean;
  clearPaymentDetail(): GetPaymentDetailReply;

  getRevisionsList(): Array<stark_api_stark_pb.Revision>;
  setRevisionsList(value: Array<stark_api_stark_pb.Revision>): GetPaymentDetailReply;
  clearRevisionsList(): GetPaymentDetailReply;
  addRevisions(value?: stark_api_stark_pb.Revision, index?: number): stark_api_stark_pb.Revision;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetPaymentDetailReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetPaymentDetailReply): GetPaymentDetailReply.AsObject;
  static serializeBinaryToWriter(message: GetPaymentDetailReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetPaymentDetailReply;
  static deserializeBinaryFromReader(message: GetPaymentDetailReply, reader: jspb.BinaryReader): GetPaymentDetailReply;
}

export namespace GetPaymentDetailReply {
  export type AsObject = {
    payment?: stark_api_stark_pb.Payment.AsObject,
    paymentDetail?: stark_api_stark_pb.PaymentDetail.AsObject,
    revisionsList: Array<stark_api_stark_pb.Revision.AsObject>,
  }
}

export class ListPaymentsRequest extends jspb.Message {
  getPage(): number;
  setPage(value: number): ListPaymentsRequest;

  getSize(): number;
  setSize(value: number): ListPaymentsRequest;

  getFrom(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setFrom(value?: google_protobuf_timestamp_pb.Timestamp): ListPaymentsRequest;
  hasFrom(): boolean;
  clearFrom(): ListPaymentsRequest;

  getTo(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setTo(value?: google_protobuf_timestamp_pb.Timestamp): ListPaymentsRequest;
  hasTo(): boolean;
  clearTo(): ListPaymentsRequest;

  getPaymentIdsList(): Array<number>;
  setPaymentIdsList(value: Array<number>): ListPaymentsRequest;
  clearPaymentIdsList(): ListPaymentsRequest;
  addPaymentIds(value: number, index?: number): ListPaymentsRequest;

  getPaymentTypesList(): Array<stark_api_stark_pb.PaymentType>;
  setPaymentTypesList(value: Array<stark_api_stark_pb.PaymentType>): ListPaymentsRequest;
  clearPaymentTypesList(): ListPaymentsRequest;
  addPaymentTypes(value: stark_api_stark_pb.PaymentType, index?: number): ListPaymentsRequest;

  getMethodsList(): Array<stark_api_stark_pb.MethodType>;
  setMethodsList(value: Array<stark_api_stark_pb.MethodType>): ListPaymentsRequest;
  clearMethodsList(): ListPaymentsRequest;
  addMethods(value: stark_api_stark_pb.MethodType, index?: number): ListPaymentsRequest;

  getStatusesList(): Array<stark_api_stark_pb.Status>;
  setStatusesList(value: Array<stark_api_stark_pb.Status>): ListPaymentsRequest;
  clearStatusesList(): ListPaymentsRequest;
  addStatuses(value: stark_api_stark_pb.Status, index?: number): ListPaymentsRequest;

  getMerchantIdsList(): Array<number>;
  setMerchantIdsList(value: Array<number>): ListPaymentsRequest;
  clearMerchantIdsList(): ListPaymentsRequest;
  addMerchantIds(value: number, index?: number): ListPaymentsRequest;

  getBankNamesList(): Array<stark_api_pepper_pb.BankName>;
  setBankNamesList(value: Array<stark_api_pepper_pb.BankName>): ListPaymentsRequest;
  clearBankNamesList(): ListPaymentsRequest;
  addBankNames(value: stark_api_pepper_pb.BankName, index?: number): ListPaymentsRequest;

  getEWalletNamesList(): Array<stark_api_tony_pb.EWalletName>;
  setEWalletNamesList(value: Array<stark_api_tony_pb.EWalletName>): ListPaymentsRequest;
  clearEWalletNamesList(): ListPaymentsRequest;
  addEWalletNames(value: stark_api_tony_pb.EWalletName, index?: number): ListPaymentsRequest;

  getTelcoNamesList(): Array<groot_api_groot_pb.TelcoName>;
  setTelcoNamesList(value: Array<groot_api_groot_pb.TelcoName>): ListPaymentsRequest;
  clearTelcoNamesList(): ListPaymentsRequest;
  addTelcoNames(value: groot_api_groot_pb.TelcoName, index?: number): ListPaymentsRequest;

  getCryptoWalletNameList(): Array<stark_api_ultron_pb.CryptoWalletName>;
  setCryptoWalletNameList(value: Array<stark_api_ultron_pb.CryptoWalletName>): ListPaymentsRequest;
  clearCryptoWalletNameList(): ListPaymentsRequest;
  addCryptoWalletName(value: stark_api_ultron_pb.CryptoWalletName, index?: number): ListPaymentsRequest;

  getOrder(): Order;
  setOrder(value: Order): ListPaymentsRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListPaymentsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListPaymentsRequest): ListPaymentsRequest.AsObject;
  static serializeBinaryToWriter(message: ListPaymentsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListPaymentsRequest;
  static deserializeBinaryFromReader(message: ListPaymentsRequest, reader: jspb.BinaryReader): ListPaymentsRequest;
}

export namespace ListPaymentsRequest {
  export type AsObject = {
    page: number,
    size: number,
    from?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    to?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    paymentIdsList: Array<number>,
    paymentTypesList: Array<stark_api_stark_pb.PaymentType>,
    methodsList: Array<stark_api_stark_pb.MethodType>,
    statusesList: Array<stark_api_stark_pb.Status>,
    merchantIdsList: Array<number>,
    bankNamesList: Array<stark_api_pepper_pb.BankName>,
    eWalletNamesList: Array<stark_api_tony_pb.EWalletName>,
    telcoNamesList: Array<groot_api_groot_pb.TelcoName>,
    cryptoWalletNameList: Array<stark_api_ultron_pb.CryptoWalletName>,
    order: Order,
  }
}

export class ListPaymentsReply extends jspb.Message {
  getRecordsList(): Array<stark_api_stark_pb.PaymentWithDetail>;
  setRecordsList(value: Array<stark_api_stark_pb.PaymentWithDetail>): ListPaymentsReply;
  clearRecordsList(): ListPaymentsReply;
  addRecords(value?: stark_api_stark_pb.PaymentWithDetail, index?: number): stark_api_stark_pb.PaymentWithDetail;

  getTotal(): number;
  setTotal(value: number): ListPaymentsReply;

  getCurrentPage(): number;
  setCurrentPage(value: number): ListPaymentsReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListPaymentsReply.AsObject;
  static toObject(includeInstance: boolean, msg: ListPaymentsReply): ListPaymentsReply.AsObject;
  static serializeBinaryToWriter(message: ListPaymentsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListPaymentsReply;
  static deserializeBinaryFromReader(message: ListPaymentsReply, reader: jspb.BinaryReader): ListPaymentsReply;
}

export namespace ListPaymentsReply {
  export type AsObject = {
    recordsList: Array<stark_api_stark_pb.PaymentWithDetail.AsObject>,
    total: number,
    currentPage: number,
  }
}

export class GetPaymentInfoByPaymentCodeRequest extends jspb.Message {
  getCode(): string;
  setCode(value: string): GetPaymentInfoByPaymentCodeRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetPaymentInfoByPaymentCodeRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetPaymentInfoByPaymentCodeRequest): GetPaymentInfoByPaymentCodeRequest.AsObject;
  static serializeBinaryToWriter(message: GetPaymentInfoByPaymentCodeRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetPaymentInfoByPaymentCodeRequest;
  static deserializeBinaryFromReader(message: GetPaymentInfoByPaymentCodeRequest, reader: jspb.BinaryReader): GetPaymentInfoByPaymentCodeRequest;
}

export namespace GetPaymentInfoByPaymentCodeRequest {
  export type AsObject = {
    code: string,
  }
}

export class GetPaymentInfoByPaymentCodeReply extends jspb.Message {
  getMerchantId(): number;
  setMerchantId(value: number): GetPaymentInfoByPaymentCodeReply;

  getMerchantUserId(): number;
  setMerchantUserId(value: number): GetPaymentInfoByPaymentCodeReply;

  getPaymentMethod(): stark_api_stark_pb.MethodType;
  setPaymentMethod(value: stark_api_stark_pb.MethodType): GetPaymentInfoByPaymentCodeReply;

  getBankName(): stark_api_pepper_pb.BankName;
  setBankName(value: stark_api_pepper_pb.BankName): GetPaymentInfoByPaymentCodeReply;

  getEWalletName(): stark_api_tony_pb.EWalletName;
  setEWalletName(value: stark_api_tony_pb.EWalletName): GetPaymentInfoByPaymentCodeReply;

  getPayloadCase(): GetPaymentInfoByPaymentCodeReply.PayloadCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetPaymentInfoByPaymentCodeReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetPaymentInfoByPaymentCodeReply): GetPaymentInfoByPaymentCodeReply.AsObject;
  static serializeBinaryToWriter(message: GetPaymentInfoByPaymentCodeReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetPaymentInfoByPaymentCodeReply;
  static deserializeBinaryFromReader(message: GetPaymentInfoByPaymentCodeReply, reader: jspb.BinaryReader): GetPaymentInfoByPaymentCodeReply;
}

export namespace GetPaymentInfoByPaymentCodeReply {
  export type AsObject = {
    merchantId: number,
    merchantUserId: number,
    paymentMethod: stark_api_stark_pb.MethodType,
    bankName: stark_api_pepper_pb.BankName,
    eWalletName: stark_api_tony_pb.EWalletName,
  }

  export enum PayloadCase { 
    PAYLOAD_NOT_SET = 0,
    BANK_NAME = 4,
    E_WALLET_NAME = 5,
  }
}

export enum Order { 
  UNSPECIFIED = 0,
  CREATED_AT_ASC = 1,
  CREATED_AT_DESC = 2,
  UPDATED_AT_ASC = 3,
  UPDATED_AT_DESC = 4,
}
