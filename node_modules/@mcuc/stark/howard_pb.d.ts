import * as jspb from 'google-protobuf'

import * as google_protobuf_timestamp_pb from 'google-protobuf/google/protobuf/timestamp_pb';
import * as validate_validate_pb from '@greyhole/validate/validate_pb';
import * as stark_api_stark_pb from '@mcuc/stark/stark_pb';


export class StatisticDetail extends jspb.Message {
  getNumber(): number;
  setNumber(value: number): StatisticDetail;

  getPercent(): number;
  setPercent(value: number): StatisticDetail;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StatisticDetail.AsObject;
  static toObject(includeInstance: boolean, msg: StatisticDetail): StatisticDetail.AsObject;
  static serializeBinaryToWriter(message: StatisticDetail, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StatisticDetail;
  static deserializeBinaryFromReader(message: StatisticDetail, reader: jspb.BinaryReader): StatisticDetail;
}

export namespace StatisticDetail {
  export type AsObject = {
    number: number,
    percent: number,
  }
}

export class GetStatisticRequest extends jspb.Message {
  getPaymentType(): stark_api_stark_pb.PaymentType;
  setPaymentType(value: stark_api_stark_pb.PaymentType): GetStatisticRequest;

  getFilterType(): StatisticFilterType;
  setFilterType(value: StatisticFilterType): GetStatisticRequest;

  getTimeZone(): number;
  setTimeZone(value: number): GetStatisticRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetStatisticRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetStatisticRequest): GetStatisticRequest.AsObject;
  static serializeBinaryToWriter(message: GetStatisticRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetStatisticRequest;
  static deserializeBinaryFromReader(message: GetStatisticRequest, reader: jspb.BinaryReader): GetStatisticRequest;
}

export namespace GetStatisticRequest {
  export type AsObject = {
    paymentType: stark_api_stark_pb.PaymentType,
    filterType: StatisticFilterType,
    timeZone: number,
  }
}

export class GetStatisticReply extends jspb.Message {
  getOrder(): StatisticDetail | undefined;
  setOrder(value?: StatisticDetail): GetStatisticReply;
  hasOrder(): boolean;
  clearOrder(): GetStatisticReply;

  getAmount(): StatisticDetail | undefined;
  setAmount(value?: StatisticDetail): GetStatisticReply;
  hasAmount(): boolean;
  clearAmount(): GetStatisticReply;

  getUser(): StatisticDetail | undefined;
  setUser(value?: StatisticDetail): GetStatisticReply;
  hasUser(): boolean;
  clearUser(): GetStatisticReply;

  getArppu(): StatisticDetail | undefined;
  setArppu(value?: StatisticDetail): GetStatisticReply;
  hasArppu(): boolean;
  clearArppu(): GetStatisticReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetStatisticReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetStatisticReply): GetStatisticReply.AsObject;
  static serializeBinaryToWriter(message: GetStatisticReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetStatisticReply;
  static deserializeBinaryFromReader(message: GetStatisticReply, reader: jspb.BinaryReader): GetStatisticReply;
}

export namespace GetStatisticReply {
  export type AsObject = {
    order?: StatisticDetail.AsObject,
    amount?: StatisticDetail.AsObject,
    user?: StatisticDetail.AsObject,
    arppu?: StatisticDetail.AsObject,
  }
}

export class GetProcessingPerformanceRequest extends jspb.Message {
  getFromDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setFromDate(value?: google_protobuf_timestamp_pb.Timestamp): GetProcessingPerformanceRequest;
  hasFromDate(): boolean;
  clearFromDate(): GetProcessingPerformanceRequest;

  getToDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setToDate(value?: google_protobuf_timestamp_pb.Timestamp): GetProcessingPerformanceRequest;
  hasToDate(): boolean;
  clearToDate(): GetProcessingPerformanceRequest;

  getMerchantId(): number;
  setMerchantId(value: number): GetProcessingPerformanceRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetProcessingPerformanceRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetProcessingPerformanceRequest): GetProcessingPerformanceRequest.AsObject;
  static serializeBinaryToWriter(message: GetProcessingPerformanceRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetProcessingPerformanceRequest;
  static deserializeBinaryFromReader(message: GetProcessingPerformanceRequest, reader: jspb.BinaryReader): GetProcessingPerformanceRequest;
}

export namespace GetProcessingPerformanceRequest {
  export type AsObject = {
    fromDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    toDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    merchantId: number,
  }
}

export class GetProcessingPerformanceReply extends jspb.Message {
  getMerchantId(): number;
  setMerchantId(value: number): GetProcessingPerformanceReply;

  getTotalOrder(): number;
  setTotalOrder(value: number): GetProcessingPerformanceReply;

  getSuccessfully(): StatisticDetail | undefined;
  setSuccessfully(value?: StatisticDetail): GetProcessingPerformanceReply;
  hasSuccessfully(): boolean;
  clearSuccessfully(): GetProcessingPerformanceReply;

  getFailed(): StatisticDetail | undefined;
  setFailed(value?: StatisticDetail): GetProcessingPerformanceReply;
  hasFailed(): boolean;
  clearFailed(): GetProcessingPerformanceReply;

  getWaiting(): StatisticDetail | undefined;
  setWaiting(value?: StatisticDetail): GetProcessingPerformanceReply;
  hasWaiting(): boolean;
  clearWaiting(): GetProcessingPerformanceReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetProcessingPerformanceReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetProcessingPerformanceReply): GetProcessingPerformanceReply.AsObject;
  static serializeBinaryToWriter(message: GetProcessingPerformanceReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetProcessingPerformanceReply;
  static deserializeBinaryFromReader(message: GetProcessingPerformanceReply, reader: jspb.BinaryReader): GetProcessingPerformanceReply;
}

export namespace GetProcessingPerformanceReply {
  export type AsObject = {
    merchantId: number,
    totalOrder: number,
    successfully?: StatisticDetail.AsObject,
    failed?: StatisticDetail.AsObject,
    waiting?: StatisticDetail.AsObject,
  }
}

export class TotalAmountMerchant extends jspb.Message {
  getMerchantId(): number;
  setMerchantId(value: number): TotalAmountMerchant;

  getAmount(): number;
  setAmount(value: number): TotalAmountMerchant;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TotalAmountMerchant.AsObject;
  static toObject(includeInstance: boolean, msg: TotalAmountMerchant): TotalAmountMerchant.AsObject;
  static serializeBinaryToWriter(message: TotalAmountMerchant, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TotalAmountMerchant;
  static deserializeBinaryFromReader(message: TotalAmountMerchant, reader: jspb.BinaryReader): TotalAmountMerchant;
}

export namespace TotalAmountMerchant {
  export type AsObject = {
    merchantId: number,
    amount: number,
  }
}

export class TotalAmountDetail extends jspb.Message {
  getDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setDate(value?: google_protobuf_timestamp_pb.Timestamp): TotalAmountDetail;
  hasDate(): boolean;
  clearDate(): TotalAmountDetail;

  getMerchantAmountsList(): Array<TotalAmountMerchant>;
  setMerchantAmountsList(value: Array<TotalAmountMerchant>): TotalAmountDetail;
  clearMerchantAmountsList(): TotalAmountDetail;
  addMerchantAmounts(value?: TotalAmountMerchant, index?: number): TotalAmountMerchant;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TotalAmountDetail.AsObject;
  static toObject(includeInstance: boolean, msg: TotalAmountDetail): TotalAmountDetail.AsObject;
  static serializeBinaryToWriter(message: TotalAmountDetail, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TotalAmountDetail;
  static deserializeBinaryFromReader(message: TotalAmountDetail, reader: jspb.BinaryReader): TotalAmountDetail;
}

export namespace TotalAmountDetail {
  export type AsObject = {
    date?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    merchantAmountsList: Array<TotalAmountMerchant.AsObject>,
  }
}

export class GetTotalAmountRequest extends jspb.Message {
  getFromDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setFromDate(value?: google_protobuf_timestamp_pb.Timestamp): GetTotalAmountRequest;
  hasFromDate(): boolean;
  clearFromDate(): GetTotalAmountRequest;

  getToDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setToDate(value?: google_protobuf_timestamp_pb.Timestamp): GetTotalAmountRequest;
  hasToDate(): boolean;
  clearToDate(): GetTotalAmountRequest;

  getMerchantsList(): Array<number>;
  setMerchantsList(value: Array<number>): GetTotalAmountRequest;
  clearMerchantsList(): GetTotalAmountRequest;
  addMerchants(value: number, index?: number): GetTotalAmountRequest;

  getTimeZone(): number;
  setTimeZone(value: number): GetTotalAmountRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetTotalAmountRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetTotalAmountRequest): GetTotalAmountRequest.AsObject;
  static serializeBinaryToWriter(message: GetTotalAmountRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetTotalAmountRequest;
  static deserializeBinaryFromReader(message: GetTotalAmountRequest, reader: jspb.BinaryReader): GetTotalAmountRequest;
}

export namespace GetTotalAmountRequest {
  export type AsObject = {
    fromDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    toDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    merchantsList: Array<number>,
    timeZone: number,
  }
}

export class GetTotalAmountReply extends jspb.Message {
  getDetailsList(): Array<TotalAmountDetail>;
  setDetailsList(value: Array<TotalAmountDetail>): GetTotalAmountReply;
  clearDetailsList(): GetTotalAmountReply;
  addDetails(value?: TotalAmountDetail, index?: number): TotalAmountDetail;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetTotalAmountReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetTotalAmountReply): GetTotalAmountReply.AsObject;
  static serializeBinaryToWriter(message: GetTotalAmountReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetTotalAmountReply;
  static deserializeBinaryFromReader(message: GetTotalAmountReply, reader: jspb.BinaryReader): GetTotalAmountReply;
}

export namespace GetTotalAmountReply {
  export type AsObject = {
    detailsList: Array<TotalAmountDetail.AsObject>,
  }
}

export class GetReportRequest extends jspb.Message {
  getFromDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setFromDate(value?: google_protobuf_timestamp_pb.Timestamp): GetReportRequest;
  hasFromDate(): boolean;
  clearFromDate(): GetReportRequest;

  getToDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setToDate(value?: google_protobuf_timestamp_pb.Timestamp): GetReportRequest;
  hasToDate(): boolean;
  clearToDate(): GetReportRequest;

  getMerchantId(): number;
  setMerchantId(value: number): GetReportRequest;

  getTimeZone(): number;
  setTimeZone(value: number): GetReportRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetReportRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetReportRequest): GetReportRequest.AsObject;
  static serializeBinaryToWriter(message: GetReportRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetReportRequest;
  static deserializeBinaryFromReader(message: GetReportRequest, reader: jspb.BinaryReader): GetReportRequest;
}

export namespace GetReportRequest {
  export type AsObject = {
    fromDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    toDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    merchantId: number,
    timeZone: number,
  }
}

export class Income extends jspb.Message {
  getDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setDate(value?: google_protobuf_timestamp_pb.Timestamp): Income;
  hasDate(): boolean;
  clearDate(): Income;

  getAmount(): number;
  setAmount(value: number): Income;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Income.AsObject;
  static toObject(includeInstance: boolean, msg: Income): Income.AsObject;
  static serializeBinaryToWriter(message: Income, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Income;
  static deserializeBinaryFromReader(message: Income, reader: jspb.BinaryReader): Income;
}

export namespace Income {
  export type AsObject = {
    date?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    amount: number,
  }
}

export class TopUpCompletion extends jspb.Message {
  getCompleted(): number;
  setCompleted(value: number): TopUpCompletion;

  getTotal(): number;
  setTotal(value: number): TopUpCompletion;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TopUpCompletion.AsObject;
  static toObject(includeInstance: boolean, msg: TopUpCompletion): TopUpCompletion.AsObject;
  static serializeBinaryToWriter(message: TopUpCompletion, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TopUpCompletion;
  static deserializeBinaryFromReader(message: TopUpCompletion, reader: jspb.BinaryReader): TopUpCompletion;
}

export namespace TopUpCompletion {
  export type AsObject = {
    completed: number,
    total: number,
  }
}

export class WithdrawCompletion extends jspb.Message {
  getCompleted(): number;
  setCompleted(value: number): WithdrawCompletion;

  getTotal(): number;
  setTotal(value: number): WithdrawCompletion;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): WithdrawCompletion.AsObject;
  static toObject(includeInstance: boolean, msg: WithdrawCompletion): WithdrawCompletion.AsObject;
  static serializeBinaryToWriter(message: WithdrawCompletion, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): WithdrawCompletion;
  static deserializeBinaryFromReader(message: WithdrawCompletion, reader: jspb.BinaryReader): WithdrawCompletion;
}

export namespace WithdrawCompletion {
  export type AsObject = {
    completed: number,
    total: number,
  }
}

export class AllocationDetail extends jspb.Message {
  getMethod(): stark_api_stark_pb.MethodType;
  setMethod(value: stark_api_stark_pb.MethodType): AllocationDetail;

  getAmount(): number;
  setAmount(value: number): AllocationDetail;

  getPercent(): number;
  setPercent(value: number): AllocationDetail;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AllocationDetail.AsObject;
  static toObject(includeInstance: boolean, msg: AllocationDetail): AllocationDetail.AsObject;
  static serializeBinaryToWriter(message: AllocationDetail, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AllocationDetail;
  static deserializeBinaryFromReader(message: AllocationDetail, reader: jspb.BinaryReader): AllocationDetail;
}

export namespace AllocationDetail {
  export type AsObject = {
    method: stark_api_stark_pb.MethodType,
    amount: number,
    percent: number,
  }
}

export class PaymentMethodRevenue extends jspb.Message {
  getMethod(): stark_api_stark_pb.MethodType;
  setMethod(value: stark_api_stark_pb.MethodType): PaymentMethodRevenue;

  getType(): stark_api_stark_pb.PaymentType;
  setType(value: stark_api_stark_pb.PaymentType): PaymentMethodRevenue;

  getAmount(): number;
  setAmount(value: number): PaymentMethodRevenue;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PaymentMethodRevenue.AsObject;
  static toObject(includeInstance: boolean, msg: PaymentMethodRevenue): PaymentMethodRevenue.AsObject;
  static serializeBinaryToWriter(message: PaymentMethodRevenue, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PaymentMethodRevenue;
  static deserializeBinaryFromReader(message: PaymentMethodRevenue, reader: jspb.BinaryReader): PaymentMethodRevenue;
}

export namespace PaymentMethodRevenue {
  export type AsObject = {
    method: stark_api_stark_pb.MethodType,
    type: stark_api_stark_pb.PaymentType,
    amount: number,
  }
}

export class TellerRevenue extends jspb.Message {
  getUserId(): string;
  setUserId(value: string): TellerRevenue;

  getAmount(): number;
  setAmount(value: number): TellerRevenue;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TellerRevenue.AsObject;
  static toObject(includeInstance: boolean, msg: TellerRevenue): TellerRevenue.AsObject;
  static serializeBinaryToWriter(message: TellerRevenue, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TellerRevenue;
  static deserializeBinaryFromReader(message: TellerRevenue, reader: jspb.BinaryReader): TellerRevenue;
}

export namespace TellerRevenue {
  export type AsObject = {
    userId: string,
    amount: number,
  }
}

export class GetIncomeStatementReply extends jspb.Message {
  getRevenuesList(): Array<Income>;
  setRevenuesList(value: Array<Income>): GetIncomeStatementReply;
  clearRevenuesList(): GetIncomeStatementReply;
  addRevenues(value?: Income, index?: number): Income;

  getProfitsList(): Array<Income>;
  setProfitsList(value: Array<Income>): GetIncomeStatementReply;
  clearProfitsList(): GetIncomeStatementReply;
  addProfits(value?: Income, index?: number): Income;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetIncomeStatementReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetIncomeStatementReply): GetIncomeStatementReply.AsObject;
  static serializeBinaryToWriter(message: GetIncomeStatementReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetIncomeStatementReply;
  static deserializeBinaryFromReader(message: GetIncomeStatementReply, reader: jspb.BinaryReader): GetIncomeStatementReply;
}

export namespace GetIncomeStatementReply {
  export type AsObject = {
    revenuesList: Array<Income.AsObject>,
    profitsList: Array<Income.AsObject>,
  }
}

export class GetPaymentTodayReply extends jspb.Message {
  getTopUpCompletion(): TopUpCompletion | undefined;
  setTopUpCompletion(value?: TopUpCompletion): GetPaymentTodayReply;
  hasTopUpCompletion(): boolean;
  clearTopUpCompletion(): GetPaymentTodayReply;

  getWithdrawCompletion(): WithdrawCompletion | undefined;
  setWithdrawCompletion(value?: WithdrawCompletion): GetPaymentTodayReply;
  hasWithdrawCompletion(): boolean;
  clearWithdrawCompletion(): GetPaymentTodayReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetPaymentTodayReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetPaymentTodayReply): GetPaymentTodayReply.AsObject;
  static serializeBinaryToWriter(message: GetPaymentTodayReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetPaymentTodayReply;
  static deserializeBinaryFromReader(message: GetPaymentTodayReply, reader: jspb.BinaryReader): GetPaymentTodayReply;
}

export namespace GetPaymentTodayReply {
  export type AsObject = {
    topUpCompletion?: TopUpCompletion.AsObject,
    withdrawCompletion?: WithdrawCompletion.AsObject,
  }
}

export class GetProfitRateReply extends jspb.Message {
  getTotalRevenue(): number;
  setTotalRevenue(value: number): GetProfitRateReply;

  getTotalProfit(): number;
  setTotalProfit(value: number): GetProfitRateReply;

  getProfitRate(): number;
  setProfitRate(value: number): GetProfitRateReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetProfitRateReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetProfitRateReply): GetProfitRateReply.AsObject;
  static serializeBinaryToWriter(message: GetProfitRateReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetProfitRateReply;
  static deserializeBinaryFromReader(message: GetProfitRateReply, reader: jspb.BinaryReader): GetProfitRateReply;
}

export namespace GetProfitRateReply {
  export type AsObject = {
    totalRevenue: number,
    totalProfit: number,
    profitRate: number,
  }
}

export class GetAllocationTopUpRateReply extends jspb.Message {
  getTotalTopup(): number;
  setTotalTopup(value: number): GetAllocationTopUpRateReply;

  getTopUpAllocationRateList(): Array<AllocationDetail>;
  setTopUpAllocationRateList(value: Array<AllocationDetail>): GetAllocationTopUpRateReply;
  clearTopUpAllocationRateList(): GetAllocationTopUpRateReply;
  addTopUpAllocationRate(value?: AllocationDetail, index?: number): AllocationDetail;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetAllocationTopUpRateReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetAllocationTopUpRateReply): GetAllocationTopUpRateReply.AsObject;
  static serializeBinaryToWriter(message: GetAllocationTopUpRateReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetAllocationTopUpRateReply;
  static deserializeBinaryFromReader(message: GetAllocationTopUpRateReply, reader: jspb.BinaryReader): GetAllocationTopUpRateReply;
}

export namespace GetAllocationTopUpRateReply {
  export type AsObject = {
    totalTopup: number,
    topUpAllocationRateList: Array<AllocationDetail.AsObject>,
  }
}

export class GetAllocationWithdrawRateReply extends jspb.Message {
  getTotalWithdraw(): number;
  setTotalWithdraw(value: number): GetAllocationWithdrawRateReply;

  getWithdrawAllocationRateList(): Array<AllocationDetail>;
  setWithdrawAllocationRateList(value: Array<AllocationDetail>): GetAllocationWithdrawRateReply;
  clearWithdrawAllocationRateList(): GetAllocationWithdrawRateReply;
  addWithdrawAllocationRate(value?: AllocationDetail, index?: number): AllocationDetail;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetAllocationWithdrawRateReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetAllocationWithdrawRateReply): GetAllocationWithdrawRateReply.AsObject;
  static serializeBinaryToWriter(message: GetAllocationWithdrawRateReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetAllocationWithdrawRateReply;
  static deserializeBinaryFromReader(message: GetAllocationWithdrawRateReply, reader: jspb.BinaryReader): GetAllocationWithdrawRateReply;
}

export namespace GetAllocationWithdrawRateReply {
  export type AsObject = {
    totalWithdraw: number,
    withdrawAllocationRateList: Array<AllocationDetail.AsObject>,
  }
}

export class GetTopPaymentMethodReply extends jspb.Message {
  getTopPaymentMethodRevenueList(): Array<PaymentMethodRevenue>;
  setTopPaymentMethodRevenueList(value: Array<PaymentMethodRevenue>): GetTopPaymentMethodReply;
  clearTopPaymentMethodRevenueList(): GetTopPaymentMethodReply;
  addTopPaymentMethodRevenue(value?: PaymentMethodRevenue, index?: number): PaymentMethodRevenue;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetTopPaymentMethodReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetTopPaymentMethodReply): GetTopPaymentMethodReply.AsObject;
  static serializeBinaryToWriter(message: GetTopPaymentMethodReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetTopPaymentMethodReply;
  static deserializeBinaryFromReader(message: GetTopPaymentMethodReply, reader: jspb.BinaryReader): GetTopPaymentMethodReply;
}

export namespace GetTopPaymentMethodReply {
  export type AsObject = {
    topPaymentMethodRevenueList: Array<PaymentMethodRevenue.AsObject>,
  }
}

export class GetTopTellerReply extends jspb.Message {
  getTopTellerRevenueList(): Array<TellerRevenue>;
  setTopTellerRevenueList(value: Array<TellerRevenue>): GetTopTellerReply;
  clearTopTellerRevenueList(): GetTopTellerReply;
  addTopTellerRevenue(value?: TellerRevenue, index?: number): TellerRevenue;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetTopTellerReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetTopTellerReply): GetTopTellerReply.AsObject;
  static serializeBinaryToWriter(message: GetTopTellerReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetTopTellerReply;
  static deserializeBinaryFromReader(message: GetTopTellerReply, reader: jspb.BinaryReader): GetTopTellerReply;
}

export namespace GetTopTellerReply {
  export type AsObject = {
    topTellerRevenueList: Array<TellerRevenue.AsObject>,
  }
}

export class SaleReportItem extends jspb.Message {
  getQuantity(): number;
  setQuantity(value: number): SaleReportItem;

  getAmount(): number;
  setAmount(value: number): SaleReportItem;

  getAverage(): number;
  setAverage(value: number): SaleReportItem;

  getDiscount(): number;
  setDiscount(value: number): SaleReportItem;

  getRevenue(): number;
  setRevenue(value: number): SaleReportItem;

  getDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setDate(value?: google_protobuf_timestamp_pb.Timestamp): SaleReportItem;
  hasDate(): boolean;
  clearDate(): SaleReportItem;

  getMerchantId(): number;
  setMerchantId(value: number): SaleReportItem;

  getPaymentMethod(): stark_api_stark_pb.MethodType;
  setPaymentMethod(value: stark_api_stark_pb.MethodType): SaleReportItem;

  getTellerId(): string;
  setTellerId(value: string): SaleReportItem;

  getKeyCase(): SaleReportItem.KeyCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SaleReportItem.AsObject;
  static toObject(includeInstance: boolean, msg: SaleReportItem): SaleReportItem.AsObject;
  static serializeBinaryToWriter(message: SaleReportItem, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SaleReportItem;
  static deserializeBinaryFromReader(message: SaleReportItem, reader: jspb.BinaryReader): SaleReportItem;
}

export namespace SaleReportItem {
  export type AsObject = {
    quantity: number,
    amount: number,
    average: number,
    discount: number,
    revenue: number,
    date?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    merchantId: number,
    paymentMethod: stark_api_stark_pb.MethodType,
    tellerId: string,
  }

  export enum KeyCase { 
    KEY_NOT_SET = 0,
    DATE = 7,
    MERCHANT_ID = 8,
    PAYMENT_METHOD = 9,
    TELLER_ID = 10,
  }
}

export class GetSellReportByTimeRangeRequest extends jspb.Message {
  getFromDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setFromDate(value?: google_protobuf_timestamp_pb.Timestamp): GetSellReportByTimeRangeRequest;
  hasFromDate(): boolean;
  clearFromDate(): GetSellReportByTimeRangeRequest;

  getToDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setToDate(value?: google_protobuf_timestamp_pb.Timestamp): GetSellReportByTimeRangeRequest;
  hasToDate(): boolean;
  clearToDate(): GetSellReportByTimeRangeRequest;

  getCurrency(): stark_api_stark_pb.Currency;
  setCurrency(value: stark_api_stark_pb.Currency): GetSellReportByTimeRangeRequest;

  getTimeZone(): number;
  setTimeZone(value: number): GetSellReportByTimeRangeRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetSellReportByTimeRangeRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetSellReportByTimeRangeRequest): GetSellReportByTimeRangeRequest.AsObject;
  static serializeBinaryToWriter(message: GetSellReportByTimeRangeRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetSellReportByTimeRangeRequest;
  static deserializeBinaryFromReader(message: GetSellReportByTimeRangeRequest, reader: jspb.BinaryReader): GetSellReportByTimeRangeRequest;
}

export namespace GetSellReportByTimeRangeRequest {
  export type AsObject = {
    fromDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    toDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    currency: stark_api_stark_pb.Currency,
    timeZone: number,
  }
}

export class GetSellReportByTimeRangeReply extends jspb.Message {
  getTopUpsList(): Array<SaleReportItem>;
  setTopUpsList(value: Array<SaleReportItem>): GetSellReportByTimeRangeReply;
  clearTopUpsList(): GetSellReportByTimeRangeReply;
  addTopUps(value?: SaleReportItem, index?: number): SaleReportItem;

  getWithdrawsList(): Array<SaleReportItem>;
  setWithdrawsList(value: Array<SaleReportItem>): GetSellReportByTimeRangeReply;
  clearWithdrawsList(): GetSellReportByTimeRangeReply;
  addWithdraws(value?: SaleReportItem, index?: number): SaleReportItem;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetSellReportByTimeRangeReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetSellReportByTimeRangeReply): GetSellReportByTimeRangeReply.AsObject;
  static serializeBinaryToWriter(message: GetSellReportByTimeRangeReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetSellReportByTimeRangeReply;
  static deserializeBinaryFromReader(message: GetSellReportByTimeRangeReply, reader: jspb.BinaryReader): GetSellReportByTimeRangeReply;
}

export namespace GetSellReportByTimeRangeReply {
  export type AsObject = {
    topUpsList: Array<SaleReportItem.AsObject>,
    withdrawsList: Array<SaleReportItem.AsObject>,
  }
}

export class GetSellReportByMerchantRequest extends jspb.Message {
  getFromDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setFromDate(value?: google_protobuf_timestamp_pb.Timestamp): GetSellReportByMerchantRequest;
  hasFromDate(): boolean;
  clearFromDate(): GetSellReportByMerchantRequest;

  getToDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setToDate(value?: google_protobuf_timestamp_pb.Timestamp): GetSellReportByMerchantRequest;
  hasToDate(): boolean;
  clearToDate(): GetSellReportByMerchantRequest;

  getCurrency(): stark_api_stark_pb.Currency;
  setCurrency(value: stark_api_stark_pb.Currency): GetSellReportByMerchantRequest;

  getMerchantIdsList(): Array<number>;
  setMerchantIdsList(value: Array<number>): GetSellReportByMerchantRequest;
  clearMerchantIdsList(): GetSellReportByMerchantRequest;
  addMerchantIds(value: number, index?: number): GetSellReportByMerchantRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetSellReportByMerchantRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetSellReportByMerchantRequest): GetSellReportByMerchantRequest.AsObject;
  static serializeBinaryToWriter(message: GetSellReportByMerchantRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetSellReportByMerchantRequest;
  static deserializeBinaryFromReader(message: GetSellReportByMerchantRequest, reader: jspb.BinaryReader): GetSellReportByMerchantRequest;
}

export namespace GetSellReportByMerchantRequest {
  export type AsObject = {
    fromDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    toDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    currency: stark_api_stark_pb.Currency,
    merchantIdsList: Array<number>,
  }
}

export class GetSellReportByMerchantReply extends jspb.Message {
  getTopUpsList(): Array<SaleReportItem>;
  setTopUpsList(value: Array<SaleReportItem>): GetSellReportByMerchantReply;
  clearTopUpsList(): GetSellReportByMerchantReply;
  addTopUps(value?: SaleReportItem, index?: number): SaleReportItem;

  getWithdrawsList(): Array<SaleReportItem>;
  setWithdrawsList(value: Array<SaleReportItem>): GetSellReportByMerchantReply;
  clearWithdrawsList(): GetSellReportByMerchantReply;
  addWithdraws(value?: SaleReportItem, index?: number): SaleReportItem;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetSellReportByMerchantReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetSellReportByMerchantReply): GetSellReportByMerchantReply.AsObject;
  static serializeBinaryToWriter(message: GetSellReportByMerchantReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetSellReportByMerchantReply;
  static deserializeBinaryFromReader(message: GetSellReportByMerchantReply, reader: jspb.BinaryReader): GetSellReportByMerchantReply;
}

export namespace GetSellReportByMerchantReply {
  export type AsObject = {
    topUpsList: Array<SaleReportItem.AsObject>,
    withdrawsList: Array<SaleReportItem.AsObject>,
  }
}

export class GetSellReportByPaymentMethodRequest extends jspb.Message {
  getFromDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setFromDate(value?: google_protobuf_timestamp_pb.Timestamp): GetSellReportByPaymentMethodRequest;
  hasFromDate(): boolean;
  clearFromDate(): GetSellReportByPaymentMethodRequest;

  getToDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setToDate(value?: google_protobuf_timestamp_pb.Timestamp): GetSellReportByPaymentMethodRequest;
  hasToDate(): boolean;
  clearToDate(): GetSellReportByPaymentMethodRequest;

  getCurrency(): stark_api_stark_pb.Currency;
  setCurrency(value: stark_api_stark_pb.Currency): GetSellReportByPaymentMethodRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetSellReportByPaymentMethodRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetSellReportByPaymentMethodRequest): GetSellReportByPaymentMethodRequest.AsObject;
  static serializeBinaryToWriter(message: GetSellReportByPaymentMethodRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetSellReportByPaymentMethodRequest;
  static deserializeBinaryFromReader(message: GetSellReportByPaymentMethodRequest, reader: jspb.BinaryReader): GetSellReportByPaymentMethodRequest;
}

export namespace GetSellReportByPaymentMethodRequest {
  export type AsObject = {
    fromDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    toDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    currency: stark_api_stark_pb.Currency,
  }
}

export class GetSellReportByPaymentMethodReply extends jspb.Message {
  getTopUpsList(): Array<SaleReportItem>;
  setTopUpsList(value: Array<SaleReportItem>): GetSellReportByPaymentMethodReply;
  clearTopUpsList(): GetSellReportByPaymentMethodReply;
  addTopUps(value?: SaleReportItem, index?: number): SaleReportItem;

  getWithdrawsList(): Array<SaleReportItem>;
  setWithdrawsList(value: Array<SaleReportItem>): GetSellReportByPaymentMethodReply;
  clearWithdrawsList(): GetSellReportByPaymentMethodReply;
  addWithdraws(value?: SaleReportItem, index?: number): SaleReportItem;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetSellReportByPaymentMethodReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetSellReportByPaymentMethodReply): GetSellReportByPaymentMethodReply.AsObject;
  static serializeBinaryToWriter(message: GetSellReportByPaymentMethodReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetSellReportByPaymentMethodReply;
  static deserializeBinaryFromReader(message: GetSellReportByPaymentMethodReply, reader: jspb.BinaryReader): GetSellReportByPaymentMethodReply;
}

export namespace GetSellReportByPaymentMethodReply {
  export type AsObject = {
    topUpsList: Array<SaleReportItem.AsObject>,
    withdrawsList: Array<SaleReportItem.AsObject>,
  }
}

export class GetSellReportByTellerRequest extends jspb.Message {
  getFromDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setFromDate(value?: google_protobuf_timestamp_pb.Timestamp): GetSellReportByTellerRequest;
  hasFromDate(): boolean;
  clearFromDate(): GetSellReportByTellerRequest;

  getToDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setToDate(value?: google_protobuf_timestamp_pb.Timestamp): GetSellReportByTellerRequest;
  hasToDate(): boolean;
  clearToDate(): GetSellReportByTellerRequest;

  getCurrency(): stark_api_stark_pb.Currency;
  setCurrency(value: stark_api_stark_pb.Currency): GetSellReportByTellerRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetSellReportByTellerRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetSellReportByTellerRequest): GetSellReportByTellerRequest.AsObject;
  static serializeBinaryToWriter(message: GetSellReportByTellerRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetSellReportByTellerRequest;
  static deserializeBinaryFromReader(message: GetSellReportByTellerRequest, reader: jspb.BinaryReader): GetSellReportByTellerRequest;
}

export namespace GetSellReportByTellerRequest {
  export type AsObject = {
    fromDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    toDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    currency: stark_api_stark_pb.Currency,
  }
}

export class GetSellReportByTellerReply extends jspb.Message {
  getTopUpsList(): Array<SaleReportItem>;
  setTopUpsList(value: Array<SaleReportItem>): GetSellReportByTellerReply;
  clearTopUpsList(): GetSellReportByTellerReply;
  addTopUps(value?: SaleReportItem, index?: number): SaleReportItem;

  getWithdrawsList(): Array<SaleReportItem>;
  setWithdrawsList(value: Array<SaleReportItem>): GetSellReportByTellerReply;
  clearWithdrawsList(): GetSellReportByTellerReply;
  addWithdraws(value?: SaleReportItem, index?: number): SaleReportItem;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetSellReportByTellerReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetSellReportByTellerReply): GetSellReportByTellerReply.AsObject;
  static serializeBinaryToWriter(message: GetSellReportByTellerReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetSellReportByTellerReply;
  static deserializeBinaryFromReader(message: GetSellReportByTellerReply, reader: jspb.BinaryReader): GetSellReportByTellerReply;
}

export namespace GetSellReportByTellerReply {
  export type AsObject = {
    topUpsList: Array<SaleReportItem.AsObject>,
    withdrawsList: Array<SaleReportItem.AsObject>,
  }
}

export enum StatisticFilterType { 
  STATISTIC_FILTER_UNSPECIFIED = 0,
  STATISTIC_FILTER_DAILY = 1,
  STATISTIC_FILTER_WEEKLY = 2,
  STATISTIC_FILTER_MONTHLY = 3,
}
