// source: stark/pepper.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var validate_validate_pb = require('@greyhole/validate/validate_pb.js');
goog.object.extend(proto, validate_validate_pb);
goog.exportSymbol('proto.mcuc.stark.pepper.ApproveBankingTopUpReply', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.ApproveBankingTopUpRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.ApproveBankingWithdrawReply', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.BankName', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.BankStatus', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.BankingPaymentDetail', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.CancelBankingWithdrawReply', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.CancelBankingWithdrawRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.ConductBankPayment', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.CreateBankingTopUpReply', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.CreateBankingTopUpRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.CreateBankingWithdrawReply', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.CreateBankingWithdrawRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.CreateSystemBankAccountReply', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.CreateSystemBankAccountRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.GetBankPaymentCodeReply', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.GetBankPaymentCodeRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.ImportSystemBankAccountReply', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.ImportSystemBankAccountRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.ListSystemBankAccountsReply', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.ListSystemBankAccountsRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.RejectBankingTopUpReply', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.RejectBankingTopUpRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.RejectBankingWithdrawReply', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.RejectBankingWithdrawRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.SubmitBankingWithdrawReply', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.SystemBank', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusReply', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountReply', null, global);
goog.exportSymbol('proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.GetBankPaymentCodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.GetBankPaymentCodeRequest.displayName = 'proto.mcuc.stark.pepper.GetBankPaymentCodeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.GetBankPaymentCodeReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.GetBankPaymentCodeReply.displayName = 'proto.mcuc.stark.pepper.GetBankPaymentCodeReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.CreateBankingWithdrawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.CreateBankingWithdrawRequest.displayName = 'proto.mcuc.stark.pepper.CreateBankingWithdrawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.CreateBankingWithdrawReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.CreateBankingWithdrawReply.displayName = 'proto.mcuc.stark.pepper.CreateBankingWithdrawReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.CreateBankingTopUpRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.CreateBankingTopUpRequest.displayName = 'proto.mcuc.stark.pepper.CreateBankingTopUpRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.CreateBankingTopUpReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.CreateBankingTopUpReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.CreateBankingTopUpReply.displayName = 'proto.mcuc.stark.pepper.CreateBankingTopUpReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.ApproveBankingTopUpRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.ApproveBankingTopUpRequest.displayName = 'proto.mcuc.stark.pepper.ApproveBankingTopUpRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.ApproveBankingTopUpReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.ApproveBankingTopUpReply.displayName = 'proto.mcuc.stark.pepper.ApproveBankingTopUpReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.RejectBankingTopUpRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.RejectBankingTopUpRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.RejectBankingTopUpRequest.displayName = 'proto.mcuc.stark.pepper.RejectBankingTopUpRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.RejectBankingTopUpReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.RejectBankingTopUpReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.RejectBankingTopUpReply.displayName = 'proto.mcuc.stark.pepper.RejectBankingTopUpReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest.displayName = 'proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.ApproveBankingWithdrawReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.ApproveBankingWithdrawReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.ApproveBankingWithdrawReply.displayName = 'proto.mcuc.stark.pepper.ApproveBankingWithdrawReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.displayName = 'proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.SubmitBankingWithdrawReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.SubmitBankingWithdrawReply.displayName = 'proto.mcuc.stark.pepper.SubmitBankingWithdrawReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest.displayName = 'proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply.displayName = 'proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.RejectBankingWithdrawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.RejectBankingWithdrawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.RejectBankingWithdrawRequest.displayName = 'proto.mcuc.stark.pepper.RejectBankingWithdrawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.RejectBankingWithdrawReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.RejectBankingWithdrawReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.RejectBankingWithdrawReply.displayName = 'proto.mcuc.stark.pepper.RejectBankingWithdrawReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.CancelBankingWithdrawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.CancelBankingWithdrawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.CancelBankingWithdrawRequest.displayName = 'proto.mcuc.stark.pepper.CancelBankingWithdrawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.CancelBankingWithdrawReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.CancelBankingWithdrawReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.CancelBankingWithdrawReply.displayName = 'proto.mcuc.stark.pepper.CancelBankingWithdrawReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.pepper.ListSystemBankAccountsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.displayName = 'proto.mcuc.stark.pepper.ListSystemBankAccountsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.pepper.ListSystemBankAccountsReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.pepper.ListSystemBankAccountsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.ListSystemBankAccountsReply.displayName = 'proto.mcuc.stark.pepper.ListSystemBankAccountsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.CreateSystemBankAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.displayName = 'proto.mcuc.stark.pepper.CreateSystemBankAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.CreateSystemBankAccountReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.CreateSystemBankAccountReply.displayName = 'proto.mcuc.stark.pepper.CreateSystemBankAccountReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest.displayName = 'proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountReply.displayName = 'proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.ImportSystemBankAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.pepper.ImportSystemBankAccountRequest.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.pepper.ImportSystemBankAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.ImportSystemBankAccountRequest.displayName = 'proto.mcuc.stark.pepper.ImportSystemBankAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.ImportSystemBankAccountReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.ImportSystemBankAccountReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.ImportSystemBankAccountReply.displayName = 'proto.mcuc.stark.pepper.ImportSystemBankAccountReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest.displayName = 'proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.displayName = 'proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest.displayName = 'proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusReply.displayName = 'proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest.displayName = 'proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply.displayName = 'proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.SystemBank = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.SystemBank, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.SystemBank.displayName = 'proto.mcuc.stark.pepper.SystemBank';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.ConductBankPayment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.ConductBankPayment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.ConductBankPayment.displayName = 'proto.mcuc.stark.pepper.ConductBankPayment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.pepper.BankingPaymentDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.pepper.BankingPaymentDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.pepper.BankingPaymentDetail.displayName = 'proto.mcuc.stark.pepper.BankingPaymentDetail';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.GetBankPaymentCodeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.GetBankPaymentCodeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bankName: jspb.Message.getFieldWithDefault(msg, 1, 0),
    merchantUserId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.GetBankPaymentCodeRequest}
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.GetBankPaymentCodeRequest;
  return proto.mcuc.stark.pepper.GetBankPaymentCodeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.GetBankPaymentCodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.GetBankPaymentCodeRequest}
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mcuc.stark.pepper.BankName} */ (reader.readEnum());
      msg.setBankName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.GetBankPaymentCodeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.GetBankPaymentCodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBankName();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMerchantUserId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional BankName bank_name = 1;
 * @return {!proto.mcuc.stark.pepper.BankName}
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeRequest.prototype.getBankName = function() {
  return /** @type {!proto.mcuc.stark.pepper.BankName} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mcuc.stark.pepper.BankName} value
 * @return {!proto.mcuc.stark.pepper.GetBankPaymentCodeRequest} returns this
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeRequest.prototype.setBankName = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 merchant_user_id = 2;
 * @return {number}
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeRequest.prototype.getMerchantUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.GetBankPaymentCodeRequest} returns this
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeRequest.prototype.setMerchantUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.GetBankPaymentCodeReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.GetBankPaymentCodeReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accountNumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    accountName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    branch: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.GetBankPaymentCodeReply}
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.GetBankPaymentCodeReply;
  return proto.mcuc.stark.pepper.GetBankPaymentCodeReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.GetBankPaymentCodeReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.GetBankPaymentCodeReply}
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBranch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.GetBankPaymentCodeReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.GetBankPaymentCodeReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccountNumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAccountName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBranch();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeReply.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.GetBankPaymentCodeReply} returns this
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeReply.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string account_number = 2;
 * @return {string}
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeReply.prototype.getAccountNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.GetBankPaymentCodeReply} returns this
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeReply.prototype.setAccountNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string account_name = 3;
 * @return {string}
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeReply.prototype.getAccountName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.GetBankPaymentCodeReply} returns this
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeReply.prototype.setAccountName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string branch = 4;
 * @return {string}
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeReply.prototype.getBranch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.GetBankPaymentCodeReply} returns this
 */
proto.mcuc.stark.pepper.GetBankPaymentCodeReply.prototype.setBranch = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.CreateBankingWithdrawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.CreateBankingWithdrawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    merchantUserId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    merchantUserAccountNumber: jspb.Message.getFieldWithDefault(msg, 3, ""),
    merchantUserAccountName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    bankName: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.CreateBankingWithdrawRequest}
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.CreateBankingWithdrawRequest;
  return proto.mcuc.stark.pepper.CreateBankingWithdrawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.CreateBankingWithdrawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.CreateBankingWithdrawRequest}
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMerchantUserAccountNumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMerchantUserAccountName(value);
      break;
    case 5:
      var value = /** @type {!proto.mcuc.stark.pepper.BankName} */ (reader.readEnum());
      msg.setBankName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.CreateBankingWithdrawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.CreateBankingWithdrawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMerchantUserId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMerchantUserAccountNumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMerchantUserAccountName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBankName();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional uint64 amount = 1;
 * @return {number}
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.CreateBankingWithdrawRequest} returns this
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawRequest.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 merchant_user_id = 2;
 * @return {number}
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawRequest.prototype.getMerchantUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.CreateBankingWithdrawRequest} returns this
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawRequest.prototype.setMerchantUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string merchant_user_account_number = 3;
 * @return {string}
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawRequest.prototype.getMerchantUserAccountNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.CreateBankingWithdrawRequest} returns this
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawRequest.prototype.setMerchantUserAccountNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string merchant_user_account_name = 4;
 * @return {string}
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawRequest.prototype.getMerchantUserAccountName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.CreateBankingWithdrawRequest} returns this
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawRequest.prototype.setMerchantUserAccountName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional BankName bank_name = 5;
 * @return {!proto.mcuc.stark.pepper.BankName}
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawRequest.prototype.getBankName = function() {
  return /** @type {!proto.mcuc.stark.pepper.BankName} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.mcuc.stark.pepper.BankName} value
 * @return {!proto.mcuc.stark.pepper.CreateBankingWithdrawRequest} returns this
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawRequest.prototype.setBankName = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.CreateBankingWithdrawReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.CreateBankingWithdrawReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.CreateBankingWithdrawReply}
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.CreateBankingWithdrawReply;
  return proto.mcuc.stark.pepper.CreateBankingWithdrawReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.CreateBankingWithdrawReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.CreateBankingWithdrawReply}
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.CreateBankingWithdrawReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.CreateBankingWithdrawReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawReply.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.CreateBankingWithdrawReply} returns this
 */
proto.mcuc.stark.pepper.CreateBankingWithdrawReply.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.CreateBankingTopUpRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.CreateBankingTopUpRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    paymentCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    merchantUserAccountNumber: jspb.Message.getFieldWithDefault(msg, 3, ""),
    merchantUserAccountName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    systemAccountNumber: jspb.Message.getFieldWithDefault(msg, 5, ""),
    systemAccountName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    note: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.CreateBankingTopUpRequest}
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.CreateBankingTopUpRequest;
  return proto.mcuc.stark.pepper.CreateBankingTopUpRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.CreateBankingTopUpRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.CreateBankingTopUpRequest}
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaymentCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMerchantUserAccountNumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMerchantUserAccountName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemAccountNumber(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemAccountName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.CreateBankingTopUpRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.CreateBankingTopUpRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPaymentCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMerchantUserAccountNumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMerchantUserAccountName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSystemAccountNumber();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSystemAccountName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional uint64 amount = 1;
 * @return {number}
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.CreateBankingTopUpRequest} returns this
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string payment_code = 2;
 * @return {string}
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest.prototype.getPaymentCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.CreateBankingTopUpRequest} returns this
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest.prototype.setPaymentCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string merchant_user_account_number = 3;
 * @return {string}
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest.prototype.getMerchantUserAccountNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.CreateBankingTopUpRequest} returns this
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest.prototype.setMerchantUserAccountNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string merchant_user_account_name = 4;
 * @return {string}
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest.prototype.getMerchantUserAccountName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.CreateBankingTopUpRequest} returns this
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest.prototype.setMerchantUserAccountName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string system_account_number = 5;
 * @return {string}
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest.prototype.getSystemAccountNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.CreateBankingTopUpRequest} returns this
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest.prototype.setSystemAccountNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string system_account_name = 6;
 * @return {string}
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest.prototype.getSystemAccountName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.CreateBankingTopUpRequest} returns this
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest.prototype.setSystemAccountName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string note = 7;
 * @return {string}
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.CreateBankingTopUpRequest} returns this
 */
proto.mcuc.stark.pepper.CreateBankingTopUpRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.CreateBankingTopUpReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.CreateBankingTopUpReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.CreateBankingTopUpReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.CreateBankingTopUpReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.CreateBankingTopUpReply}
 */
proto.mcuc.stark.pepper.CreateBankingTopUpReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.CreateBankingTopUpReply;
  return proto.mcuc.stark.pepper.CreateBankingTopUpReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.CreateBankingTopUpReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.CreateBankingTopUpReply}
 */
proto.mcuc.stark.pepper.CreateBankingTopUpReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.CreateBankingTopUpReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.CreateBankingTopUpReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.CreateBankingTopUpReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.CreateBankingTopUpReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.ApproveBankingTopUpRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.ApproveBankingTopUpRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    imageUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    txId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    note: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.ApproveBankingTopUpRequest}
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.ApproveBankingTopUpRequest;
  return proto.mcuc.stark.pepper.ApproveBankingTopUpRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.ApproveBankingTopUpRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.ApproveBankingTopUpRequest}
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.ApproveBankingTopUpRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.ApproveBankingTopUpRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getImageUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTxId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpRequest.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.ApproveBankingTopUpRequest} returns this
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpRequest.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string image_url = 2;
 * @return {string}
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpRequest.prototype.getImageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.ApproveBankingTopUpRequest} returns this
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpRequest.prototype.setImageUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tx_id = 3;
 * @return {string}
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpRequest.prototype.getTxId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.ApproveBankingTopUpRequest} returns this
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpRequest.prototype.setTxId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string note = 4;
 * @return {string}
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.ApproveBankingTopUpRequest} returns this
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.ApproveBankingTopUpReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.ApproveBankingTopUpReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.ApproveBankingTopUpReply}
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.ApproveBankingTopUpReply;
  return proto.mcuc.stark.pepper.ApproveBankingTopUpReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.ApproveBankingTopUpReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.ApproveBankingTopUpReply}
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.ApproveBankingTopUpReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.ApproveBankingTopUpReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ApproveBankingTopUpReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.RejectBankingTopUpRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.RejectBankingTopUpRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.RejectBankingTopUpRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.RejectBankingTopUpRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    note: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isMerchantCall: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.RejectBankingTopUpRequest}
 */
proto.mcuc.stark.pepper.RejectBankingTopUpRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.RejectBankingTopUpRequest;
  return proto.mcuc.stark.pepper.RejectBankingTopUpRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.RejectBankingTopUpRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.RejectBankingTopUpRequest}
 */
proto.mcuc.stark.pepper.RejectBankingTopUpRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMerchantCall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.RejectBankingTopUpRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.RejectBankingTopUpRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.RejectBankingTopUpRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.RejectBankingTopUpRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsMerchantCall();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.pepper.RejectBankingTopUpRequest.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.RejectBankingTopUpRequest} returns this
 */
proto.mcuc.stark.pepper.RejectBankingTopUpRequest.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string note = 2;
 * @return {string}
 */
proto.mcuc.stark.pepper.RejectBankingTopUpRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.RejectBankingTopUpRequest} returns this
 */
proto.mcuc.stark.pepper.RejectBankingTopUpRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool is_merchant_call = 3;
 * @return {boolean}
 */
proto.mcuc.stark.pepper.RejectBankingTopUpRequest.prototype.getIsMerchantCall = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mcuc.stark.pepper.RejectBankingTopUpRequest} returns this
 */
proto.mcuc.stark.pepper.RejectBankingTopUpRequest.prototype.setIsMerchantCall = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.RejectBankingTopUpReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.RejectBankingTopUpReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.RejectBankingTopUpReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.RejectBankingTopUpReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.RejectBankingTopUpReply}
 */
proto.mcuc.stark.pepper.RejectBankingTopUpReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.RejectBankingTopUpReply;
  return proto.mcuc.stark.pepper.RejectBankingTopUpReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.RejectBankingTopUpReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.RejectBankingTopUpReply}
 */
proto.mcuc.stark.pepper.RejectBankingTopUpReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.RejectBankingTopUpReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.RejectBankingTopUpReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.RejectBankingTopUpReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.RejectBankingTopUpReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    note: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest}
 */
proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest;
  return proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest}
 */
proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest} returns this
 */
proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string note = 4;
 * @return {string}
 */
proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest} returns this
 */
proto.mcuc.stark.pepper.ApproveBankingWithdrawRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.ApproveBankingWithdrawReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.ApproveBankingWithdrawReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.ApproveBankingWithdrawReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ApproveBankingWithdrawReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.ApproveBankingWithdrawReply}
 */
proto.mcuc.stark.pepper.ApproveBankingWithdrawReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.ApproveBankingWithdrawReply;
  return proto.mcuc.stark.pepper.ApproveBankingWithdrawReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.ApproveBankingWithdrawReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.ApproveBankingWithdrawReply}
 */
proto.mcuc.stark.pepper.ApproveBankingWithdrawReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.ApproveBankingWithdrawReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.ApproveBankingWithdrawReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.ApproveBankingWithdrawReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ApproveBankingWithdrawReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bankName: jspb.Message.getFieldWithDefault(msg, 2, 0),
    accountNumber: jspb.Message.getFieldWithDefault(msg, 3, ""),
    accountName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    fee: jspb.Message.getFieldWithDefault(msg, 6, 0),
    imageUrl: jspb.Message.getFieldWithDefault(msg, 7, ""),
    txId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    note: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest}
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest;
  return proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest}
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    case 2:
      var value = /** @type {!proto.mcuc.stark.pepper.BankName} */ (reader.readEnum());
      msg.setBankName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountNumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFee(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageUrl(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getBankName();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAccountNumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAccountName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getImageUrl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTxId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest} returns this
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional BankName bank_name = 2;
 * @return {!proto.mcuc.stark.pepper.BankName}
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.prototype.getBankName = function() {
  return /** @type {!proto.mcuc.stark.pepper.BankName} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.mcuc.stark.pepper.BankName} value
 * @return {!proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest} returns this
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.prototype.setBankName = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string account_number = 3;
 * @return {string}
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.prototype.getAccountNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest} returns this
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.prototype.setAccountNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string account_name = 4;
 * @return {string}
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.prototype.getAccountName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest} returns this
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.prototype.setAccountName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 amount = 5;
 * @return {number}
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest} returns this
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 fee = 6;
 * @return {number}
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest} returns this
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.prototype.setFee = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string image_url = 7;
 * @return {string}
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.prototype.getImageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest} returns this
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.prototype.setImageUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string tx_id = 8;
 * @return {string}
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.prototype.getTxId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest} returns this
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.prototype.setTxId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string note = 9;
 * @return {string}
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest} returns this
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.SubmitBankingWithdrawReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.SubmitBankingWithdrawReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.SubmitBankingWithdrawReply}
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.SubmitBankingWithdrawReply;
  return proto.mcuc.stark.pepper.SubmitBankingWithdrawReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.SubmitBankingWithdrawReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.SubmitBankingWithdrawReply}
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.SubmitBankingWithdrawReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.SubmitBankingWithdrawReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.SubmitBankingWithdrawReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountNumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accountName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest}
 */
proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest;
  return proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest}
 */
proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccountName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string account_number = 1;
 * @return {string}
 */
proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest.prototype.getAccountNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest} returns this
 */
proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest.prototype.setAccountNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string account_name = 2;
 * @return {string}
 */
proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest.prototype.getAccountName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest} returns this
 */
proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest.prototype.setAccountName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    verified: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply}
 */
proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply;
  return proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply}
 */
proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVerified(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerified();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool verified = 1;
 * @return {boolean}
 */
proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply.prototype.getVerified = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply} returns this
 */
proto.mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply.prototype.setVerified = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.RejectBankingWithdrawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.RejectBankingWithdrawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.RejectBankingWithdrawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.RejectBankingWithdrawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    note: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isMerchantCall: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.RejectBankingWithdrawRequest}
 */
proto.mcuc.stark.pepper.RejectBankingWithdrawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.RejectBankingWithdrawRequest;
  return proto.mcuc.stark.pepper.RejectBankingWithdrawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.RejectBankingWithdrawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.RejectBankingWithdrawRequest}
 */
proto.mcuc.stark.pepper.RejectBankingWithdrawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMerchantCall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.RejectBankingWithdrawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.RejectBankingWithdrawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.RejectBankingWithdrawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.RejectBankingWithdrawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsMerchantCall();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.pepper.RejectBankingWithdrawRequest.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.RejectBankingWithdrawRequest} returns this
 */
proto.mcuc.stark.pepper.RejectBankingWithdrawRequest.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string note = 2;
 * @return {string}
 */
proto.mcuc.stark.pepper.RejectBankingWithdrawRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.RejectBankingWithdrawRequest} returns this
 */
proto.mcuc.stark.pepper.RejectBankingWithdrawRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool is_merchant_call = 3;
 * @return {boolean}
 */
proto.mcuc.stark.pepper.RejectBankingWithdrawRequest.prototype.getIsMerchantCall = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mcuc.stark.pepper.RejectBankingWithdrawRequest} returns this
 */
proto.mcuc.stark.pepper.RejectBankingWithdrawRequest.prototype.setIsMerchantCall = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.RejectBankingWithdrawReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.RejectBankingWithdrawReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.RejectBankingWithdrawReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.RejectBankingWithdrawReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.RejectBankingWithdrawReply}
 */
proto.mcuc.stark.pepper.RejectBankingWithdrawReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.RejectBankingWithdrawReply;
  return proto.mcuc.stark.pepper.RejectBankingWithdrawReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.RejectBankingWithdrawReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.RejectBankingWithdrawReply}
 */
proto.mcuc.stark.pepper.RejectBankingWithdrawReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.RejectBankingWithdrawReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.RejectBankingWithdrawReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.RejectBankingWithdrawReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.RejectBankingWithdrawReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.CancelBankingWithdrawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.CancelBankingWithdrawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.CancelBankingWithdrawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.CancelBankingWithdrawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.CancelBankingWithdrawRequest}
 */
proto.mcuc.stark.pepper.CancelBankingWithdrawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.CancelBankingWithdrawRequest;
  return proto.mcuc.stark.pepper.CancelBankingWithdrawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.CancelBankingWithdrawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.CancelBankingWithdrawRequest}
 */
proto.mcuc.stark.pepper.CancelBankingWithdrawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.CancelBankingWithdrawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.CancelBankingWithdrawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.CancelBankingWithdrawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.CancelBankingWithdrawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.pepper.CancelBankingWithdrawRequest.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.CancelBankingWithdrawRequest} returns this
 */
proto.mcuc.stark.pepper.CancelBankingWithdrawRequest.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.CancelBankingWithdrawReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.CancelBankingWithdrawReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.CancelBankingWithdrawReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.CancelBankingWithdrawReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.CancelBankingWithdrawReply}
 */
proto.mcuc.stark.pepper.CancelBankingWithdrawReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.CancelBankingWithdrawReply;
  return proto.mcuc.stark.pepper.CancelBankingWithdrawReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.CancelBankingWithdrawReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.CancelBankingWithdrawReply}
 */
proto.mcuc.stark.pepper.CancelBankingWithdrawReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.CancelBankingWithdrawReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.CancelBankingWithdrawReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.CancelBankingWithdrawReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.CancelBankingWithdrawReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.ListSystemBankAccountsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    merchantIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    statuesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    bankNamesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    idsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    page: jspb.Message.getFieldWithDefault(msg, 10, 0),
    size: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsRequest}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.ListSystemBankAccountsRequest;
  return proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.ListSystemBankAccountsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsRequest}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setMerchantIdsList(value);
      break;
    case 2:
      var value = /** @type {!Array<!proto.mcuc.stark.pepper.BankStatus>} */ (reader.readPackedEnum());
      msg.setStatuesList(value);
      break;
    case 3:
      var value = /** @type {!Array<!proto.mcuc.stark.pepper.BankName>} */ (reader.readPackedEnum());
      msg.setBankNamesList(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setIdsList(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPage(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.ListSystemBankAccountsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMerchantIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
  f = message.getStatuesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
  f = message.getBankNamesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      4,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
};


/**
 * repeated int64 merchant_ids = 1;
 * @return {!Array<number>}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.getMerchantIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsRequest} returns this
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.setMerchantIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsRequest} returns this
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.addMerchantIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsRequest} returns this
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.clearMerchantIdsList = function() {
  return this.setMerchantIdsList([]);
};


/**
 * repeated BankStatus statues = 2;
 * @return {!Array<!proto.mcuc.stark.pepper.BankStatus>}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.getStatuesList = function() {
  return /** @type {!Array<!proto.mcuc.stark.pepper.BankStatus>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.mcuc.stark.pepper.BankStatus>} value
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsRequest} returns this
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.setStatuesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.mcuc.stark.pepper.BankStatus} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsRequest} returns this
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.addStatues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsRequest} returns this
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.clearStatuesList = function() {
  return this.setStatuesList([]);
};


/**
 * repeated BankName bank_names = 3;
 * @return {!Array<!proto.mcuc.stark.pepper.BankName>}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.getBankNamesList = function() {
  return /** @type {!Array<!proto.mcuc.stark.pepper.BankName>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<!proto.mcuc.stark.pepper.BankName>} value
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsRequest} returns this
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.setBankNamesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.mcuc.stark.pepper.BankName} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsRequest} returns this
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.addBankNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsRequest} returns this
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.clearBankNamesList = function() {
  return this.setBankNamesList([]);
};


/**
 * repeated int64 ids = 4;
 * @return {!Array<number>}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.getIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsRequest} returns this
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsRequest} returns this
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsRequest} returns this
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};


/**
 * optional uint32 page = 10;
 * @return {number}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsRequest} returns this
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint32 size = 11;
 * @return {number}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsRequest} returns this
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsRequest.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsReply.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.ListSystemBankAccountsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.ListSystemBankAccountsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFieldWithDefault(msg, 1, 0),
    currentPage: jspb.Message.getFieldWithDefault(msg, 2, 0),
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.mcuc.stark.pepper.SystemBank.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsReply}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.ListSystemBankAccountsReply;
  return proto.mcuc.stark.pepper.ListSystemBankAccountsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.ListSystemBankAccountsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsReply}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentPage(value);
      break;
    case 3:
      var value = new proto.mcuc.stark.pepper.SystemBank;
      reader.readMessage(value,proto.mcuc.stark.pepper.SystemBank.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.ListSystemBankAccountsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.ListSystemBankAccountsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCurrentPage();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.mcuc.stark.pepper.SystemBank.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 total = 1;
 * @return {number}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsReply.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsReply} returns this
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsReply.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 current_page = 2;
 * @return {number}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsReply.prototype.getCurrentPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsReply} returns this
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsReply.prototype.setCurrentPage = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated SystemBank records = 3;
 * @return {!Array<!proto.mcuc.stark.pepper.SystemBank>}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsReply.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.pepper.SystemBank>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.pepper.SystemBank, 3));
};


/**
 * @param {!Array<!proto.mcuc.stark.pepper.SystemBank>} value
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsReply} returns this
*/
proto.mcuc.stark.pepper.ListSystemBankAccountsReply.prototype.setRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.mcuc.stark.pepper.SystemBank=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.pepper.SystemBank}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsReply.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.mcuc.stark.pepper.SystemBank, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountsReply} returns this
 */
proto.mcuc.stark.pepper.ListSystemBankAccountsReply.prototype.clearRecordsList = function() {
  return this.setRecordsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bankName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    merchantId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    accountNumber: jspb.Message.getFieldWithDefault(msg, 4, ""),
    accountName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    branch: jspb.Message.getFieldWithDefault(msg, 6, ""),
    balance: jspb.Message.getFieldWithDefault(msg, 7, 0),
    dailyBalanceLimit: jspb.Message.getFieldWithDefault(msg, 8, 0),
    errorCode: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest}
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.CreateSystemBankAccountRequest;
  return proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest}
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBankName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountNumber(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBranch(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBalance(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDailyBalanceLimit(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getBankName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMerchantId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getAccountNumber();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAccountName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getBranch();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBalance();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getDailyBalanceLimit();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getErrorCode();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional int64 account_id = 1;
 * @return {number}
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest} returns this
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string bank_name = 2;
 * @return {string}
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.prototype.getBankName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest} returns this
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.prototype.setBankName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 merchant_id = 3;
 * @return {number}
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.prototype.getMerchantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest} returns this
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.prototype.setMerchantId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string account_number = 4;
 * @return {string}
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.prototype.getAccountNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest} returns this
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.prototype.setAccountNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string account_name = 5;
 * @return {string}
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.prototype.getAccountName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest} returns this
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.prototype.setAccountName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string branch = 6;
 * @return {string}
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.prototype.getBranch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest} returns this
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.prototype.setBranch = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 balance = 7;
 * @return {number}
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest} returns this
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.prototype.setBalance = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 daily_balance_limit = 8;
 * @return {number}
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.prototype.getDailyBalanceLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest} returns this
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.prototype.setDailyBalanceLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string error_code = 9;
 * @return {string}
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.prototype.getErrorCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest} returns this
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.prototype.setErrorCode = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.CreateSystemBankAccountReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.CreateSystemBankAccountReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.CreateSystemBankAccountReply}
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.CreateSystemBankAccountReply;
  return proto.mcuc.stark.pepper.CreateSystemBankAccountReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.CreateSystemBankAccountReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.CreateSystemBankAccountReply}
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.CreateSystemBankAccountReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.CreateSystemBankAccountReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.CreateSystemBankAccountReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bankName: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accountNumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    accountName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest}
 */
proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest;
  return proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest}
 */
proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mcuc.stark.pepper.BankName} */ (reader.readEnum());
      msg.setBankName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBankName();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAccountNumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAccountName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional BankName bank_name = 1;
 * @return {!proto.mcuc.stark.pepper.BankName}
 */
proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest.prototype.getBankName = function() {
  return /** @type {!proto.mcuc.stark.pepper.BankName} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mcuc.stark.pepper.BankName} value
 * @return {!proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest} returns this
 */
proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest.prototype.setBankName = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string account_number = 2;
 * @return {string}
 */
proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest.prototype.getAccountNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest} returns this
 */
proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest.prototype.setAccountNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string account_name = 3;
 * @return {string}
 */
proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest.prototype.getAccountName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest} returns this
 */
proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest.prototype.setAccountName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountReply}
 */
proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountReply;
  return proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountReply}
 */
proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.VerifyMerchantUserBankAccountReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.pepper.ImportSystemBankAccountRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.ImportSystemBankAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.ImportSystemBankAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.ImportSystemBankAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ImportSystemBankAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.ImportSystemBankAccountRequest}
 */
proto.mcuc.stark.pepper.ImportSystemBankAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.ImportSystemBankAccountRequest;
  return proto.mcuc.stark.pepper.ImportSystemBankAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.ImportSystemBankAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.ImportSystemBankAccountRequest}
 */
proto.mcuc.stark.pepper.ImportSystemBankAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.pepper.CreateSystemBankAccountRequest;
      reader.readMessage(value,proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.ImportSystemBankAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.ImportSystemBankAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.ImportSystemBankAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ImportSystemBankAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CreateSystemBankAccountRequest records = 1;
 * @return {!Array<!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest>}
 */
proto.mcuc.stark.pepper.ImportSystemBankAccountRequest.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.pepper.CreateSystemBankAccountRequest, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest>} value
 * @return {!proto.mcuc.stark.pepper.ImportSystemBankAccountRequest} returns this
*/
proto.mcuc.stark.pepper.ImportSystemBankAccountRequest.prototype.setRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest}
 */
proto.mcuc.stark.pepper.ImportSystemBankAccountRequest.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.pepper.CreateSystemBankAccountRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.pepper.ImportSystemBankAccountRequest} returns this
 */
proto.mcuc.stark.pepper.ImportSystemBankAccountRequest.prototype.clearRecordsList = function() {
  return this.setRecordsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.ImportSystemBankAccountReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.ImportSystemBankAccountReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.ImportSystemBankAccountReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ImportSystemBankAccountReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.ImportSystemBankAccountReply}
 */
proto.mcuc.stark.pepper.ImportSystemBankAccountReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.ImportSystemBankAccountReply;
  return proto.mcuc.stark.pepper.ImportSystemBankAccountReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.ImportSystemBankAccountReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.ImportSystemBankAccountReply}
 */
proto.mcuc.stark.pepper.ImportSystemBankAccountReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.ImportSystemBankAccountReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.ImportSystemBankAccountReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.ImportSystemBankAccountReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ImportSystemBankAccountReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest}
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest;
  return proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest}
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.pepper.CreateSystemBankAccountRequest;
      reader.readMessage(value,proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CreateSystemBankAccountRequest records = 1;
 * @return {!Array<!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest>}
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.pepper.CreateSystemBankAccountRequest, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest>} value
 * @return {!proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest} returns this
*/
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest.prototype.setRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest}
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.pepper.CreateSystemBankAccountRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest} returns this
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountRequest.prototype.clearRecordsList = function() {
  return this.setRecordsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    duplicatedRecordsList: jspb.Message.toObjectList(msg.getDuplicatedRecordsList(),
    proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.toObject, includeInstance),
    validRecordsList: jspb.Message.toObjectList(msg.getValidRecordsList(),
    proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.toObject, includeInstance),
    duplicatedAccountIdRecordsList: jspb.Message.toObjectList(msg.getDuplicatedAccountIdRecordsList(),
    proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.toObject, includeInstance),
    invalidRecordsList: jspb.Message.toObjectList(msg.getInvalidRecordsList(),
    proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply}
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply;
  return proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply}
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.pepper.CreateSystemBankAccountRequest;
      reader.readMessage(value,proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.deserializeBinaryFromReader);
      msg.addDuplicatedRecords(value);
      break;
    case 2:
      var value = new proto.mcuc.stark.pepper.CreateSystemBankAccountRequest;
      reader.readMessage(value,proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.deserializeBinaryFromReader);
      msg.addValidRecords(value);
      break;
    case 3:
      var value = new proto.mcuc.stark.pepper.CreateSystemBankAccountRequest;
      reader.readMessage(value,proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.deserializeBinaryFromReader);
      msg.addDuplicatedAccountIdRecords(value);
      break;
    case 4:
      var value = new proto.mcuc.stark.pepper.CreateSystemBankAccountRequest;
      reader.readMessage(value,proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.deserializeBinaryFromReader);
      msg.addInvalidRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDuplicatedRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.serializeBinaryToWriter
    );
  }
  f = message.getValidRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.serializeBinaryToWriter
    );
  }
  f = message.getDuplicatedAccountIdRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.serializeBinaryToWriter
    );
  }
  f = message.getInvalidRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.mcuc.stark.pepper.CreateSystemBankAccountRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CreateSystemBankAccountRequest duplicated_records = 1;
 * @return {!Array<!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest>}
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.prototype.getDuplicatedRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.pepper.CreateSystemBankAccountRequest, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest>} value
 * @return {!proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply} returns this
*/
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.prototype.setDuplicatedRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest}
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.prototype.addDuplicatedRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.pepper.CreateSystemBankAccountRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply} returns this
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.prototype.clearDuplicatedRecordsList = function() {
  return this.setDuplicatedRecordsList([]);
};


/**
 * repeated CreateSystemBankAccountRequest valid_records = 2;
 * @return {!Array<!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest>}
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.prototype.getValidRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.pepper.CreateSystemBankAccountRequest, 2));
};


/**
 * @param {!Array<!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest>} value
 * @return {!proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply} returns this
*/
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.prototype.setValidRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest}
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.prototype.addValidRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mcuc.stark.pepper.CreateSystemBankAccountRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply} returns this
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.prototype.clearValidRecordsList = function() {
  return this.setValidRecordsList([]);
};


/**
 * repeated CreateSystemBankAccountRequest duplicated_account_id_records = 3;
 * @return {!Array<!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest>}
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.prototype.getDuplicatedAccountIdRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.pepper.CreateSystemBankAccountRequest, 3));
};


/**
 * @param {!Array<!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest>} value
 * @return {!proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply} returns this
*/
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.prototype.setDuplicatedAccountIdRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest}
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.prototype.addDuplicatedAccountIdRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.mcuc.stark.pepper.CreateSystemBankAccountRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply} returns this
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.prototype.clearDuplicatedAccountIdRecordsList = function() {
  return this.setDuplicatedAccountIdRecordsList([]);
};


/**
 * repeated CreateSystemBankAccountRequest invalid_records = 4;
 * @return {!Array<!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest>}
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.prototype.getInvalidRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.pepper.CreateSystemBankAccountRequest, 4));
};


/**
 * @param {!Array<!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest>} value
 * @return {!proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply} returns this
*/
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.prototype.setInvalidRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.pepper.CreateSystemBankAccountRequest}
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.prototype.addInvalidRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.mcuc.stark.pepper.CreateSystemBankAccountRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply} returns this
 */
proto.mcuc.stark.pepper.ValidateImportSystemBankAccountReply.prototype.clearInvalidRecordsList = function() {
  return this.setInvalidRecordsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest}
 */
proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest;
  return proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest}
 */
proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.mcuc.stark.pepper.BankStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest} returns this
 */
proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional BankStatus status = 2;
 * @return {!proto.mcuc.stark.pepper.BankStatus}
 */
proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest.prototype.getStatus = function() {
  return /** @type {!proto.mcuc.stark.pepper.BankStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.mcuc.stark.pepper.BankStatus} value
 * @return {!proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest} returns this
 */
proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusReply}
 */
proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusReply;
  return proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusReply}
 */
proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.UpdateSystemBankAccountStatusReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    merchantId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bankName: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest;
  return proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantId(value);
      break;
    case 2:
      var value = /** @type {!proto.mcuc.stark.pepper.BankName} */ (reader.readEnum());
      msg.setBankName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMerchantId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getBankName();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int64 merchant_id = 1;
 * @return {number}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest.prototype.getMerchantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest} returns this
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest.prototype.setMerchantId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional BankName bank_name = 2;
 * @return {!proto.mcuc.stark.pepper.BankName}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest.prototype.getBankName = function() {
  return /** @type {!proto.mcuc.stark.pepper.BankName} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.mcuc.stark.pepper.BankName} value
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest} returns this
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest.prototype.setBankName = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.mcuc.stark.pepper.SystemBank.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply;
  return proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.pepper.SystemBank;
      reader.readMessage(value,proto.mcuc.stark.pepper.SystemBank.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.pepper.SystemBank.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SystemBank records = 1;
 * @return {!Array<!proto.mcuc.stark.pepper.SystemBank>}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.pepper.SystemBank>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.pepper.SystemBank, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.pepper.SystemBank>} value
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply} returns this
*/
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply.prototype.setRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.pepper.SystemBank=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.pepper.SystemBank}
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.pepper.SystemBank, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply} returns this
 */
proto.mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply.prototype.clearRecordsList = function() {
  return this.setRecordsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.SystemBank.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.SystemBank.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.SystemBank} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.SystemBank.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bankName: jspb.Message.getFieldWithDefault(msg, 4, 0),
    status: jspb.Message.getFieldWithDefault(msg, 5, 0),
    merchantId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    accountNumber: jspb.Message.getFieldWithDefault(msg, 7, ""),
    accountName: jspb.Message.getFieldWithDefault(msg, 8, ""),
    branch: jspb.Message.getFieldWithDefault(msg, 9, ""),
    balance: jspb.Message.getFieldWithDefault(msg, 10, 0),
    dailyBalanceLimit: jspb.Message.getFieldWithDefault(msg, 11, 0),
    dailyUsedAmount: jspb.Message.getFieldWithDefault(msg, 12, 0),
    dailyBalance: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.SystemBank}
 */
proto.mcuc.stark.pepper.SystemBank.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.SystemBank;
  return proto.mcuc.stark.pepper.SystemBank.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.SystemBank} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.SystemBank}
 */
proto.mcuc.stark.pepper.SystemBank.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {!proto.mcuc.stark.pepper.BankName} */ (reader.readEnum());
      msg.setBankName(value);
      break;
    case 5:
      var value = /** @type {!proto.mcuc.stark.pepper.BankStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountNumber(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountName(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setBranch(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBalance(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDailyBalanceLimit(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDailyUsedAmount(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDailyBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.SystemBank.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.SystemBank.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.SystemBank} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.SystemBank.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getBankName();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getMerchantId();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getAccountNumber();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAccountName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getBranch();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getBalance();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getDailyBalanceLimit();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getDailyUsedAmount();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getDailyBalance();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.mcuc.stark.pepper.SystemBank.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.SystemBank} returns this
 */
proto.mcuc.stark.pepper.SystemBank.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional BankName bank_name = 4;
 * @return {!proto.mcuc.stark.pepper.BankName}
 */
proto.mcuc.stark.pepper.SystemBank.prototype.getBankName = function() {
  return /** @type {!proto.mcuc.stark.pepper.BankName} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.mcuc.stark.pepper.BankName} value
 * @return {!proto.mcuc.stark.pepper.SystemBank} returns this
 */
proto.mcuc.stark.pepper.SystemBank.prototype.setBankName = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional BankStatus status = 5;
 * @return {!proto.mcuc.stark.pepper.BankStatus}
 */
proto.mcuc.stark.pepper.SystemBank.prototype.getStatus = function() {
  return /** @type {!proto.mcuc.stark.pepper.BankStatus} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.mcuc.stark.pepper.BankStatus} value
 * @return {!proto.mcuc.stark.pepper.SystemBank} returns this
 */
proto.mcuc.stark.pepper.SystemBank.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional int64 merchant_id = 6;
 * @return {number}
 */
proto.mcuc.stark.pepper.SystemBank.prototype.getMerchantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.SystemBank} returns this
 */
proto.mcuc.stark.pepper.SystemBank.prototype.setMerchantId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string account_number = 7;
 * @return {string}
 */
proto.mcuc.stark.pepper.SystemBank.prototype.getAccountNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.SystemBank} returns this
 */
proto.mcuc.stark.pepper.SystemBank.prototype.setAccountNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string account_name = 8;
 * @return {string}
 */
proto.mcuc.stark.pepper.SystemBank.prototype.getAccountName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.SystemBank} returns this
 */
proto.mcuc.stark.pepper.SystemBank.prototype.setAccountName = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string branch = 9;
 * @return {string}
 */
proto.mcuc.stark.pepper.SystemBank.prototype.getBranch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.SystemBank} returns this
 */
proto.mcuc.stark.pepper.SystemBank.prototype.setBranch = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional uint64 balance = 10;
 * @return {number}
 */
proto.mcuc.stark.pepper.SystemBank.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.SystemBank} returns this
 */
proto.mcuc.stark.pepper.SystemBank.prototype.setBalance = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 daily_balance_limit = 11;
 * @return {number}
 */
proto.mcuc.stark.pepper.SystemBank.prototype.getDailyBalanceLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.SystemBank} returns this
 */
proto.mcuc.stark.pepper.SystemBank.prototype.setDailyBalanceLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 daily_used_amount = 12;
 * @return {number}
 */
proto.mcuc.stark.pepper.SystemBank.prototype.getDailyUsedAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.SystemBank} returns this
 */
proto.mcuc.stark.pepper.SystemBank.prototype.setDailyUsedAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint64 daily_balance = 13;
 * @return {number}
 */
proto.mcuc.stark.pepper.SystemBank.prototype.getDailyBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.SystemBank} returns this
 */
proto.mcuc.stark.pepper.SystemBank.prototype.setDailyBalance = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.ConductBankPayment.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.ConductBankPayment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.ConductBankPayment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ConductBankPayment.toObject = function(includeInstance, msg) {
  var f, obj = {
    bankName: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accountNumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    accountName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fee: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.ConductBankPayment}
 */
proto.mcuc.stark.pepper.ConductBankPayment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.ConductBankPayment;
  return proto.mcuc.stark.pepper.ConductBankPayment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.ConductBankPayment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.ConductBankPayment}
 */
proto.mcuc.stark.pepper.ConductBankPayment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mcuc.stark.pepper.BankName} */ (reader.readEnum());
      msg.setBankName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.ConductBankPayment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.ConductBankPayment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.ConductBankPayment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.ConductBankPayment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBankName();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAccountNumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAccountName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional BankName bank_name = 1;
 * @return {!proto.mcuc.stark.pepper.BankName}
 */
proto.mcuc.stark.pepper.ConductBankPayment.prototype.getBankName = function() {
  return /** @type {!proto.mcuc.stark.pepper.BankName} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mcuc.stark.pepper.BankName} value
 * @return {!proto.mcuc.stark.pepper.ConductBankPayment} returns this
 */
proto.mcuc.stark.pepper.ConductBankPayment.prototype.setBankName = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string account_number = 2;
 * @return {string}
 */
proto.mcuc.stark.pepper.ConductBankPayment.prototype.getAccountNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.ConductBankPayment} returns this
 */
proto.mcuc.stark.pepper.ConductBankPayment.prototype.setAccountNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string account_name = 3;
 * @return {string}
 */
proto.mcuc.stark.pepper.ConductBankPayment.prototype.getAccountName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.ConductBankPayment} returns this
 */
proto.mcuc.stark.pepper.ConductBankPayment.prototype.setAccountName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 amount = 4;
 * @return {number}
 */
proto.mcuc.stark.pepper.ConductBankPayment.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.ConductBankPayment} returns this
 */
proto.mcuc.stark.pepper.ConductBankPayment.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 fee = 5;
 * @return {number}
 */
proto.mcuc.stark.pepper.ConductBankPayment.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.ConductBankPayment} returns this
 */
proto.mcuc.stark.pepper.ConductBankPayment.prototype.setFee = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.pepper.BankingPaymentDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.pepper.BankingPaymentDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    merchantUserBankName: jspb.Message.getFieldWithDefault(msg, 2, 0),
    merchantUserAccountNumber: jspb.Message.getFieldWithDefault(msg, 3, ""),
    merchantUserAccountName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    systemBankName: jspb.Message.getFieldWithDefault(msg, 5, 0),
    systemAccountNumber: jspb.Message.getFieldWithDefault(msg, 6, ""),
    systemAccountName: jspb.Message.getFieldWithDefault(msg, 7, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 8, 0),
    imageUrl: jspb.Message.getFieldWithDefault(msg, 9, ""),
    txId: jspb.Message.getFieldWithDefault(msg, 10, ""),
    paymentCode: jspb.Message.getFieldWithDefault(msg, 11, ""),
    fee: jspb.Message.getFieldWithDefault(msg, 12, 0),
    merchantUserId: jspb.Message.getFieldWithDefault(msg, 13, 0),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.pepper.BankingPaymentDetail}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.pepper.BankingPaymentDetail;
  return proto.mcuc.stark.pepper.BankingPaymentDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.pepper.BankingPaymentDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.pepper.BankingPaymentDetail}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.mcuc.stark.pepper.BankName} */ (reader.readEnum());
      msg.setMerchantUserBankName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMerchantUserAccountNumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMerchantUserAccountName(value);
      break;
    case 5:
      var value = /** @type {!proto.mcuc.stark.pepper.BankName} */ (reader.readEnum());
      msg.setSystemBankName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemAccountNumber(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemAccountName(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageUrl(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxId(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaymentCode(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFee(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantUserId(value);
      break;
    case 20:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 30:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.pepper.BankingPaymentDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.pepper.BankingPaymentDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMerchantUserBankName();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMerchantUserAccountNumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMerchantUserAccountName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSystemBankName();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getSystemAccountNumber();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSystemAccountName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getImageUrl();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTxId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPaymentCode();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getMerchantUserId();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.BankingPaymentDetail} returns this
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional BankName merchant_user_bank_name = 2;
 * @return {!proto.mcuc.stark.pepper.BankName}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.getMerchantUserBankName = function() {
  return /** @type {!proto.mcuc.stark.pepper.BankName} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.mcuc.stark.pepper.BankName} value
 * @return {!proto.mcuc.stark.pepper.BankingPaymentDetail} returns this
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.setMerchantUserBankName = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string merchant_user_account_number = 3;
 * @return {string}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.getMerchantUserAccountNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.BankingPaymentDetail} returns this
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.setMerchantUserAccountNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string merchant_user_account_name = 4;
 * @return {string}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.getMerchantUserAccountName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.BankingPaymentDetail} returns this
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.setMerchantUserAccountName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional BankName system_bank_name = 5;
 * @return {!proto.mcuc.stark.pepper.BankName}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.getSystemBankName = function() {
  return /** @type {!proto.mcuc.stark.pepper.BankName} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.mcuc.stark.pepper.BankName} value
 * @return {!proto.mcuc.stark.pepper.BankingPaymentDetail} returns this
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.setSystemBankName = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string system_account_number = 6;
 * @return {string}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.getSystemAccountNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.BankingPaymentDetail} returns this
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.setSystemAccountNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string system_account_name = 7;
 * @return {string}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.getSystemAccountName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.BankingPaymentDetail} returns this
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.setSystemAccountName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint64 amount = 8;
 * @return {number}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.BankingPaymentDetail} returns this
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string image_url = 9;
 * @return {string}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.getImageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.BankingPaymentDetail} returns this
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.setImageUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string tx_id = 10;
 * @return {string}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.getTxId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.BankingPaymentDetail} returns this
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.setTxId = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string payment_code = 11;
 * @return {string}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.getPaymentCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.pepper.BankingPaymentDetail} returns this
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.setPaymentCode = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional uint64 fee = 12;
 * @return {number}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.BankingPaymentDetail} returns this
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.setFee = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int64 merchant_user_id = 13;
 * @return {number}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.getMerchantUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.pepper.BankingPaymentDetail} returns this
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.setMerchantUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 20;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 20));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.pepper.BankingPaymentDetail} returns this
*/
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.pepper.BankingPaymentDetail} returns this
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 30;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 30));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.pepper.BankingPaymentDetail} returns this
*/
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 30, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.pepper.BankingPaymentDetail} returns this
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.pepper.BankingPaymentDetail.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * @enum {number}
 */
proto.mcuc.stark.pepper.BankName = {
  BANK_UNSPECIFIED: 0,
  VIETCOMBANK: 1,
  SACOMBANK: 2,
  ACB: 3,
  VIETINBANK: 4,
  BIDV: 5
};

/**
 * @enum {number}
 */
proto.mcuc.stark.pepper.BankStatus = {
  BANK_STATUS_UNSPECIFIED: 0,
  BANK_STATUS_ACTIVE: 1,
  BANK_STATUS_IN_ACTIVE: 2
};

goog.object.extend(exports, proto.mcuc.stark.pepper);
