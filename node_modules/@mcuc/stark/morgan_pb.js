// source: stark/morgan.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var validate_validate_pb = require('@greyhole/validate/validate_pb.js');
goog.object.extend(proto, validate_validate_pb);
var groot_api_groot_pb = require('@mcuc/groot/groot_pb.js');
goog.object.extend(proto, groot_api_groot_pb);
goog.exportSymbol('proto.mcuc.stark.morgan.ApproveTelcoTopUpReply', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.ApproveTelcoWithdrawReply', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.CancelTelcoWithdrawReply', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.CompleteTelcoTopUpReply', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.CreateTelcoTopUpReply', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.CreateTelcoTopUpRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.CreateTelcoWithdrawReply', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.GetSettingsReply', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.GetSettingsRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.Provider', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.RejectTelcoTopUpReply', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.RejectTelcoTopUpRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.RejectTelcoWithdrawReply', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.TelcoPaymentDetail', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingReply', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingReply', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingReply', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingReply', null, global);
goog.exportSymbol('proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest.displayName = 'proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.CreateTelcoWithdrawReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.CreateTelcoWithdrawReply.displayName = 'proto.mcuc.stark.morgan.CreateTelcoWithdrawReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.CreateTelcoTopUpRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.CreateTelcoTopUpRequest.displayName = 'proto.mcuc.stark.morgan.CreateTelcoTopUpRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.CreateTelcoTopUpReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.CreateTelcoTopUpReply.displayName = 'proto.mcuc.stark.morgan.CreateTelcoTopUpReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest.displayName = 'proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.CancelTelcoWithdrawReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.CancelTelcoWithdrawReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.CancelTelcoWithdrawReply.displayName = 'proto.mcuc.stark.morgan.CancelTelcoWithdrawReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest.displayName = 'proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.CompleteTelcoTopUpReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.CompleteTelcoTopUpReply.displayName = 'proto.mcuc.stark.morgan.CompleteTelcoTopUpReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest.displayName = 'proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.ApproveTelcoTopUpReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.ApproveTelcoTopUpReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.ApproveTelcoTopUpReply.displayName = 'proto.mcuc.stark.morgan.ApproveTelcoTopUpReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest.displayName = 'proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.ApproveTelcoWithdrawReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.ApproveTelcoWithdrawReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.ApproveTelcoWithdrawReply.displayName = 'proto.mcuc.stark.morgan.ApproveTelcoWithdrawReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.RejectTelcoTopUpRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.RejectTelcoTopUpRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.RejectTelcoTopUpRequest.displayName = 'proto.mcuc.stark.morgan.RejectTelcoTopUpRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.RejectTelcoTopUpReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.RejectTelcoTopUpReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.RejectTelcoTopUpReply.displayName = 'proto.mcuc.stark.morgan.RejectTelcoTopUpReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest.displayName = 'proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.RejectTelcoWithdrawReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.RejectTelcoWithdrawReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.RejectTelcoWithdrawReply.displayName = 'proto.mcuc.stark.morgan.RejectTelcoWithdrawReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.GetSettingsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.GetSettingsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.GetSettingsRequest.displayName = 'proto.mcuc.stark.morgan.GetSettingsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.GetSettingsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.morgan.GetSettingsReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.morgan.GetSettingsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.GetSettingsReply.displayName = 'proto.mcuc.stark.morgan.GetSettingsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest.displayName = 'proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingReply.displayName = 'proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest.displayName = 'proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingReply.displayName = 'proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.Provider = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.Provider, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.Provider.displayName = 'proto.mcuc.stark.morgan.Provider';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest.displayName = 'proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingReply.displayName = 'proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest.displayName = 'proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingReply.displayName = 'proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.morgan.TelcoPaymentDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.morgan.TelcoPaymentDetail.displayName = 'proto.mcuc.stark.morgan.TelcoPaymentDetail';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    telcoName: jspb.Message.getFieldWithDefault(msg, 2, 0),
    merchantUserId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest}
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest;
  return proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest}
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {!proto.mcuc.groot.TelcoName} */ (reader.readEnum());
      msg.setTelcoName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTelcoName();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMerchantUserId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional uint64 amount = 1;
 * @return {number}
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest} returns this
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional mcuc.groot.TelcoName telco_name = 2;
 * @return {!proto.mcuc.groot.TelcoName}
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest.prototype.getTelcoName = function() {
  return /** @type {!proto.mcuc.groot.TelcoName} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.mcuc.groot.TelcoName} value
 * @return {!proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest} returns this
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest.prototype.setTelcoName = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 merchant_user_id = 3;
 * @return {number}
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest.prototype.getMerchantUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest} returns this
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawRequest.prototype.setMerchantUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.CreateTelcoWithdrawReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.CreateTelcoWithdrawReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.CreateTelcoWithdrawReply}
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.CreateTelcoWithdrawReply;
  return proto.mcuc.stark.morgan.CreateTelcoWithdrawReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.CreateTelcoWithdrawReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.CreateTelcoWithdrawReply}
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.CreateTelcoWithdrawReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.CreateTelcoWithdrawReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawReply.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.morgan.CreateTelcoWithdrawReply} returns this
 */
proto.mcuc.stark.morgan.CreateTelcoWithdrawReply.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.CreateTelcoTopUpRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.CreateTelcoTopUpRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    card: (f = msg.getCard()) && groot_api_groot_pb.Card.toObject(includeInstance, f),
    txId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    merchantUserId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.CreateTelcoTopUpRequest}
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.CreateTelcoTopUpRequest;
  return proto.mcuc.stark.morgan.CreateTelcoTopUpRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.CreateTelcoTopUpRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.CreateTelcoTopUpRequest}
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new groot_api_groot_pb.Card;
      reader.readMessage(value,groot_api_groot_pb.Card.deserializeBinaryFromReader);
      msg.setCard(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.CreateTelcoTopUpRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.CreateTelcoTopUpRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCard();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      groot_api_groot_pb.Card.serializeBinaryToWriter
    );
  }
  f = message.getTxId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMerchantUserId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional mcuc.groot.Card card = 1;
 * @return {?proto.mcuc.groot.Card}
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpRequest.prototype.getCard = function() {
  return /** @type{?proto.mcuc.groot.Card} */ (
    jspb.Message.getWrapperField(this, groot_api_groot_pb.Card, 1));
};


/**
 * @param {?proto.mcuc.groot.Card|undefined} value
 * @return {!proto.mcuc.stark.morgan.CreateTelcoTopUpRequest} returns this
*/
proto.mcuc.stark.morgan.CreateTelcoTopUpRequest.prototype.setCard = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.morgan.CreateTelcoTopUpRequest} returns this
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpRequest.prototype.clearCard = function() {
  return this.setCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpRequest.prototype.hasCard = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string tx_id = 2;
 * @return {string}
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpRequest.prototype.getTxId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.morgan.CreateTelcoTopUpRequest} returns this
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpRequest.prototype.setTxId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 merchant_user_id = 3;
 * @return {number}
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpRequest.prototype.getMerchantUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.morgan.CreateTelcoTopUpRequest} returns this
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpRequest.prototype.setMerchantUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.CreateTelcoTopUpReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.CreateTelcoTopUpReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.CreateTelcoTopUpReply}
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.CreateTelcoTopUpReply;
  return proto.mcuc.stark.morgan.CreateTelcoTopUpReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.CreateTelcoTopUpReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.CreateTelcoTopUpReply}
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.CreateTelcoTopUpReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.CreateTelcoTopUpReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpReply.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.morgan.CreateTelcoTopUpReply} returns this
 */
proto.mcuc.stark.morgan.CreateTelcoTopUpReply.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest}
 */
proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest;
  return proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest}
 */
proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest} returns this
 */
proto.mcuc.stark.morgan.CancelTelcoWithdrawRequest.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.CancelTelcoWithdrawReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.CancelTelcoWithdrawReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.CancelTelcoWithdrawReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.CancelTelcoWithdrawReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.CancelTelcoWithdrawReply}
 */
proto.mcuc.stark.morgan.CancelTelcoWithdrawReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.CancelTelcoWithdrawReply;
  return proto.mcuc.stark.morgan.CancelTelcoWithdrawReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.CancelTelcoWithdrawReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.CancelTelcoWithdrawReply}
 */
proto.mcuc.stark.morgan.CancelTelcoWithdrawReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.CancelTelcoWithdrawReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.CancelTelcoWithdrawReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.CancelTelcoWithdrawReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.CancelTelcoWithdrawReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    card: (f = msg.getCard()) && groot_api_groot_pb.Card.toObject(includeInstance, f),
    paymentId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chargedAmount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    provider: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest}
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest;
  return proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest}
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new groot_api_groot_pb.Card;
      reader.readMessage(value,groot_api_groot_pb.Card.deserializeBinaryFromReader);
      msg.setCard(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChargedAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCard();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      groot_api_groot_pb.Card.serializeBinaryToWriter
    );
  }
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getChargedAmount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional mcuc.groot.Card card = 1;
 * @return {?proto.mcuc.groot.Card}
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest.prototype.getCard = function() {
  return /** @type{?proto.mcuc.groot.Card} */ (
    jspb.Message.getWrapperField(this, groot_api_groot_pb.Card, 1));
};


/**
 * @param {?proto.mcuc.groot.Card|undefined} value
 * @return {!proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest} returns this
*/
proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest.prototype.setCard = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest} returns this
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest.prototype.clearCard = function() {
  return this.setCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest.prototype.hasCard = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 payment_id = 2;
 * @return {number}
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest} returns this
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 charged_amount = 3;
 * @return {number}
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest.prototype.getChargedAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest} returns this
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest.prototype.setChargedAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string provider = 4;
 * @return {string}
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest} returns this
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpRequest.prototype.setProvider = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.CompleteTelcoTopUpReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.CompleteTelcoTopUpReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.CompleteTelcoTopUpReply}
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.CompleteTelcoTopUpReply;
  return proto.mcuc.stark.morgan.CompleteTelcoTopUpReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.CompleteTelcoTopUpReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.CompleteTelcoTopUpReply}
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.CompleteTelcoTopUpReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.CompleteTelcoTopUpReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.CompleteTelcoTopUpReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    note: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest}
 */
proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest;
  return proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest}
 */
proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest} returns this
 */
proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string note = 2;
 * @return {string}
 */
proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest} returns this
 */
proto.mcuc.stark.morgan.ApproveTelcoTopUpRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.ApproveTelcoTopUpReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.ApproveTelcoTopUpReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.ApproveTelcoTopUpReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.ApproveTelcoTopUpReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.ApproveTelcoTopUpReply}
 */
proto.mcuc.stark.morgan.ApproveTelcoTopUpReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.ApproveTelcoTopUpReply;
  return proto.mcuc.stark.morgan.ApproveTelcoTopUpReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.ApproveTelcoTopUpReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.ApproveTelcoTopUpReply}
 */
proto.mcuc.stark.morgan.ApproveTelcoTopUpReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.ApproveTelcoTopUpReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.ApproveTelcoTopUpReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.ApproveTelcoTopUpReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.ApproveTelcoTopUpReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    note: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest}
 */
proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest;
  return proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest}
 */
proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest} returns this
 */
proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string note = 2;
 * @return {string}
 */
proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest} returns this
 */
proto.mcuc.stark.morgan.ApproveTelcoWithdrawRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.ApproveTelcoWithdrawReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.ApproveTelcoWithdrawReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.ApproveTelcoWithdrawReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.ApproveTelcoWithdrawReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.ApproveTelcoWithdrawReply}
 */
proto.mcuc.stark.morgan.ApproveTelcoWithdrawReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.ApproveTelcoWithdrawReply;
  return proto.mcuc.stark.morgan.ApproveTelcoWithdrawReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.ApproveTelcoWithdrawReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.ApproveTelcoWithdrawReply}
 */
proto.mcuc.stark.morgan.ApproveTelcoWithdrawReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.ApproveTelcoWithdrawReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.ApproveTelcoWithdrawReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.ApproveTelcoWithdrawReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.ApproveTelcoWithdrawReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.RejectTelcoTopUpRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.RejectTelcoTopUpRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.RejectTelcoTopUpRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.RejectTelcoTopUpRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    note: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isMerchantCall: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.RejectTelcoTopUpRequest}
 */
proto.mcuc.stark.morgan.RejectTelcoTopUpRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.RejectTelcoTopUpRequest;
  return proto.mcuc.stark.morgan.RejectTelcoTopUpRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.RejectTelcoTopUpRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.RejectTelcoTopUpRequest}
 */
proto.mcuc.stark.morgan.RejectTelcoTopUpRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMerchantCall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.RejectTelcoTopUpRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.RejectTelcoTopUpRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.RejectTelcoTopUpRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.RejectTelcoTopUpRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsMerchantCall();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.morgan.RejectTelcoTopUpRequest.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.morgan.RejectTelcoTopUpRequest} returns this
 */
proto.mcuc.stark.morgan.RejectTelcoTopUpRequest.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string note = 2;
 * @return {string}
 */
proto.mcuc.stark.morgan.RejectTelcoTopUpRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.morgan.RejectTelcoTopUpRequest} returns this
 */
proto.mcuc.stark.morgan.RejectTelcoTopUpRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool is_merchant_call = 3;
 * @return {boolean}
 */
proto.mcuc.stark.morgan.RejectTelcoTopUpRequest.prototype.getIsMerchantCall = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mcuc.stark.morgan.RejectTelcoTopUpRequest} returns this
 */
proto.mcuc.stark.morgan.RejectTelcoTopUpRequest.prototype.setIsMerchantCall = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.RejectTelcoTopUpReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.RejectTelcoTopUpReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.RejectTelcoTopUpReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.RejectTelcoTopUpReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.RejectTelcoTopUpReply}
 */
proto.mcuc.stark.morgan.RejectTelcoTopUpReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.RejectTelcoTopUpReply;
  return proto.mcuc.stark.morgan.RejectTelcoTopUpReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.RejectTelcoTopUpReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.RejectTelcoTopUpReply}
 */
proto.mcuc.stark.morgan.RejectTelcoTopUpReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.RejectTelcoTopUpReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.RejectTelcoTopUpReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.RejectTelcoTopUpReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.RejectTelcoTopUpReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    note: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isMerchantCall: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest}
 */
proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest;
  return proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest}
 */
proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMerchantCall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsMerchantCall();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest} returns this
 */
proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string note = 2;
 * @return {string}
 */
proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest} returns this
 */
proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool is_merchant_call = 3;
 * @return {boolean}
 */
proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest.prototype.getIsMerchantCall = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest} returns this
 */
proto.mcuc.stark.morgan.RejectTelcoWithdrawRequest.prototype.setIsMerchantCall = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.RejectTelcoWithdrawReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.RejectTelcoWithdrawReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.RejectTelcoWithdrawReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.RejectTelcoWithdrawReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.RejectTelcoWithdrawReply}
 */
proto.mcuc.stark.morgan.RejectTelcoWithdrawReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.RejectTelcoWithdrawReply;
  return proto.mcuc.stark.morgan.RejectTelcoWithdrawReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.RejectTelcoWithdrawReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.RejectTelcoWithdrawReply}
 */
proto.mcuc.stark.morgan.RejectTelcoWithdrawReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.RejectTelcoWithdrawReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.RejectTelcoWithdrawReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.RejectTelcoWithdrawReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.RejectTelcoWithdrawReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.GetSettingsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.GetSettingsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.GetSettingsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.GetSettingsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.GetSettingsRequest}
 */
proto.mcuc.stark.morgan.GetSettingsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.GetSettingsRequest;
  return proto.mcuc.stark.morgan.GetSettingsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.GetSettingsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.GetSettingsRequest}
 */
proto.mcuc.stark.morgan.GetSettingsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.GetSettingsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.GetSettingsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.GetSettingsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.GetSettingsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.morgan.GetSettingsReply.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.GetSettingsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.GetSettingsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.GetSettingsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.GetSettingsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    topUpAutoApproval: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    enableThirdParty: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    chargeCardProvidersList: jspb.Message.toObjectList(msg.getChargeCardProvidersList(),
    proto.mcuc.stark.morgan.Provider.toObject, includeInstance),
    getCardProvidersList: jspb.Message.toObjectList(msg.getGetCardProvidersList(),
    proto.mcuc.stark.morgan.Provider.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.GetSettingsReply}
 */
proto.mcuc.stark.morgan.GetSettingsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.GetSettingsReply;
  return proto.mcuc.stark.morgan.GetSettingsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.GetSettingsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.GetSettingsReply}
 */
proto.mcuc.stark.morgan.GetSettingsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTopUpAutoApproval(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableThirdParty(value);
      break;
    case 3:
      var value = new proto.mcuc.stark.morgan.Provider;
      reader.readMessage(value,proto.mcuc.stark.morgan.Provider.deserializeBinaryFromReader);
      msg.addChargeCardProviders(value);
      break;
    case 4:
      var value = new proto.mcuc.stark.morgan.Provider;
      reader.readMessage(value,proto.mcuc.stark.morgan.Provider.deserializeBinaryFromReader);
      msg.addGetCardProviders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.GetSettingsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.GetSettingsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.GetSettingsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.GetSettingsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopUpAutoApproval();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getEnableThirdParty();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getChargeCardProvidersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.mcuc.stark.morgan.Provider.serializeBinaryToWriter
    );
  }
  f = message.getGetCardProvidersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.mcuc.stark.morgan.Provider.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool top_up_auto_approval = 1;
 * @return {boolean}
 */
proto.mcuc.stark.morgan.GetSettingsReply.prototype.getTopUpAutoApproval = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mcuc.stark.morgan.GetSettingsReply} returns this
 */
proto.mcuc.stark.morgan.GetSettingsReply.prototype.setTopUpAutoApproval = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool enable_third_party = 2;
 * @return {boolean}
 */
proto.mcuc.stark.morgan.GetSettingsReply.prototype.getEnableThirdParty = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mcuc.stark.morgan.GetSettingsReply} returns this
 */
proto.mcuc.stark.morgan.GetSettingsReply.prototype.setEnableThirdParty = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated Provider charge_card_providers = 3;
 * @return {!Array<!proto.mcuc.stark.morgan.Provider>}
 */
proto.mcuc.stark.morgan.GetSettingsReply.prototype.getChargeCardProvidersList = function() {
  return /** @type{!Array<!proto.mcuc.stark.morgan.Provider>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.morgan.Provider, 3));
};


/**
 * @param {!Array<!proto.mcuc.stark.morgan.Provider>} value
 * @return {!proto.mcuc.stark.morgan.GetSettingsReply} returns this
*/
proto.mcuc.stark.morgan.GetSettingsReply.prototype.setChargeCardProvidersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.mcuc.stark.morgan.Provider=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.morgan.Provider}
 */
proto.mcuc.stark.morgan.GetSettingsReply.prototype.addChargeCardProviders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.mcuc.stark.morgan.Provider, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.morgan.GetSettingsReply} returns this
 */
proto.mcuc.stark.morgan.GetSettingsReply.prototype.clearChargeCardProvidersList = function() {
  return this.setChargeCardProvidersList([]);
};


/**
 * repeated Provider get_card_providers = 4;
 * @return {!Array<!proto.mcuc.stark.morgan.Provider>}
 */
proto.mcuc.stark.morgan.GetSettingsReply.prototype.getGetCardProvidersList = function() {
  return /** @type{!Array<!proto.mcuc.stark.morgan.Provider>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.morgan.Provider, 4));
};


/**
 * @param {!Array<!proto.mcuc.stark.morgan.Provider>} value
 * @return {!proto.mcuc.stark.morgan.GetSettingsReply} returns this
*/
proto.mcuc.stark.morgan.GetSettingsReply.prototype.setGetCardProvidersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.mcuc.stark.morgan.Provider=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.morgan.Provider}
 */
proto.mcuc.stark.morgan.GetSettingsReply.prototype.addGetCardProviders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.mcuc.stark.morgan.Provider, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.morgan.GetSettingsReply} returns this
 */
proto.mcuc.stark.morgan.GetSettingsReply.prototype.clearGetCardProvidersList = function() {
  return this.setGetCardProvidersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    topUpAutoApproval: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest}
 */
proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest;
  return proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest}
 */
proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTopUpAutoApproval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopUpAutoApproval();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool top_up_auto_approval = 1;
 * @return {boolean}
 */
proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest.prototype.getTopUpAutoApproval = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest} returns this
 */
proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingRequest.prototype.setTopUpAutoApproval = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingReply}
 */
proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingReply;
  return proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingReply}
 */
proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.UpdateTopUpAutoApprovalSettingReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    enableThirdParty: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest}
 */
proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest;
  return proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest}
 */
proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableThirdParty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnableThirdParty();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enable_third_party = 1;
 * @return {boolean}
 */
proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest.prototype.getEnableThirdParty = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest} returns this
 */
proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingRequest.prototype.setEnableThirdParty = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingReply}
 */
proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingReply;
  return proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingReply}
 */
proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.UpdateUsingThirdPartySettingReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.Provider.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.Provider.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.Provider} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.Provider.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    enable: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    priority: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.Provider}
 */
proto.mcuc.stark.morgan.Provider.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.Provider;
  return proto.mcuc.stark.morgan.Provider.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.Provider} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.Provider}
 */
proto.mcuc.stark.morgan.Provider.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnable(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPriority(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.Provider.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.Provider.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.Provider} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.Provider.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEnable();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getPriority();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.mcuc.stark.morgan.Provider.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.morgan.Provider} returns this
 */
proto.mcuc.stark.morgan.Provider.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool enable = 2;
 * @return {boolean}
 */
proto.mcuc.stark.morgan.Provider.prototype.getEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mcuc.stark.morgan.Provider} returns this
 */
proto.mcuc.stark.morgan.Provider.prototype.setEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int64 priority = 3;
 * @return {number}
 */
proto.mcuc.stark.morgan.Provider.prototype.getPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.morgan.Provider} returns this
 */
proto.mcuc.stark.morgan.Provider.prototype.setPriority = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    providersList: jspb.Message.toObjectList(msg.getProvidersList(),
    proto.mcuc.stark.morgan.Provider.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest}
 */
proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest;
  return proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest}
 */
proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.morgan.Provider;
      reader.readMessage(value,proto.mcuc.stark.morgan.Provider.deserializeBinaryFromReader);
      msg.addProviders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvidersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.morgan.Provider.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Provider providers = 1;
 * @return {!Array<!proto.mcuc.stark.morgan.Provider>}
 */
proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest.prototype.getProvidersList = function() {
  return /** @type{!Array<!proto.mcuc.stark.morgan.Provider>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.morgan.Provider, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.morgan.Provider>} value
 * @return {!proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest} returns this
*/
proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest.prototype.setProvidersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.morgan.Provider=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.morgan.Provider}
 */
proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest.prototype.addProviders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.morgan.Provider, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest} returns this
 */
proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingRequest.prototype.clearProvidersList = function() {
  return this.setProvidersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingReply}
 */
proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingReply;
  return proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingReply}
 */
proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.UpdateChargeCardProvidersSettingReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    providersList: jspb.Message.toObjectList(msg.getProvidersList(),
    proto.mcuc.stark.morgan.Provider.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest}
 */
proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest;
  return proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest}
 */
proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.morgan.Provider;
      reader.readMessage(value,proto.mcuc.stark.morgan.Provider.deserializeBinaryFromReader);
      msg.addProviders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvidersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.morgan.Provider.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Provider providers = 1;
 * @return {!Array<!proto.mcuc.stark.morgan.Provider>}
 */
proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest.prototype.getProvidersList = function() {
  return /** @type{!Array<!proto.mcuc.stark.morgan.Provider>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.morgan.Provider, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.morgan.Provider>} value
 * @return {!proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest} returns this
*/
proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest.prototype.setProvidersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.morgan.Provider=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.morgan.Provider}
 */
proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest.prototype.addProviders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.morgan.Provider, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest} returns this
 */
proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingRequest.prototype.clearProvidersList = function() {
  return this.setProvidersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingReply}
 */
proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingReply;
  return proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingReply}
 */
proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.UpdateGetCardProvidersSettingReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.morgan.TelcoPaymentDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.morgan.TelcoPaymentDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serialNumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    cardId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    chargedAmount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    telcoName: jspb.Message.getFieldWithDefault(msg, 6, 0),
    provider: jspb.Message.getFieldWithDefault(msg, 7, ""),
    getCardAt: (f = msg.getGetCardAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.morgan.TelcoPaymentDetail}
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.morgan.TelcoPaymentDetail;
  return proto.mcuc.stark.morgan.TelcoPaymentDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.morgan.TelcoPaymentDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.morgan.TelcoPaymentDetail}
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerialNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChargedAmount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 6:
      var value = /** @type {!proto.mcuc.groot.TelcoName} */ (reader.readEnum());
      msg.setTelcoName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setGetCardAt(value);
      break;
    case 20:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 30:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.morgan.TelcoPaymentDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.morgan.TelcoPaymentDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSerialNumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCardId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getChargedAmount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTelcoName();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getGetCardAt();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.morgan.TelcoPaymentDetail} returns this
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string serial_number = 2;
 * @return {string}
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.getSerialNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.morgan.TelcoPaymentDetail} returns this
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.setSerialNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string card_id = 3;
 * @return {string}
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.getCardId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.morgan.TelcoPaymentDetail} returns this
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.setCardId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 charged_amount = 4;
 * @return {number}
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.getChargedAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.morgan.TelcoPaymentDetail} returns this
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.setChargedAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 amount = 5;
 * @return {number}
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.morgan.TelcoPaymentDetail} returns this
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional mcuc.groot.TelcoName telco_name = 6;
 * @return {!proto.mcuc.groot.TelcoName}
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.getTelcoName = function() {
  return /** @type {!proto.mcuc.groot.TelcoName} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.mcuc.groot.TelcoName} value
 * @return {!proto.mcuc.stark.morgan.TelcoPaymentDetail} returns this
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.setTelcoName = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional string provider = 7;
 * @return {string}
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.morgan.TelcoPaymentDetail} returns this
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.setProvider = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional google.protobuf.Timestamp get_card_at = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.getGetCardAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.morgan.TelcoPaymentDetail} returns this
*/
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.setGetCardAt = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.morgan.TelcoPaymentDetail} returns this
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.clearGetCardAt = function() {
  return this.setGetCardAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.hasGetCardAt = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional google.protobuf.Timestamp created_at = 20;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 20));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.morgan.TelcoPaymentDetail} returns this
*/
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.morgan.TelcoPaymentDetail} returns this
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 30;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 30));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.morgan.TelcoPaymentDetail} returns this
*/
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 30, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.morgan.TelcoPaymentDetail} returns this
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.morgan.TelcoPaymentDetail.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 30) != null;
};


goog.object.extend(exports, proto.mcuc.stark.morgan);
