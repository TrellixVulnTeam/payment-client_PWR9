/**
 * @fileoverview gRPC-Web generated client stub for mcuc.stark.morgan
 * @enhanceable
 * @public
 */

// GENERATED CODE -- DO NOT EDIT!


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as stark_api_morgan_pb from './morgan_pb';


export class MorganClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname;
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodInfoCreateTelcoWithdraw = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_morgan_pb.CreateTelcoWithdrawReply,
    (request: stark_api_morgan_pb.CreateTelcoWithdrawRequest) => {
      return request.serializeBinary();
    },
    stark_api_morgan_pb.CreateTelcoWithdrawReply.deserializeBinary
  );

  createTelcoWithdraw(
    request: stark_api_morgan_pb.CreateTelcoWithdrawRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_morgan_pb.CreateTelcoWithdrawReply>;

  createTelcoWithdraw(
    request: stark_api_morgan_pb.CreateTelcoWithdrawRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.CreateTelcoWithdrawReply) => void): grpcWeb.ClientReadableStream<stark_api_morgan_pb.CreateTelcoWithdrawReply>;

  createTelcoWithdraw(
    request: stark_api_morgan_pb.CreateTelcoWithdrawRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.CreateTelcoWithdrawReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.morgan.Morgan/CreateTelcoWithdraw',
        request,
        metadata || {},
        this.methodInfoCreateTelcoWithdraw,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.morgan.Morgan/CreateTelcoWithdraw',
    request,
    metadata || {},
    this.methodInfoCreateTelcoWithdraw);
  }

  methodInfoCreateTelcoTopUp = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_morgan_pb.CreateTelcoTopUpReply,
    (request: stark_api_morgan_pb.CreateTelcoTopUpRequest) => {
      return request.serializeBinary();
    },
    stark_api_morgan_pb.CreateTelcoTopUpReply.deserializeBinary
  );

  createTelcoTopUp(
    request: stark_api_morgan_pb.CreateTelcoTopUpRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_morgan_pb.CreateTelcoTopUpReply>;

  createTelcoTopUp(
    request: stark_api_morgan_pb.CreateTelcoTopUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.CreateTelcoTopUpReply) => void): grpcWeb.ClientReadableStream<stark_api_morgan_pb.CreateTelcoTopUpReply>;

  createTelcoTopUp(
    request: stark_api_morgan_pb.CreateTelcoTopUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.CreateTelcoTopUpReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.morgan.Morgan/CreateTelcoTopUp',
        request,
        metadata || {},
        this.methodInfoCreateTelcoTopUp,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.morgan.Morgan/CreateTelcoTopUp',
    request,
    metadata || {},
    this.methodInfoCreateTelcoTopUp);
  }

  methodInfoCancelTelcoWithdraw = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_morgan_pb.CancelTelcoWithdrawReply,
    (request: stark_api_morgan_pb.CancelTelcoWithdrawRequest) => {
      return request.serializeBinary();
    },
    stark_api_morgan_pb.CancelTelcoWithdrawReply.deserializeBinary
  );

  cancelTelcoWithdraw(
    request: stark_api_morgan_pb.CancelTelcoWithdrawRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_morgan_pb.CancelTelcoWithdrawReply>;

  cancelTelcoWithdraw(
    request: stark_api_morgan_pb.CancelTelcoWithdrawRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.CancelTelcoWithdrawReply) => void): grpcWeb.ClientReadableStream<stark_api_morgan_pb.CancelTelcoWithdrawReply>;

  cancelTelcoWithdraw(
    request: stark_api_morgan_pb.CancelTelcoWithdrawRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.CancelTelcoWithdrawReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.morgan.Morgan/CancelTelcoWithdraw',
        request,
        metadata || {},
        this.methodInfoCancelTelcoWithdraw,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.morgan.Morgan/CancelTelcoWithdraw',
    request,
    metadata || {},
    this.methodInfoCancelTelcoWithdraw);
  }

  methodInfoCompleteTelcoTopUp = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_morgan_pb.CompleteTelcoTopUpReply,
    (request: stark_api_morgan_pb.CompleteTelcoTopUpRequest) => {
      return request.serializeBinary();
    },
    stark_api_morgan_pb.CompleteTelcoTopUpReply.deserializeBinary
  );

  completeTelcoTopUp(
    request: stark_api_morgan_pb.CompleteTelcoTopUpRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_morgan_pb.CompleteTelcoTopUpReply>;

  completeTelcoTopUp(
    request: stark_api_morgan_pb.CompleteTelcoTopUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.CompleteTelcoTopUpReply) => void): grpcWeb.ClientReadableStream<stark_api_morgan_pb.CompleteTelcoTopUpReply>;

  completeTelcoTopUp(
    request: stark_api_morgan_pb.CompleteTelcoTopUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.CompleteTelcoTopUpReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.morgan.Morgan/CompleteTelcoTopUp',
        request,
        metadata || {},
        this.methodInfoCompleteTelcoTopUp,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.morgan.Morgan/CompleteTelcoTopUp',
    request,
    metadata || {},
    this.methodInfoCompleteTelcoTopUp);
  }

  methodInfoApproveTelcoTopUp = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_morgan_pb.ApproveTelcoTopUpReply,
    (request: stark_api_morgan_pb.ApproveTelcoTopUpRequest) => {
      return request.serializeBinary();
    },
    stark_api_morgan_pb.ApproveTelcoTopUpReply.deserializeBinary
  );

  approveTelcoTopUp(
    request: stark_api_morgan_pb.ApproveTelcoTopUpRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_morgan_pb.ApproveTelcoTopUpReply>;

  approveTelcoTopUp(
    request: stark_api_morgan_pb.ApproveTelcoTopUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.ApproveTelcoTopUpReply) => void): grpcWeb.ClientReadableStream<stark_api_morgan_pb.ApproveTelcoTopUpReply>;

  approveTelcoTopUp(
    request: stark_api_morgan_pb.ApproveTelcoTopUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.ApproveTelcoTopUpReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.morgan.Morgan/ApproveTelcoTopUp',
        request,
        metadata || {},
        this.methodInfoApproveTelcoTopUp,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.morgan.Morgan/ApproveTelcoTopUp',
    request,
    metadata || {},
    this.methodInfoApproveTelcoTopUp);
  }

  methodInfoApproveTelcoWithdraw = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_morgan_pb.ApproveTelcoWithdrawReply,
    (request: stark_api_morgan_pb.ApproveTelcoWithdrawRequest) => {
      return request.serializeBinary();
    },
    stark_api_morgan_pb.ApproveTelcoWithdrawReply.deserializeBinary
  );

  approveTelcoWithdraw(
    request: stark_api_morgan_pb.ApproveTelcoWithdrawRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_morgan_pb.ApproveTelcoWithdrawReply>;

  approveTelcoWithdraw(
    request: stark_api_morgan_pb.ApproveTelcoWithdrawRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.ApproveTelcoWithdrawReply) => void): grpcWeb.ClientReadableStream<stark_api_morgan_pb.ApproveTelcoWithdrawReply>;

  approveTelcoWithdraw(
    request: stark_api_morgan_pb.ApproveTelcoWithdrawRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.ApproveTelcoWithdrawReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.morgan.Morgan/ApproveTelcoWithdraw',
        request,
        metadata || {},
        this.methodInfoApproveTelcoWithdraw,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.morgan.Morgan/ApproveTelcoWithdraw',
    request,
    metadata || {},
    this.methodInfoApproveTelcoWithdraw);
  }

  methodInfoRejectTelcoTopUp = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_morgan_pb.RejectTelcoTopUpReply,
    (request: stark_api_morgan_pb.RejectTelcoTopUpRequest) => {
      return request.serializeBinary();
    },
    stark_api_morgan_pb.RejectTelcoTopUpReply.deserializeBinary
  );

  rejectTelcoTopUp(
    request: stark_api_morgan_pb.RejectTelcoTopUpRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_morgan_pb.RejectTelcoTopUpReply>;

  rejectTelcoTopUp(
    request: stark_api_morgan_pb.RejectTelcoTopUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.RejectTelcoTopUpReply) => void): grpcWeb.ClientReadableStream<stark_api_morgan_pb.RejectTelcoTopUpReply>;

  rejectTelcoTopUp(
    request: stark_api_morgan_pb.RejectTelcoTopUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.RejectTelcoTopUpReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.morgan.Morgan/RejectTelcoTopUp',
        request,
        metadata || {},
        this.methodInfoRejectTelcoTopUp,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.morgan.Morgan/RejectTelcoTopUp',
    request,
    metadata || {},
    this.methodInfoRejectTelcoTopUp);
  }

  methodInfoRejectTelcoWithdraw = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_morgan_pb.RejectTelcoWithdrawReply,
    (request: stark_api_morgan_pb.RejectTelcoWithdrawRequest) => {
      return request.serializeBinary();
    },
    stark_api_morgan_pb.RejectTelcoWithdrawReply.deserializeBinary
  );

  rejectTelcoWithdraw(
    request: stark_api_morgan_pb.RejectTelcoWithdrawRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_morgan_pb.RejectTelcoWithdrawReply>;

  rejectTelcoWithdraw(
    request: stark_api_morgan_pb.RejectTelcoWithdrawRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.RejectTelcoWithdrawReply) => void): grpcWeb.ClientReadableStream<stark_api_morgan_pb.RejectTelcoWithdrawReply>;

  rejectTelcoWithdraw(
    request: stark_api_morgan_pb.RejectTelcoWithdrawRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.RejectTelcoWithdrawReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.morgan.Morgan/RejectTelcoWithdraw',
        request,
        metadata || {},
        this.methodInfoRejectTelcoWithdraw,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.morgan.Morgan/RejectTelcoWithdraw',
    request,
    metadata || {},
    this.methodInfoRejectTelcoWithdraw);
  }

  methodInfoGetSettings = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_morgan_pb.GetSettingsReply,
    (request: stark_api_morgan_pb.GetSettingsRequest) => {
      return request.serializeBinary();
    },
    stark_api_morgan_pb.GetSettingsReply.deserializeBinary
  );

  getSettings(
    request: stark_api_morgan_pb.GetSettingsRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_morgan_pb.GetSettingsReply>;

  getSettings(
    request: stark_api_morgan_pb.GetSettingsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.GetSettingsReply) => void): grpcWeb.ClientReadableStream<stark_api_morgan_pb.GetSettingsReply>;

  getSettings(
    request: stark_api_morgan_pb.GetSettingsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.GetSettingsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.morgan.Morgan/GetSettings',
        request,
        metadata || {},
        this.methodInfoGetSettings,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.morgan.Morgan/GetSettings',
    request,
    metadata || {},
    this.methodInfoGetSettings);
  }

  methodInfoUpdateTopUpAutoApprovalSetting = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_morgan_pb.UpdateTopUpAutoApprovalSettingReply,
    (request: stark_api_morgan_pb.UpdateTopUpAutoApprovalSettingRequest) => {
      return request.serializeBinary();
    },
    stark_api_morgan_pb.UpdateTopUpAutoApprovalSettingReply.deserializeBinary
  );

  updateTopUpAutoApprovalSetting(
    request: stark_api_morgan_pb.UpdateTopUpAutoApprovalSettingRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_morgan_pb.UpdateTopUpAutoApprovalSettingReply>;

  updateTopUpAutoApprovalSetting(
    request: stark_api_morgan_pb.UpdateTopUpAutoApprovalSettingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.UpdateTopUpAutoApprovalSettingReply) => void): grpcWeb.ClientReadableStream<stark_api_morgan_pb.UpdateTopUpAutoApprovalSettingReply>;

  updateTopUpAutoApprovalSetting(
    request: stark_api_morgan_pb.UpdateTopUpAutoApprovalSettingRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.UpdateTopUpAutoApprovalSettingReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.morgan.Morgan/UpdateTopUpAutoApprovalSetting',
        request,
        metadata || {},
        this.methodInfoUpdateTopUpAutoApprovalSetting,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.morgan.Morgan/UpdateTopUpAutoApprovalSetting',
    request,
    metadata || {},
    this.methodInfoUpdateTopUpAutoApprovalSetting);
  }

  methodInfoUpdateUsingThirdPartySetting = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_morgan_pb.UpdateUsingThirdPartySettingReply,
    (request: stark_api_morgan_pb.UpdateUsingThirdPartySettingRequest) => {
      return request.serializeBinary();
    },
    stark_api_morgan_pb.UpdateUsingThirdPartySettingReply.deserializeBinary
  );

  updateUsingThirdPartySetting(
    request: stark_api_morgan_pb.UpdateUsingThirdPartySettingRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_morgan_pb.UpdateUsingThirdPartySettingReply>;

  updateUsingThirdPartySetting(
    request: stark_api_morgan_pb.UpdateUsingThirdPartySettingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.UpdateUsingThirdPartySettingReply) => void): grpcWeb.ClientReadableStream<stark_api_morgan_pb.UpdateUsingThirdPartySettingReply>;

  updateUsingThirdPartySetting(
    request: stark_api_morgan_pb.UpdateUsingThirdPartySettingRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.UpdateUsingThirdPartySettingReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.morgan.Morgan/UpdateUsingThirdPartySetting',
        request,
        metadata || {},
        this.methodInfoUpdateUsingThirdPartySetting,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.morgan.Morgan/UpdateUsingThirdPartySetting',
    request,
    metadata || {},
    this.methodInfoUpdateUsingThirdPartySetting);
  }

  methodInfoUpdateChargeCardProvidersSetting = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_morgan_pb.UpdateChargeCardProvidersSettingReply,
    (request: stark_api_morgan_pb.UpdateChargeCardProvidersSettingRequest) => {
      return request.serializeBinary();
    },
    stark_api_morgan_pb.UpdateChargeCardProvidersSettingReply.deserializeBinary
  );

  updateChargeCardProvidersSetting(
    request: stark_api_morgan_pb.UpdateChargeCardProvidersSettingRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_morgan_pb.UpdateChargeCardProvidersSettingReply>;

  updateChargeCardProvidersSetting(
    request: stark_api_morgan_pb.UpdateChargeCardProvidersSettingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.UpdateChargeCardProvidersSettingReply) => void): grpcWeb.ClientReadableStream<stark_api_morgan_pb.UpdateChargeCardProvidersSettingReply>;

  updateChargeCardProvidersSetting(
    request: stark_api_morgan_pb.UpdateChargeCardProvidersSettingRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.UpdateChargeCardProvidersSettingReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.morgan.Morgan/UpdateChargeCardProvidersSetting',
        request,
        metadata || {},
        this.methodInfoUpdateChargeCardProvidersSetting,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.morgan.Morgan/UpdateChargeCardProvidersSetting',
    request,
    metadata || {},
    this.methodInfoUpdateChargeCardProvidersSetting);
  }

  methodInfoUpdateGetCardProvidersSetting = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_morgan_pb.UpdateGetCardProvidersSettingReply,
    (request: stark_api_morgan_pb.UpdateGetCardProvidersSettingRequest) => {
      return request.serializeBinary();
    },
    stark_api_morgan_pb.UpdateGetCardProvidersSettingReply.deserializeBinary
  );

  updateGetCardProvidersSetting(
    request: stark_api_morgan_pb.UpdateGetCardProvidersSettingRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_morgan_pb.UpdateGetCardProvidersSettingReply>;

  updateGetCardProvidersSetting(
    request: stark_api_morgan_pb.UpdateGetCardProvidersSettingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.UpdateGetCardProvidersSettingReply) => void): grpcWeb.ClientReadableStream<stark_api_morgan_pb.UpdateGetCardProvidersSettingReply>;

  updateGetCardProvidersSetting(
    request: stark_api_morgan_pb.UpdateGetCardProvidersSettingRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_morgan_pb.UpdateGetCardProvidersSettingReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.morgan.Morgan/UpdateGetCardProvidersSetting',
        request,
        metadata || {},
        this.methodInfoUpdateGetCardProvidersSetting,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.morgan.Morgan/UpdateGetCardProvidersSetting',
    request,
    metadata || {},
    this.methodInfoUpdateGetCardProvidersSetting);
  }

}

