// source: stark/howard.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var validate_validate_pb = require('@greyhole/validate/validate_pb.js');
goog.object.extend(proto, validate_validate_pb);
var stark_api_stark_pb = require('@mcuc/stark/stark_pb.js');
goog.object.extend(proto, stark_api_stark_pb);
goog.exportSymbol('proto.mcuc.stark.howard.AllocationDetail', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetAllocationTopUpRateReply', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetAllocationWithdrawRateReply', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetIncomeStatementReply', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetPaymentTodayReply', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetProcessingPerformanceReply', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetProcessingPerformanceRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetProfitRateReply', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetReportRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetSellReportByMerchantReply', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetSellReportByMerchantRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetSellReportByTellerReply', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetSellReportByTellerRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetSellReportByTimeRangeReply', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetStatisticReply', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetStatisticRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetTopPaymentMethodReply', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetTopTellerReply', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetTotalAmountReply', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.GetTotalAmountRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.Income', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.PaymentMethodRevenue', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.SaleReportItem', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.SaleReportItem.KeyCase', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.StatisticDetail', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.StatisticFilterType', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.TellerRevenue', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.TopUpCompletion', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.TotalAmountDetail', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.TotalAmountMerchant', null, global);
goog.exportSymbol('proto.mcuc.stark.howard.WithdrawCompletion', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.StatisticDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.howard.StatisticDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.StatisticDetail.displayName = 'proto.mcuc.stark.howard.StatisticDetail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetStatisticRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.howard.GetStatisticRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetStatisticRequest.displayName = 'proto.mcuc.stark.howard.GetStatisticRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetStatisticReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.howard.GetStatisticReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetStatisticReply.displayName = 'proto.mcuc.stark.howard.GetStatisticReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetProcessingPerformanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.howard.GetProcessingPerformanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetProcessingPerformanceRequest.displayName = 'proto.mcuc.stark.howard.GetProcessingPerformanceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetProcessingPerformanceReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.howard.GetProcessingPerformanceReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetProcessingPerformanceReply.displayName = 'proto.mcuc.stark.howard.GetProcessingPerformanceReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.TotalAmountMerchant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.howard.TotalAmountMerchant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.TotalAmountMerchant.displayName = 'proto.mcuc.stark.howard.TotalAmountMerchant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.TotalAmountDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.howard.TotalAmountDetail.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.howard.TotalAmountDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.TotalAmountDetail.displayName = 'proto.mcuc.stark.howard.TotalAmountDetail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetTotalAmountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.howard.GetTotalAmountRequest.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.howard.GetTotalAmountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetTotalAmountRequest.displayName = 'proto.mcuc.stark.howard.GetTotalAmountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetTotalAmountReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.howard.GetTotalAmountReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.howard.GetTotalAmountReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetTotalAmountReply.displayName = 'proto.mcuc.stark.howard.GetTotalAmountReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetReportRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.howard.GetReportRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetReportRequest.displayName = 'proto.mcuc.stark.howard.GetReportRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.Income = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.howard.Income, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.Income.displayName = 'proto.mcuc.stark.howard.Income';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.TopUpCompletion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.howard.TopUpCompletion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.TopUpCompletion.displayName = 'proto.mcuc.stark.howard.TopUpCompletion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.WithdrawCompletion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.howard.WithdrawCompletion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.WithdrawCompletion.displayName = 'proto.mcuc.stark.howard.WithdrawCompletion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.AllocationDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.howard.AllocationDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.AllocationDetail.displayName = 'proto.mcuc.stark.howard.AllocationDetail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.PaymentMethodRevenue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.howard.PaymentMethodRevenue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.PaymentMethodRevenue.displayName = 'proto.mcuc.stark.howard.PaymentMethodRevenue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.TellerRevenue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.howard.TellerRevenue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.TellerRevenue.displayName = 'proto.mcuc.stark.howard.TellerRevenue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetIncomeStatementReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.howard.GetIncomeStatementReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.howard.GetIncomeStatementReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetIncomeStatementReply.displayName = 'proto.mcuc.stark.howard.GetIncomeStatementReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetPaymentTodayReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.howard.GetPaymentTodayReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetPaymentTodayReply.displayName = 'proto.mcuc.stark.howard.GetPaymentTodayReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetProfitRateReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.howard.GetProfitRateReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetProfitRateReply.displayName = 'proto.mcuc.stark.howard.GetProfitRateReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetAllocationTopUpRateReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.howard.GetAllocationTopUpRateReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.howard.GetAllocationTopUpRateReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetAllocationTopUpRateReply.displayName = 'proto.mcuc.stark.howard.GetAllocationTopUpRateReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetAllocationWithdrawRateReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.howard.GetAllocationWithdrawRateReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.howard.GetAllocationWithdrawRateReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetAllocationWithdrawRateReply.displayName = 'proto.mcuc.stark.howard.GetAllocationWithdrawRateReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetTopPaymentMethodReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.howard.GetTopPaymentMethodReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.howard.GetTopPaymentMethodReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetTopPaymentMethodReply.displayName = 'proto.mcuc.stark.howard.GetTopPaymentMethodReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetTopTellerReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.howard.GetTopTellerReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.howard.GetTopTellerReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetTopTellerReply.displayName = 'proto.mcuc.stark.howard.GetTopTellerReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.SaleReportItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.mcuc.stark.howard.SaleReportItem.oneofGroups_);
};
goog.inherits(proto.mcuc.stark.howard.SaleReportItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.SaleReportItem.displayName = 'proto.mcuc.stark.howard.SaleReportItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.displayName = 'proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.howard.GetSellReportByTimeRangeReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.howard.GetSellReportByTimeRangeReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetSellReportByTimeRangeReply.displayName = 'proto.mcuc.stark.howard.GetSellReportByTimeRangeReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetSellReportByMerchantRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.howard.GetSellReportByMerchantRequest.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.howard.GetSellReportByMerchantRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetSellReportByMerchantRequest.displayName = 'proto.mcuc.stark.howard.GetSellReportByMerchantRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetSellReportByMerchantReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.howard.GetSellReportByMerchantReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.howard.GetSellReportByMerchantReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetSellReportByMerchantReply.displayName = 'proto.mcuc.stark.howard.GetSellReportByMerchantReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest.displayName = 'proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply.displayName = 'proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetSellReportByTellerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.howard.GetSellReportByTellerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetSellReportByTellerRequest.displayName = 'proto.mcuc.stark.howard.GetSellReportByTellerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.howard.GetSellReportByTellerReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.howard.GetSellReportByTellerReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.howard.GetSellReportByTellerReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.howard.GetSellReportByTellerReply.displayName = 'proto.mcuc.stark.howard.GetSellReportByTellerReply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.StatisticDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.StatisticDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.StatisticDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.StatisticDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, 0),
    percent: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.StatisticDetail}
 */
proto.mcuc.stark.howard.StatisticDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.StatisticDetail;
  return proto.mcuc.stark.howard.StatisticDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.StatisticDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.StatisticDetail}
 */
proto.mcuc.stark.howard.StatisticDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPercent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.StatisticDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.StatisticDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.StatisticDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.StatisticDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPercent();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional uint64 number = 1;
 * @return {number}
 */
proto.mcuc.stark.howard.StatisticDetail.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.StatisticDetail} returns this
 */
proto.mcuc.stark.howard.StatisticDetail.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double percent = 2;
 * @return {number}
 */
proto.mcuc.stark.howard.StatisticDetail.prototype.getPercent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.StatisticDetail} returns this
 */
proto.mcuc.stark.howard.StatisticDetail.prototype.setPercent = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetStatisticRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetStatisticRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetStatisticRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetStatisticRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    filterType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timeZone: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetStatisticRequest}
 */
proto.mcuc.stark.howard.GetStatisticRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetStatisticRequest;
  return proto.mcuc.stark.howard.GetStatisticRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetStatisticRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetStatisticRequest}
 */
proto.mcuc.stark.howard.GetStatisticRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!proto.mcuc.stark.PaymentType} */ (reader.readEnum());
      msg.setPaymentType(value);
      break;
    case 4:
      var value = /** @type {!proto.mcuc.stark.howard.StatisticFilterType} */ (reader.readEnum());
      msg.setFilterType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeZone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetStatisticRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetStatisticRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetStatisticRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetStatisticRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getFilterType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getTimeZone();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional mcuc.stark.PaymentType payment_type = 3;
 * @return {!proto.mcuc.stark.PaymentType}
 */
proto.mcuc.stark.howard.GetStatisticRequest.prototype.getPaymentType = function() {
  return /** @type {!proto.mcuc.stark.PaymentType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.mcuc.stark.PaymentType} value
 * @return {!proto.mcuc.stark.howard.GetStatisticRequest} returns this
 */
proto.mcuc.stark.howard.GetStatisticRequest.prototype.setPaymentType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional StatisticFilterType filter_type = 4;
 * @return {!proto.mcuc.stark.howard.StatisticFilterType}
 */
proto.mcuc.stark.howard.GetStatisticRequest.prototype.getFilterType = function() {
  return /** @type {!proto.mcuc.stark.howard.StatisticFilterType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.mcuc.stark.howard.StatisticFilterType} value
 * @return {!proto.mcuc.stark.howard.GetStatisticRequest} returns this
 */
proto.mcuc.stark.howard.GetStatisticRequest.prototype.setFilterType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int32 time_zone = 5;
 * @return {number}
 */
proto.mcuc.stark.howard.GetStatisticRequest.prototype.getTimeZone = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.GetStatisticRequest} returns this
 */
proto.mcuc.stark.howard.GetStatisticRequest.prototype.setTimeZone = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetStatisticReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetStatisticReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetStatisticReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetStatisticReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    order: (f = msg.getOrder()) && proto.mcuc.stark.howard.StatisticDetail.toObject(includeInstance, f),
    amount: (f = msg.getAmount()) && proto.mcuc.stark.howard.StatisticDetail.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.mcuc.stark.howard.StatisticDetail.toObject(includeInstance, f),
    arppu: (f = msg.getArppu()) && proto.mcuc.stark.howard.StatisticDetail.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetStatisticReply}
 */
proto.mcuc.stark.howard.GetStatisticReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetStatisticReply;
  return proto.mcuc.stark.howard.GetStatisticReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetStatisticReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetStatisticReply}
 */
proto.mcuc.stark.howard.GetStatisticReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.howard.StatisticDetail;
      reader.readMessage(value,proto.mcuc.stark.howard.StatisticDetail.deserializeBinaryFromReader);
      msg.setOrder(value);
      break;
    case 2:
      var value = new proto.mcuc.stark.howard.StatisticDetail;
      reader.readMessage(value,proto.mcuc.stark.howard.StatisticDetail.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 3:
      var value = new proto.mcuc.stark.howard.StatisticDetail;
      reader.readMessage(value,proto.mcuc.stark.howard.StatisticDetail.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 4:
      var value = new proto.mcuc.stark.howard.StatisticDetail;
      reader.readMessage(value,proto.mcuc.stark.howard.StatisticDetail.deserializeBinaryFromReader);
      msg.setArppu(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetStatisticReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetStatisticReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetStatisticReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetStatisticReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrder();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mcuc.stark.howard.StatisticDetail.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mcuc.stark.howard.StatisticDetail.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mcuc.stark.howard.StatisticDetail.serializeBinaryToWriter
    );
  }
  f = message.getArppu();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.mcuc.stark.howard.StatisticDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional StatisticDetail order = 1;
 * @return {?proto.mcuc.stark.howard.StatisticDetail}
 */
proto.mcuc.stark.howard.GetStatisticReply.prototype.getOrder = function() {
  return /** @type{?proto.mcuc.stark.howard.StatisticDetail} */ (
    jspb.Message.getWrapperField(this, proto.mcuc.stark.howard.StatisticDetail, 1));
};


/**
 * @param {?proto.mcuc.stark.howard.StatisticDetail|undefined} value
 * @return {!proto.mcuc.stark.howard.GetStatisticReply} returns this
*/
proto.mcuc.stark.howard.GetStatisticReply.prototype.setOrder = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetStatisticReply} returns this
 */
proto.mcuc.stark.howard.GetStatisticReply.prototype.clearOrder = function() {
  return this.setOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetStatisticReply.prototype.hasOrder = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StatisticDetail amount = 2;
 * @return {?proto.mcuc.stark.howard.StatisticDetail}
 */
proto.mcuc.stark.howard.GetStatisticReply.prototype.getAmount = function() {
  return /** @type{?proto.mcuc.stark.howard.StatisticDetail} */ (
    jspb.Message.getWrapperField(this, proto.mcuc.stark.howard.StatisticDetail, 2));
};


/**
 * @param {?proto.mcuc.stark.howard.StatisticDetail|undefined} value
 * @return {!proto.mcuc.stark.howard.GetStatisticReply} returns this
*/
proto.mcuc.stark.howard.GetStatisticReply.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetStatisticReply} returns this
 */
proto.mcuc.stark.howard.GetStatisticReply.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetStatisticReply.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StatisticDetail user = 3;
 * @return {?proto.mcuc.stark.howard.StatisticDetail}
 */
proto.mcuc.stark.howard.GetStatisticReply.prototype.getUser = function() {
  return /** @type{?proto.mcuc.stark.howard.StatisticDetail} */ (
    jspb.Message.getWrapperField(this, proto.mcuc.stark.howard.StatisticDetail, 3));
};


/**
 * @param {?proto.mcuc.stark.howard.StatisticDetail|undefined} value
 * @return {!proto.mcuc.stark.howard.GetStatisticReply} returns this
*/
proto.mcuc.stark.howard.GetStatisticReply.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetStatisticReply} returns this
 */
proto.mcuc.stark.howard.GetStatisticReply.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetStatisticReply.prototype.hasUser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StatisticDetail arppu = 4;
 * @return {?proto.mcuc.stark.howard.StatisticDetail}
 */
proto.mcuc.stark.howard.GetStatisticReply.prototype.getArppu = function() {
  return /** @type{?proto.mcuc.stark.howard.StatisticDetail} */ (
    jspb.Message.getWrapperField(this, proto.mcuc.stark.howard.StatisticDetail, 4));
};


/**
 * @param {?proto.mcuc.stark.howard.StatisticDetail|undefined} value
 * @return {!proto.mcuc.stark.howard.GetStatisticReply} returns this
*/
proto.mcuc.stark.howard.GetStatisticReply.prototype.setArppu = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetStatisticReply} returns this
 */
proto.mcuc.stark.howard.GetStatisticReply.prototype.clearArppu = function() {
  return this.setArppu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetStatisticReply.prototype.hasArppu = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetProcessingPerformanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetProcessingPerformanceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetProcessingPerformanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromDate: (f = msg.getFromDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    toDate: (f = msg.getToDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    merchantId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetProcessingPerformanceRequest}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetProcessingPerformanceRequest;
  return proto.mcuc.stark.howard.GetProcessingPerformanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetProcessingPerformanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetProcessingPerformanceRequest}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFromDate(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setToDate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetProcessingPerformanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetProcessingPerformanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetProcessingPerformanceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromDate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getToDate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMerchantId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp from_date = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceRequest.prototype.getFromDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.howard.GetProcessingPerformanceRequest} returns this
*/
proto.mcuc.stark.howard.GetProcessingPerformanceRequest.prototype.setFromDate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetProcessingPerformanceRequest} returns this
 */
proto.mcuc.stark.howard.GetProcessingPerformanceRequest.prototype.clearFromDate = function() {
  return this.setFromDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceRequest.prototype.hasFromDate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp to_date = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceRequest.prototype.getToDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.howard.GetProcessingPerformanceRequest} returns this
*/
proto.mcuc.stark.howard.GetProcessingPerformanceRequest.prototype.setToDate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetProcessingPerformanceRequest} returns this
 */
proto.mcuc.stark.howard.GetProcessingPerformanceRequest.prototype.clearToDate = function() {
  return this.setToDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceRequest.prototype.hasToDate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 merchant_id = 3;
 * @return {number}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceRequest.prototype.getMerchantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.GetProcessingPerformanceRequest} returns this
 */
proto.mcuc.stark.howard.GetProcessingPerformanceRequest.prototype.setMerchantId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetProcessingPerformanceReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetProcessingPerformanceReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetProcessingPerformanceReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    merchantId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalOrder: jspb.Message.getFieldWithDefault(msg, 2, 0),
    successfully: (f = msg.getSuccessfully()) && proto.mcuc.stark.howard.StatisticDetail.toObject(includeInstance, f),
    failed: (f = msg.getFailed()) && proto.mcuc.stark.howard.StatisticDetail.toObject(includeInstance, f),
    waiting: (f = msg.getWaiting()) && proto.mcuc.stark.howard.StatisticDetail.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetProcessingPerformanceReply}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetProcessingPerformanceReply;
  return proto.mcuc.stark.howard.GetProcessingPerformanceReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetProcessingPerformanceReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetProcessingPerformanceReply}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalOrder(value);
      break;
    case 3:
      var value = new proto.mcuc.stark.howard.StatisticDetail;
      reader.readMessage(value,proto.mcuc.stark.howard.StatisticDetail.deserializeBinaryFromReader);
      msg.setSuccessfully(value);
      break;
    case 4:
      var value = new proto.mcuc.stark.howard.StatisticDetail;
      reader.readMessage(value,proto.mcuc.stark.howard.StatisticDetail.deserializeBinaryFromReader);
      msg.setFailed(value);
      break;
    case 5:
      var value = new proto.mcuc.stark.howard.StatisticDetail;
      reader.readMessage(value,proto.mcuc.stark.howard.StatisticDetail.deserializeBinaryFromReader);
      msg.setWaiting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetProcessingPerformanceReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetProcessingPerformanceReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetProcessingPerformanceReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMerchantId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTotalOrder();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSuccessfully();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mcuc.stark.howard.StatisticDetail.serializeBinaryToWriter
    );
  }
  f = message.getFailed();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.mcuc.stark.howard.StatisticDetail.serializeBinaryToWriter
    );
  }
  f = message.getWaiting();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.mcuc.stark.howard.StatisticDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 merchant_id = 1;
 * @return {number}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceReply.prototype.getMerchantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.GetProcessingPerformanceReply} returns this
 */
proto.mcuc.stark.howard.GetProcessingPerformanceReply.prototype.setMerchantId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 total_order = 2;
 * @return {number}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceReply.prototype.getTotalOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.GetProcessingPerformanceReply} returns this
 */
proto.mcuc.stark.howard.GetProcessingPerformanceReply.prototype.setTotalOrder = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional StatisticDetail successfully = 3;
 * @return {?proto.mcuc.stark.howard.StatisticDetail}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceReply.prototype.getSuccessfully = function() {
  return /** @type{?proto.mcuc.stark.howard.StatisticDetail} */ (
    jspb.Message.getWrapperField(this, proto.mcuc.stark.howard.StatisticDetail, 3));
};


/**
 * @param {?proto.mcuc.stark.howard.StatisticDetail|undefined} value
 * @return {!proto.mcuc.stark.howard.GetProcessingPerformanceReply} returns this
*/
proto.mcuc.stark.howard.GetProcessingPerformanceReply.prototype.setSuccessfully = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetProcessingPerformanceReply} returns this
 */
proto.mcuc.stark.howard.GetProcessingPerformanceReply.prototype.clearSuccessfully = function() {
  return this.setSuccessfully(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceReply.prototype.hasSuccessfully = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StatisticDetail failed = 4;
 * @return {?proto.mcuc.stark.howard.StatisticDetail}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceReply.prototype.getFailed = function() {
  return /** @type{?proto.mcuc.stark.howard.StatisticDetail} */ (
    jspb.Message.getWrapperField(this, proto.mcuc.stark.howard.StatisticDetail, 4));
};


/**
 * @param {?proto.mcuc.stark.howard.StatisticDetail|undefined} value
 * @return {!proto.mcuc.stark.howard.GetProcessingPerformanceReply} returns this
*/
proto.mcuc.stark.howard.GetProcessingPerformanceReply.prototype.setFailed = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetProcessingPerformanceReply} returns this
 */
proto.mcuc.stark.howard.GetProcessingPerformanceReply.prototype.clearFailed = function() {
  return this.setFailed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceReply.prototype.hasFailed = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional StatisticDetail waiting = 5;
 * @return {?proto.mcuc.stark.howard.StatisticDetail}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceReply.prototype.getWaiting = function() {
  return /** @type{?proto.mcuc.stark.howard.StatisticDetail} */ (
    jspb.Message.getWrapperField(this, proto.mcuc.stark.howard.StatisticDetail, 5));
};


/**
 * @param {?proto.mcuc.stark.howard.StatisticDetail|undefined} value
 * @return {!proto.mcuc.stark.howard.GetProcessingPerformanceReply} returns this
*/
proto.mcuc.stark.howard.GetProcessingPerformanceReply.prototype.setWaiting = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetProcessingPerformanceReply} returns this
 */
proto.mcuc.stark.howard.GetProcessingPerformanceReply.prototype.clearWaiting = function() {
  return this.setWaiting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetProcessingPerformanceReply.prototype.hasWaiting = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.TotalAmountMerchant.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.TotalAmountMerchant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.TotalAmountMerchant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.TotalAmountMerchant.toObject = function(includeInstance, msg) {
  var f, obj = {
    merchantId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.TotalAmountMerchant}
 */
proto.mcuc.stark.howard.TotalAmountMerchant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.TotalAmountMerchant;
  return proto.mcuc.stark.howard.TotalAmountMerchant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.TotalAmountMerchant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.TotalAmountMerchant}
 */
proto.mcuc.stark.howard.TotalAmountMerchant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.TotalAmountMerchant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.TotalAmountMerchant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.TotalAmountMerchant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.TotalAmountMerchant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMerchantId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional int64 merchant_id = 1;
 * @return {number}
 */
proto.mcuc.stark.howard.TotalAmountMerchant.prototype.getMerchantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.TotalAmountMerchant} returns this
 */
proto.mcuc.stark.howard.TotalAmountMerchant.prototype.setMerchantId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 amount = 2;
 * @return {number}
 */
proto.mcuc.stark.howard.TotalAmountMerchant.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.TotalAmountMerchant} returns this
 */
proto.mcuc.stark.howard.TotalAmountMerchant.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.howard.TotalAmountDetail.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.TotalAmountDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.TotalAmountDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.TotalAmountDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.TotalAmountDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    date: (f = msg.getDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    merchantAmountsList: jspb.Message.toObjectList(msg.getMerchantAmountsList(),
    proto.mcuc.stark.howard.TotalAmountMerchant.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.TotalAmountDetail}
 */
proto.mcuc.stark.howard.TotalAmountDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.TotalAmountDetail;
  return proto.mcuc.stark.howard.TotalAmountDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.TotalAmountDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.TotalAmountDetail}
 */
proto.mcuc.stark.howard.TotalAmountDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    case 2:
      var value = new proto.mcuc.stark.howard.TotalAmountMerchant;
      reader.readMessage(value,proto.mcuc.stark.howard.TotalAmountMerchant.deserializeBinaryFromReader);
      msg.addMerchantAmounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.TotalAmountDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.TotalAmountDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.TotalAmountDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.TotalAmountDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMerchantAmountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.mcuc.stark.howard.TotalAmountMerchant.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp date = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.howard.TotalAmountDetail.prototype.getDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.howard.TotalAmountDetail} returns this
*/
proto.mcuc.stark.howard.TotalAmountDetail.prototype.setDate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.TotalAmountDetail} returns this
 */
proto.mcuc.stark.howard.TotalAmountDetail.prototype.clearDate = function() {
  return this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.TotalAmountDetail.prototype.hasDate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TotalAmountMerchant merchant_amounts = 2;
 * @return {!Array<!proto.mcuc.stark.howard.TotalAmountMerchant>}
 */
proto.mcuc.stark.howard.TotalAmountDetail.prototype.getMerchantAmountsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.howard.TotalAmountMerchant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.howard.TotalAmountMerchant, 2));
};


/**
 * @param {!Array<!proto.mcuc.stark.howard.TotalAmountMerchant>} value
 * @return {!proto.mcuc.stark.howard.TotalAmountDetail} returns this
*/
proto.mcuc.stark.howard.TotalAmountDetail.prototype.setMerchantAmountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mcuc.stark.howard.TotalAmountMerchant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.howard.TotalAmountMerchant}
 */
proto.mcuc.stark.howard.TotalAmountDetail.prototype.addMerchantAmounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mcuc.stark.howard.TotalAmountMerchant, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.howard.TotalAmountDetail} returns this
 */
proto.mcuc.stark.howard.TotalAmountDetail.prototype.clearMerchantAmountsList = function() {
  return this.setMerchantAmountsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.howard.GetTotalAmountRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetTotalAmountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetTotalAmountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetTotalAmountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetTotalAmountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromDate: (f = msg.getFromDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    toDate: (f = msg.getToDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    merchantsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    timeZone: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetTotalAmountRequest}
 */
proto.mcuc.stark.howard.GetTotalAmountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetTotalAmountRequest;
  return proto.mcuc.stark.howard.GetTotalAmountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetTotalAmountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetTotalAmountRequest}
 */
proto.mcuc.stark.howard.GetTotalAmountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFromDate(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setToDate(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setMerchantsList(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeZone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetTotalAmountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetTotalAmountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetTotalAmountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetTotalAmountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromDate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getToDate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMerchantsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      3,
      f
    );
  }
  f = message.getTimeZone();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp from_date = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.howard.GetTotalAmountRequest.prototype.getFromDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.howard.GetTotalAmountRequest} returns this
*/
proto.mcuc.stark.howard.GetTotalAmountRequest.prototype.setFromDate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetTotalAmountRequest} returns this
 */
proto.mcuc.stark.howard.GetTotalAmountRequest.prototype.clearFromDate = function() {
  return this.setFromDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetTotalAmountRequest.prototype.hasFromDate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp to_date = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.howard.GetTotalAmountRequest.prototype.getToDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.howard.GetTotalAmountRequest} returns this
*/
proto.mcuc.stark.howard.GetTotalAmountRequest.prototype.setToDate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetTotalAmountRequest} returns this
 */
proto.mcuc.stark.howard.GetTotalAmountRequest.prototype.clearToDate = function() {
  return this.setToDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetTotalAmountRequest.prototype.hasToDate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated int64 merchants = 3;
 * @return {!Array<number>}
 */
proto.mcuc.stark.howard.GetTotalAmountRequest.prototype.getMerchantsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.mcuc.stark.howard.GetTotalAmountRequest} returns this
 */
proto.mcuc.stark.howard.GetTotalAmountRequest.prototype.setMerchantsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.howard.GetTotalAmountRequest} returns this
 */
proto.mcuc.stark.howard.GetTotalAmountRequest.prototype.addMerchants = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.howard.GetTotalAmountRequest} returns this
 */
proto.mcuc.stark.howard.GetTotalAmountRequest.prototype.clearMerchantsList = function() {
  return this.setMerchantsList([]);
};


/**
 * optional int32 time_zone = 4;
 * @return {number}
 */
proto.mcuc.stark.howard.GetTotalAmountRequest.prototype.getTimeZone = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.GetTotalAmountRequest} returns this
 */
proto.mcuc.stark.howard.GetTotalAmountRequest.prototype.setTimeZone = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.howard.GetTotalAmountReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetTotalAmountReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetTotalAmountReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetTotalAmountReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetTotalAmountReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    detailsList: jspb.Message.toObjectList(msg.getDetailsList(),
    proto.mcuc.stark.howard.TotalAmountDetail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetTotalAmountReply}
 */
proto.mcuc.stark.howard.GetTotalAmountReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetTotalAmountReply;
  return proto.mcuc.stark.howard.GetTotalAmountReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetTotalAmountReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetTotalAmountReply}
 */
proto.mcuc.stark.howard.GetTotalAmountReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.howard.TotalAmountDetail;
      reader.readMessage(value,proto.mcuc.stark.howard.TotalAmountDetail.deserializeBinaryFromReader);
      msg.addDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetTotalAmountReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetTotalAmountReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetTotalAmountReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetTotalAmountReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDetailsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.howard.TotalAmountDetail.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TotalAmountDetail details = 1;
 * @return {!Array<!proto.mcuc.stark.howard.TotalAmountDetail>}
 */
proto.mcuc.stark.howard.GetTotalAmountReply.prototype.getDetailsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.howard.TotalAmountDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.howard.TotalAmountDetail, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.howard.TotalAmountDetail>} value
 * @return {!proto.mcuc.stark.howard.GetTotalAmountReply} returns this
*/
proto.mcuc.stark.howard.GetTotalAmountReply.prototype.setDetailsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.howard.TotalAmountDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.howard.TotalAmountDetail}
 */
proto.mcuc.stark.howard.GetTotalAmountReply.prototype.addDetails = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.howard.TotalAmountDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.howard.GetTotalAmountReply} returns this
 */
proto.mcuc.stark.howard.GetTotalAmountReply.prototype.clearDetailsList = function() {
  return this.setDetailsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetReportRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetReportRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetReportRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetReportRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromDate: (f = msg.getFromDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    toDate: (f = msg.getToDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    merchantId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timeZone: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetReportRequest}
 */
proto.mcuc.stark.howard.GetReportRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetReportRequest;
  return proto.mcuc.stark.howard.GetReportRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetReportRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetReportRequest}
 */
proto.mcuc.stark.howard.GetReportRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFromDate(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setToDate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeZone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetReportRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetReportRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetReportRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetReportRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromDate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getToDate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMerchantId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTimeZone();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp from_date = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.howard.GetReportRequest.prototype.getFromDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.howard.GetReportRequest} returns this
*/
proto.mcuc.stark.howard.GetReportRequest.prototype.setFromDate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetReportRequest} returns this
 */
proto.mcuc.stark.howard.GetReportRequest.prototype.clearFromDate = function() {
  return this.setFromDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetReportRequest.prototype.hasFromDate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp to_date = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.howard.GetReportRequest.prototype.getToDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.howard.GetReportRequest} returns this
*/
proto.mcuc.stark.howard.GetReportRequest.prototype.setToDate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetReportRequest} returns this
 */
proto.mcuc.stark.howard.GetReportRequest.prototype.clearToDate = function() {
  return this.setToDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetReportRequest.prototype.hasToDate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 merchant_id = 3;
 * @return {number}
 */
proto.mcuc.stark.howard.GetReportRequest.prototype.getMerchantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.GetReportRequest} returns this
 */
proto.mcuc.stark.howard.GetReportRequest.prototype.setMerchantId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 time_zone = 4;
 * @return {number}
 */
proto.mcuc.stark.howard.GetReportRequest.prototype.getTimeZone = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.GetReportRequest} returns this
 */
proto.mcuc.stark.howard.GetReportRequest.prototype.setTimeZone = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.Income.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.Income.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.Income} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.Income.toObject = function(includeInstance, msg) {
  var f, obj = {
    date: (f = msg.getDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.Income}
 */
proto.mcuc.stark.howard.Income.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.Income;
  return proto.mcuc.stark.howard.Income.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.Income} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.Income}
 */
proto.mcuc.stark.howard.Income.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.Income.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.Income.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.Income} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.Income.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp date = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.howard.Income.prototype.getDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.howard.Income} returns this
*/
proto.mcuc.stark.howard.Income.prototype.setDate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.Income} returns this
 */
proto.mcuc.stark.howard.Income.prototype.clearDate = function() {
  return this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.Income.prototype.hasDate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double amount = 2;
 * @return {number}
 */
proto.mcuc.stark.howard.Income.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.Income} returns this
 */
proto.mcuc.stark.howard.Income.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.TopUpCompletion.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.TopUpCompletion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.TopUpCompletion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.TopUpCompletion.toObject = function(includeInstance, msg) {
  var f, obj = {
    completed: jspb.Message.getFieldWithDefault(msg, 1, 0),
    total: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.TopUpCompletion}
 */
proto.mcuc.stark.howard.TopUpCompletion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.TopUpCompletion;
  return proto.mcuc.stark.howard.TopUpCompletion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.TopUpCompletion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.TopUpCompletion}
 */
proto.mcuc.stark.howard.TopUpCompletion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCompleted(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.TopUpCompletion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.TopUpCompletion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.TopUpCompletion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.TopUpCompletion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompleted();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 completed = 1;
 * @return {number}
 */
proto.mcuc.stark.howard.TopUpCompletion.prototype.getCompleted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.TopUpCompletion} returns this
 */
proto.mcuc.stark.howard.TopUpCompletion.prototype.setCompleted = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 total = 2;
 * @return {number}
 */
proto.mcuc.stark.howard.TopUpCompletion.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.TopUpCompletion} returns this
 */
proto.mcuc.stark.howard.TopUpCompletion.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.WithdrawCompletion.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.WithdrawCompletion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.WithdrawCompletion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.WithdrawCompletion.toObject = function(includeInstance, msg) {
  var f, obj = {
    completed: jspb.Message.getFieldWithDefault(msg, 1, 0),
    total: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.WithdrawCompletion}
 */
proto.mcuc.stark.howard.WithdrawCompletion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.WithdrawCompletion;
  return proto.mcuc.stark.howard.WithdrawCompletion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.WithdrawCompletion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.WithdrawCompletion}
 */
proto.mcuc.stark.howard.WithdrawCompletion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCompleted(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.WithdrawCompletion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.WithdrawCompletion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.WithdrawCompletion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.WithdrawCompletion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompleted();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 completed = 1;
 * @return {number}
 */
proto.mcuc.stark.howard.WithdrawCompletion.prototype.getCompleted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.WithdrawCompletion} returns this
 */
proto.mcuc.stark.howard.WithdrawCompletion.prototype.setCompleted = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 total = 2;
 * @return {number}
 */
proto.mcuc.stark.howard.WithdrawCompletion.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.WithdrawCompletion} returns this
 */
proto.mcuc.stark.howard.WithdrawCompletion.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.AllocationDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.AllocationDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.AllocationDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.AllocationDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, 0),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    percent: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.AllocationDetail}
 */
proto.mcuc.stark.howard.AllocationDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.AllocationDetail;
  return proto.mcuc.stark.howard.AllocationDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.AllocationDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.AllocationDetail}
 */
proto.mcuc.stark.howard.AllocationDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mcuc.stark.MethodType} */ (reader.readEnum());
      msg.setMethod(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPercent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.AllocationDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.AllocationDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.AllocationDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.AllocationDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getPercent();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional mcuc.stark.MethodType method = 1;
 * @return {!proto.mcuc.stark.MethodType}
 */
proto.mcuc.stark.howard.AllocationDetail.prototype.getMethod = function() {
  return /** @type {!proto.mcuc.stark.MethodType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mcuc.stark.MethodType} value
 * @return {!proto.mcuc.stark.howard.AllocationDetail} returns this
 */
proto.mcuc.stark.howard.AllocationDetail.prototype.setMethod = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional double amount = 2;
 * @return {number}
 */
proto.mcuc.stark.howard.AllocationDetail.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.AllocationDetail} returns this
 */
proto.mcuc.stark.howard.AllocationDetail.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double percent = 3;
 * @return {number}
 */
proto.mcuc.stark.howard.AllocationDetail.prototype.getPercent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.AllocationDetail} returns this
 */
proto.mcuc.stark.howard.AllocationDetail.prototype.setPercent = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.PaymentMethodRevenue.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.PaymentMethodRevenue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.PaymentMethodRevenue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.PaymentMethodRevenue.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.PaymentMethodRevenue}
 */
proto.mcuc.stark.howard.PaymentMethodRevenue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.PaymentMethodRevenue;
  return proto.mcuc.stark.howard.PaymentMethodRevenue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.PaymentMethodRevenue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.PaymentMethodRevenue}
 */
proto.mcuc.stark.howard.PaymentMethodRevenue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mcuc.stark.MethodType} */ (reader.readEnum());
      msg.setMethod(value);
      break;
    case 2:
      var value = /** @type {!proto.mcuc.stark.PaymentType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.PaymentMethodRevenue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.PaymentMethodRevenue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.PaymentMethodRevenue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.PaymentMethodRevenue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional mcuc.stark.MethodType method = 1;
 * @return {!proto.mcuc.stark.MethodType}
 */
proto.mcuc.stark.howard.PaymentMethodRevenue.prototype.getMethod = function() {
  return /** @type {!proto.mcuc.stark.MethodType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mcuc.stark.MethodType} value
 * @return {!proto.mcuc.stark.howard.PaymentMethodRevenue} returns this
 */
proto.mcuc.stark.howard.PaymentMethodRevenue.prototype.setMethod = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional mcuc.stark.PaymentType type = 2;
 * @return {!proto.mcuc.stark.PaymentType}
 */
proto.mcuc.stark.howard.PaymentMethodRevenue.prototype.getType = function() {
  return /** @type {!proto.mcuc.stark.PaymentType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.mcuc.stark.PaymentType} value
 * @return {!proto.mcuc.stark.howard.PaymentMethodRevenue} returns this
 */
proto.mcuc.stark.howard.PaymentMethodRevenue.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional double amount = 3;
 * @return {number}
 */
proto.mcuc.stark.howard.PaymentMethodRevenue.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.PaymentMethodRevenue} returns this
 */
proto.mcuc.stark.howard.PaymentMethodRevenue.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.TellerRevenue.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.TellerRevenue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.TellerRevenue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.TellerRevenue.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.TellerRevenue}
 */
proto.mcuc.stark.howard.TellerRevenue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.TellerRevenue;
  return proto.mcuc.stark.howard.TellerRevenue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.TellerRevenue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.TellerRevenue}
 */
proto.mcuc.stark.howard.TellerRevenue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.TellerRevenue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.TellerRevenue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.TellerRevenue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.TellerRevenue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.mcuc.stark.howard.TellerRevenue.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.howard.TellerRevenue} returns this
 */
proto.mcuc.stark.howard.TellerRevenue.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double amount = 2;
 * @return {number}
 */
proto.mcuc.stark.howard.TellerRevenue.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.TellerRevenue} returns this
 */
proto.mcuc.stark.howard.TellerRevenue.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.howard.GetIncomeStatementReply.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetIncomeStatementReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetIncomeStatementReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetIncomeStatementReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetIncomeStatementReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    revenuesList: jspb.Message.toObjectList(msg.getRevenuesList(),
    proto.mcuc.stark.howard.Income.toObject, includeInstance),
    profitsList: jspb.Message.toObjectList(msg.getProfitsList(),
    proto.mcuc.stark.howard.Income.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetIncomeStatementReply}
 */
proto.mcuc.stark.howard.GetIncomeStatementReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetIncomeStatementReply;
  return proto.mcuc.stark.howard.GetIncomeStatementReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetIncomeStatementReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetIncomeStatementReply}
 */
proto.mcuc.stark.howard.GetIncomeStatementReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.howard.Income;
      reader.readMessage(value,proto.mcuc.stark.howard.Income.deserializeBinaryFromReader);
      msg.addRevenues(value);
      break;
    case 2:
      var value = new proto.mcuc.stark.howard.Income;
      reader.readMessage(value,proto.mcuc.stark.howard.Income.deserializeBinaryFromReader);
      msg.addProfits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetIncomeStatementReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetIncomeStatementReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetIncomeStatementReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetIncomeStatementReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRevenuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.howard.Income.serializeBinaryToWriter
    );
  }
  f = message.getProfitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.mcuc.stark.howard.Income.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Income revenues = 1;
 * @return {!Array<!proto.mcuc.stark.howard.Income>}
 */
proto.mcuc.stark.howard.GetIncomeStatementReply.prototype.getRevenuesList = function() {
  return /** @type{!Array<!proto.mcuc.stark.howard.Income>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.howard.Income, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.howard.Income>} value
 * @return {!proto.mcuc.stark.howard.GetIncomeStatementReply} returns this
*/
proto.mcuc.stark.howard.GetIncomeStatementReply.prototype.setRevenuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.howard.Income=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.howard.Income}
 */
proto.mcuc.stark.howard.GetIncomeStatementReply.prototype.addRevenues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.howard.Income, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.howard.GetIncomeStatementReply} returns this
 */
proto.mcuc.stark.howard.GetIncomeStatementReply.prototype.clearRevenuesList = function() {
  return this.setRevenuesList([]);
};


/**
 * repeated Income profits = 2;
 * @return {!Array<!proto.mcuc.stark.howard.Income>}
 */
proto.mcuc.stark.howard.GetIncomeStatementReply.prototype.getProfitsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.howard.Income>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.howard.Income, 2));
};


/**
 * @param {!Array<!proto.mcuc.stark.howard.Income>} value
 * @return {!proto.mcuc.stark.howard.GetIncomeStatementReply} returns this
*/
proto.mcuc.stark.howard.GetIncomeStatementReply.prototype.setProfitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mcuc.stark.howard.Income=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.howard.Income}
 */
proto.mcuc.stark.howard.GetIncomeStatementReply.prototype.addProfits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mcuc.stark.howard.Income, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.howard.GetIncomeStatementReply} returns this
 */
proto.mcuc.stark.howard.GetIncomeStatementReply.prototype.clearProfitsList = function() {
  return this.setProfitsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetPaymentTodayReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetPaymentTodayReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetPaymentTodayReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetPaymentTodayReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    topUpCompletion: (f = msg.getTopUpCompletion()) && proto.mcuc.stark.howard.TopUpCompletion.toObject(includeInstance, f),
    withdrawCompletion: (f = msg.getWithdrawCompletion()) && proto.mcuc.stark.howard.WithdrawCompletion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetPaymentTodayReply}
 */
proto.mcuc.stark.howard.GetPaymentTodayReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetPaymentTodayReply;
  return proto.mcuc.stark.howard.GetPaymentTodayReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetPaymentTodayReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetPaymentTodayReply}
 */
proto.mcuc.stark.howard.GetPaymentTodayReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.mcuc.stark.howard.TopUpCompletion;
      reader.readMessage(value,proto.mcuc.stark.howard.TopUpCompletion.deserializeBinaryFromReader);
      msg.setTopUpCompletion(value);
      break;
    case 4:
      var value = new proto.mcuc.stark.howard.WithdrawCompletion;
      reader.readMessage(value,proto.mcuc.stark.howard.WithdrawCompletion.deserializeBinaryFromReader);
      msg.setWithdrawCompletion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetPaymentTodayReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetPaymentTodayReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetPaymentTodayReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetPaymentTodayReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopUpCompletion();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mcuc.stark.howard.TopUpCompletion.serializeBinaryToWriter
    );
  }
  f = message.getWithdrawCompletion();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.mcuc.stark.howard.WithdrawCompletion.serializeBinaryToWriter
    );
  }
};


/**
 * optional TopUpCompletion top_up_completion = 3;
 * @return {?proto.mcuc.stark.howard.TopUpCompletion}
 */
proto.mcuc.stark.howard.GetPaymentTodayReply.prototype.getTopUpCompletion = function() {
  return /** @type{?proto.mcuc.stark.howard.TopUpCompletion} */ (
    jspb.Message.getWrapperField(this, proto.mcuc.stark.howard.TopUpCompletion, 3));
};


/**
 * @param {?proto.mcuc.stark.howard.TopUpCompletion|undefined} value
 * @return {!proto.mcuc.stark.howard.GetPaymentTodayReply} returns this
*/
proto.mcuc.stark.howard.GetPaymentTodayReply.prototype.setTopUpCompletion = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetPaymentTodayReply} returns this
 */
proto.mcuc.stark.howard.GetPaymentTodayReply.prototype.clearTopUpCompletion = function() {
  return this.setTopUpCompletion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetPaymentTodayReply.prototype.hasTopUpCompletion = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional WithdrawCompletion withdraw_completion = 4;
 * @return {?proto.mcuc.stark.howard.WithdrawCompletion}
 */
proto.mcuc.stark.howard.GetPaymentTodayReply.prototype.getWithdrawCompletion = function() {
  return /** @type{?proto.mcuc.stark.howard.WithdrawCompletion} */ (
    jspb.Message.getWrapperField(this, proto.mcuc.stark.howard.WithdrawCompletion, 4));
};


/**
 * @param {?proto.mcuc.stark.howard.WithdrawCompletion|undefined} value
 * @return {!proto.mcuc.stark.howard.GetPaymentTodayReply} returns this
*/
proto.mcuc.stark.howard.GetPaymentTodayReply.prototype.setWithdrawCompletion = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetPaymentTodayReply} returns this
 */
proto.mcuc.stark.howard.GetPaymentTodayReply.prototype.clearWithdrawCompletion = function() {
  return this.setWithdrawCompletion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetPaymentTodayReply.prototype.hasWithdrawCompletion = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetProfitRateReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetProfitRateReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetProfitRateReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetProfitRateReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalRevenue: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    totalProfit: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    profitRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetProfitRateReply}
 */
proto.mcuc.stark.howard.GetProfitRateReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetProfitRateReply;
  return proto.mcuc.stark.howard.GetProfitRateReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetProfitRateReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetProfitRateReply}
 */
proto.mcuc.stark.howard.GetProfitRateReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalRevenue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalProfit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProfitRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetProfitRateReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetProfitRateReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetProfitRateReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetProfitRateReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalRevenue();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getTotalProfit();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getProfitRate();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double total_revenue = 1;
 * @return {number}
 */
proto.mcuc.stark.howard.GetProfitRateReply.prototype.getTotalRevenue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.GetProfitRateReply} returns this
 */
proto.mcuc.stark.howard.GetProfitRateReply.prototype.setTotalRevenue = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double total_profit = 2;
 * @return {number}
 */
proto.mcuc.stark.howard.GetProfitRateReply.prototype.getTotalProfit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.GetProfitRateReply} returns this
 */
proto.mcuc.stark.howard.GetProfitRateReply.prototype.setTotalProfit = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double profit_rate = 3;
 * @return {number}
 */
proto.mcuc.stark.howard.GetProfitRateReply.prototype.getProfitRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.GetProfitRateReply} returns this
 */
proto.mcuc.stark.howard.GetProfitRateReply.prototype.setProfitRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.howard.GetAllocationTopUpRateReply.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetAllocationTopUpRateReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetAllocationTopUpRateReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetAllocationTopUpRateReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetAllocationTopUpRateReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalTopup: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    topUpAllocationRateList: jspb.Message.toObjectList(msg.getTopUpAllocationRateList(),
    proto.mcuc.stark.howard.AllocationDetail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetAllocationTopUpRateReply}
 */
proto.mcuc.stark.howard.GetAllocationTopUpRateReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetAllocationTopUpRateReply;
  return proto.mcuc.stark.howard.GetAllocationTopUpRateReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetAllocationTopUpRateReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetAllocationTopUpRateReply}
 */
proto.mcuc.stark.howard.GetAllocationTopUpRateReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalTopup(value);
      break;
    case 2:
      var value = new proto.mcuc.stark.howard.AllocationDetail;
      reader.readMessage(value,proto.mcuc.stark.howard.AllocationDetail.deserializeBinaryFromReader);
      msg.addTopUpAllocationRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetAllocationTopUpRateReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetAllocationTopUpRateReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetAllocationTopUpRateReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetAllocationTopUpRateReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalTopup();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getTopUpAllocationRateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.mcuc.stark.howard.AllocationDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional double total_topup = 1;
 * @return {number}
 */
proto.mcuc.stark.howard.GetAllocationTopUpRateReply.prototype.getTotalTopup = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.GetAllocationTopUpRateReply} returns this
 */
proto.mcuc.stark.howard.GetAllocationTopUpRateReply.prototype.setTotalTopup = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * repeated AllocationDetail top_up_allocation_rate = 2;
 * @return {!Array<!proto.mcuc.stark.howard.AllocationDetail>}
 */
proto.mcuc.stark.howard.GetAllocationTopUpRateReply.prototype.getTopUpAllocationRateList = function() {
  return /** @type{!Array<!proto.mcuc.stark.howard.AllocationDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.howard.AllocationDetail, 2));
};


/**
 * @param {!Array<!proto.mcuc.stark.howard.AllocationDetail>} value
 * @return {!proto.mcuc.stark.howard.GetAllocationTopUpRateReply} returns this
*/
proto.mcuc.stark.howard.GetAllocationTopUpRateReply.prototype.setTopUpAllocationRateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mcuc.stark.howard.AllocationDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.howard.AllocationDetail}
 */
proto.mcuc.stark.howard.GetAllocationTopUpRateReply.prototype.addTopUpAllocationRate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mcuc.stark.howard.AllocationDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.howard.GetAllocationTopUpRateReply} returns this
 */
proto.mcuc.stark.howard.GetAllocationTopUpRateReply.prototype.clearTopUpAllocationRateList = function() {
  return this.setTopUpAllocationRateList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.howard.GetAllocationWithdrawRateReply.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetAllocationWithdrawRateReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetAllocationWithdrawRateReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetAllocationWithdrawRateReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetAllocationWithdrawRateReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalWithdraw: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    withdrawAllocationRateList: jspb.Message.toObjectList(msg.getWithdrawAllocationRateList(),
    proto.mcuc.stark.howard.AllocationDetail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetAllocationWithdrawRateReply}
 */
proto.mcuc.stark.howard.GetAllocationWithdrawRateReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetAllocationWithdrawRateReply;
  return proto.mcuc.stark.howard.GetAllocationWithdrawRateReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetAllocationWithdrawRateReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetAllocationWithdrawRateReply}
 */
proto.mcuc.stark.howard.GetAllocationWithdrawRateReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalWithdraw(value);
      break;
    case 2:
      var value = new proto.mcuc.stark.howard.AllocationDetail;
      reader.readMessage(value,proto.mcuc.stark.howard.AllocationDetail.deserializeBinaryFromReader);
      msg.addWithdrawAllocationRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetAllocationWithdrawRateReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetAllocationWithdrawRateReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetAllocationWithdrawRateReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetAllocationWithdrawRateReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalWithdraw();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getWithdrawAllocationRateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.mcuc.stark.howard.AllocationDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional double total_withdraw = 1;
 * @return {number}
 */
proto.mcuc.stark.howard.GetAllocationWithdrawRateReply.prototype.getTotalWithdraw = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.GetAllocationWithdrawRateReply} returns this
 */
proto.mcuc.stark.howard.GetAllocationWithdrawRateReply.prototype.setTotalWithdraw = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * repeated AllocationDetail withdraw_allocation_rate = 2;
 * @return {!Array<!proto.mcuc.stark.howard.AllocationDetail>}
 */
proto.mcuc.stark.howard.GetAllocationWithdrawRateReply.prototype.getWithdrawAllocationRateList = function() {
  return /** @type{!Array<!proto.mcuc.stark.howard.AllocationDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.howard.AllocationDetail, 2));
};


/**
 * @param {!Array<!proto.mcuc.stark.howard.AllocationDetail>} value
 * @return {!proto.mcuc.stark.howard.GetAllocationWithdrawRateReply} returns this
*/
proto.mcuc.stark.howard.GetAllocationWithdrawRateReply.prototype.setWithdrawAllocationRateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mcuc.stark.howard.AllocationDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.howard.AllocationDetail}
 */
proto.mcuc.stark.howard.GetAllocationWithdrawRateReply.prototype.addWithdrawAllocationRate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mcuc.stark.howard.AllocationDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.howard.GetAllocationWithdrawRateReply} returns this
 */
proto.mcuc.stark.howard.GetAllocationWithdrawRateReply.prototype.clearWithdrawAllocationRateList = function() {
  return this.setWithdrawAllocationRateList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.howard.GetTopPaymentMethodReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetTopPaymentMethodReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetTopPaymentMethodReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetTopPaymentMethodReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetTopPaymentMethodReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    topPaymentMethodRevenueList: jspb.Message.toObjectList(msg.getTopPaymentMethodRevenueList(),
    proto.mcuc.stark.howard.PaymentMethodRevenue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetTopPaymentMethodReply}
 */
proto.mcuc.stark.howard.GetTopPaymentMethodReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetTopPaymentMethodReply;
  return proto.mcuc.stark.howard.GetTopPaymentMethodReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetTopPaymentMethodReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetTopPaymentMethodReply}
 */
proto.mcuc.stark.howard.GetTopPaymentMethodReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.howard.PaymentMethodRevenue;
      reader.readMessage(value,proto.mcuc.stark.howard.PaymentMethodRevenue.deserializeBinaryFromReader);
      msg.addTopPaymentMethodRevenue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetTopPaymentMethodReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetTopPaymentMethodReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetTopPaymentMethodReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetTopPaymentMethodReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopPaymentMethodRevenueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.howard.PaymentMethodRevenue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PaymentMethodRevenue top_payment_method_revenue = 1;
 * @return {!Array<!proto.mcuc.stark.howard.PaymentMethodRevenue>}
 */
proto.mcuc.stark.howard.GetTopPaymentMethodReply.prototype.getTopPaymentMethodRevenueList = function() {
  return /** @type{!Array<!proto.mcuc.stark.howard.PaymentMethodRevenue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.howard.PaymentMethodRevenue, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.howard.PaymentMethodRevenue>} value
 * @return {!proto.mcuc.stark.howard.GetTopPaymentMethodReply} returns this
*/
proto.mcuc.stark.howard.GetTopPaymentMethodReply.prototype.setTopPaymentMethodRevenueList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.howard.PaymentMethodRevenue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.howard.PaymentMethodRevenue}
 */
proto.mcuc.stark.howard.GetTopPaymentMethodReply.prototype.addTopPaymentMethodRevenue = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.howard.PaymentMethodRevenue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.howard.GetTopPaymentMethodReply} returns this
 */
proto.mcuc.stark.howard.GetTopPaymentMethodReply.prototype.clearTopPaymentMethodRevenueList = function() {
  return this.setTopPaymentMethodRevenueList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.howard.GetTopTellerReply.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetTopTellerReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetTopTellerReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetTopTellerReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetTopTellerReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    topTellerRevenueList: jspb.Message.toObjectList(msg.getTopTellerRevenueList(),
    proto.mcuc.stark.howard.TellerRevenue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetTopTellerReply}
 */
proto.mcuc.stark.howard.GetTopTellerReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetTopTellerReply;
  return proto.mcuc.stark.howard.GetTopTellerReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetTopTellerReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetTopTellerReply}
 */
proto.mcuc.stark.howard.GetTopTellerReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.mcuc.stark.howard.TellerRevenue;
      reader.readMessage(value,proto.mcuc.stark.howard.TellerRevenue.deserializeBinaryFromReader);
      msg.addTopTellerRevenue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetTopTellerReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetTopTellerReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetTopTellerReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetTopTellerReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopTellerRevenueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.mcuc.stark.howard.TellerRevenue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TellerRevenue top_teller_revenue = 2;
 * @return {!Array<!proto.mcuc.stark.howard.TellerRevenue>}
 */
proto.mcuc.stark.howard.GetTopTellerReply.prototype.getTopTellerRevenueList = function() {
  return /** @type{!Array<!proto.mcuc.stark.howard.TellerRevenue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.howard.TellerRevenue, 2));
};


/**
 * @param {!Array<!proto.mcuc.stark.howard.TellerRevenue>} value
 * @return {!proto.mcuc.stark.howard.GetTopTellerReply} returns this
*/
proto.mcuc.stark.howard.GetTopTellerReply.prototype.setTopTellerRevenueList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mcuc.stark.howard.TellerRevenue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.howard.TellerRevenue}
 */
proto.mcuc.stark.howard.GetTopTellerReply.prototype.addTopTellerRevenue = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mcuc.stark.howard.TellerRevenue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.howard.GetTopTellerReply} returns this
 */
proto.mcuc.stark.howard.GetTopTellerReply.prototype.clearTopTellerRevenueList = function() {
  return this.setTopTellerRevenueList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.mcuc.stark.howard.SaleReportItem.oneofGroups_ = [[7,8,9,10]];

/**
 * @enum {number}
 */
proto.mcuc.stark.howard.SaleReportItem.KeyCase = {
  KEY_NOT_SET: 0,
  DATE: 7,
  MERCHANT_ID: 8,
  PAYMENT_METHOD: 9,
  TELLER_ID: 10
};

/**
 * @return {proto.mcuc.stark.howard.SaleReportItem.KeyCase}
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.getKeyCase = function() {
  return /** @type {proto.mcuc.stark.howard.SaleReportItem.KeyCase} */(jspb.Message.computeOneofCase(this, proto.mcuc.stark.howard.SaleReportItem.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.SaleReportItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.SaleReportItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.SaleReportItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    average: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    discount: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    revenue: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    date: (f = msg.getDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    merchantId: jspb.Message.getFieldWithDefault(msg, 8, 0),
    paymentMethod: jspb.Message.getFieldWithDefault(msg, 9, 0),
    tellerId: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.SaleReportItem}
 */
proto.mcuc.stark.howard.SaleReportItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.SaleReportItem;
  return proto.mcuc.stark.howard.SaleReportItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.SaleReportItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.SaleReportItem}
 */
proto.mcuc.stark.howard.SaleReportItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQuantity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAverage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDiscount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRevenue(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantId(value);
      break;
    case 9:
      var value = /** @type {!proto.mcuc.stark.MethodType} */ (reader.readEnum());
      msg.setPaymentMethod(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTellerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.SaleReportItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.SaleReportItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.SaleReportItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getAverage();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getDiscount();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getRevenue();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = /** @type {!proto.mcuc.stark.MethodType} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional int64 quantity = 2;
 * @return {number}
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.SaleReportItem} returns this
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double amount = 3;
 * @return {number}
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.SaleReportItem} returns this
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double average = 4;
 * @return {number}
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.getAverage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.SaleReportItem} returns this
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.setAverage = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double discount = 5;
 * @return {number}
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.getDiscount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.SaleReportItem} returns this
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.setDiscount = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double revenue = 6;
 * @return {number}
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.getRevenue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.SaleReportItem} returns this
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.setRevenue = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional google.protobuf.Timestamp date = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.getDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.howard.SaleReportItem} returns this
*/
proto.mcuc.stark.howard.SaleReportItem.prototype.setDate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.mcuc.stark.howard.SaleReportItem.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.SaleReportItem} returns this
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.clearDate = function() {
  return this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.hasDate = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 merchant_id = 8;
 * @return {number}
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.getMerchantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.SaleReportItem} returns this
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.setMerchantId = function(value) {
  return jspb.Message.setOneofField(this, 8, proto.mcuc.stark.howard.SaleReportItem.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mcuc.stark.howard.SaleReportItem} returns this
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.clearMerchantId = function() {
  return jspb.Message.setOneofField(this, 8, proto.mcuc.stark.howard.SaleReportItem.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.hasMerchantId = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional mcuc.stark.MethodType payment_method = 9;
 * @return {!proto.mcuc.stark.MethodType}
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.getPaymentMethod = function() {
  return /** @type {!proto.mcuc.stark.MethodType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.mcuc.stark.MethodType} value
 * @return {!proto.mcuc.stark.howard.SaleReportItem} returns this
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.setPaymentMethod = function(value) {
  return jspb.Message.setOneofField(this, 9, proto.mcuc.stark.howard.SaleReportItem.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mcuc.stark.howard.SaleReportItem} returns this
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.clearPaymentMethod = function() {
  return jspb.Message.setOneofField(this, 9, proto.mcuc.stark.howard.SaleReportItem.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.hasPaymentMethod = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string teller_id = 10;
 * @return {string}
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.getTellerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.howard.SaleReportItem} returns this
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.setTellerId = function(value) {
  return jspb.Message.setOneofField(this, 10, proto.mcuc.stark.howard.SaleReportItem.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mcuc.stark.howard.SaleReportItem} returns this
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.clearTellerId = function() {
  return jspb.Message.setOneofField(this, 10, proto.mcuc.stark.howard.SaleReportItem.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.SaleReportItem.prototype.hasTellerId = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromDate: (f = msg.getFromDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    toDate: (f = msg.getToDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    currency: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timeZone: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest}
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest;
  return proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest}
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFromDate(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setToDate(value);
      break;
    case 3:
      var value = /** @type {!proto.mcuc.stark.Currency} */ (reader.readEnum());
      msg.setCurrency(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeZone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromDate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getToDate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCurrency();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTimeZone();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp from_date = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.prototype.getFromDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest} returns this
*/
proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.prototype.setFromDate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest} returns this
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.prototype.clearFromDate = function() {
  return this.setFromDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.prototype.hasFromDate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp to_date = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.prototype.getToDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest} returns this
*/
proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.prototype.setToDate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest} returns this
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.prototype.clearToDate = function() {
  return this.setToDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.prototype.hasToDate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional mcuc.stark.Currency currency = 3;
 * @return {!proto.mcuc.stark.Currency}
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.prototype.getCurrency = function() {
  return /** @type {!proto.mcuc.stark.Currency} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.mcuc.stark.Currency} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest} returns this
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int32 time_zone = 4;
 * @return {number}
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.prototype.getTimeZone = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest} returns this
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeRequest.prototype.setTimeZone = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeReply.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetSellReportByTimeRangeReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetSellReportByTimeRangeReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    topUpsList: jspb.Message.toObjectList(msg.getTopUpsList(),
    proto.mcuc.stark.howard.SaleReportItem.toObject, includeInstance),
    withdrawsList: jspb.Message.toObjectList(msg.getWithdrawsList(),
    proto.mcuc.stark.howard.SaleReportItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetSellReportByTimeRangeReply}
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetSellReportByTimeRangeReply;
  return proto.mcuc.stark.howard.GetSellReportByTimeRangeReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetSellReportByTimeRangeReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetSellReportByTimeRangeReply}
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.howard.SaleReportItem;
      reader.readMessage(value,proto.mcuc.stark.howard.SaleReportItem.deserializeBinaryFromReader);
      msg.addTopUps(value);
      break;
    case 2:
      var value = new proto.mcuc.stark.howard.SaleReportItem;
      reader.readMessage(value,proto.mcuc.stark.howard.SaleReportItem.deserializeBinaryFromReader);
      msg.addWithdraws(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetSellReportByTimeRangeReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetSellReportByTimeRangeReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopUpsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.howard.SaleReportItem.serializeBinaryToWriter
    );
  }
  f = message.getWithdrawsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.mcuc.stark.howard.SaleReportItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SaleReportItem top_ups = 1;
 * @return {!Array<!proto.mcuc.stark.howard.SaleReportItem>}
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeReply.prototype.getTopUpsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.howard.SaleReportItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.howard.SaleReportItem, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.howard.SaleReportItem>} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByTimeRangeReply} returns this
*/
proto.mcuc.stark.howard.GetSellReportByTimeRangeReply.prototype.setTopUpsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.howard.SaleReportItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.howard.SaleReportItem}
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeReply.prototype.addTopUps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.howard.SaleReportItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.howard.GetSellReportByTimeRangeReply} returns this
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeReply.prototype.clearTopUpsList = function() {
  return this.setTopUpsList([]);
};


/**
 * repeated SaleReportItem withdraws = 2;
 * @return {!Array<!proto.mcuc.stark.howard.SaleReportItem>}
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeReply.prototype.getWithdrawsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.howard.SaleReportItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.howard.SaleReportItem, 2));
};


/**
 * @param {!Array<!proto.mcuc.stark.howard.SaleReportItem>} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByTimeRangeReply} returns this
*/
proto.mcuc.stark.howard.GetSellReportByTimeRangeReply.prototype.setWithdrawsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mcuc.stark.howard.SaleReportItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.howard.SaleReportItem}
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeReply.prototype.addWithdraws = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mcuc.stark.howard.SaleReportItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.howard.GetSellReportByTimeRangeReply} returns this
 */
proto.mcuc.stark.howard.GetSellReportByTimeRangeReply.prototype.clearWithdrawsList = function() {
  return this.setWithdrawsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetSellReportByMerchantRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetSellReportByMerchantRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromDate: (f = msg.getFromDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    toDate: (f = msg.getToDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    currency: jspb.Message.getFieldWithDefault(msg, 3, 0),
    merchantIdsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetSellReportByMerchantRequest}
 */
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetSellReportByMerchantRequest;
  return proto.mcuc.stark.howard.GetSellReportByMerchantRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetSellReportByMerchantRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetSellReportByMerchantRequest}
 */
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFromDate(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setToDate(value);
      break;
    case 3:
      var value = /** @type {!proto.mcuc.stark.Currency} */ (reader.readEnum());
      msg.setCurrency(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setMerchantIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetSellReportByMerchantRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetSellReportByMerchantRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromDate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getToDate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCurrency();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMerchantIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      4,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp from_date = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.prototype.getFromDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByMerchantRequest} returns this
*/
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.prototype.setFromDate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetSellReportByMerchantRequest} returns this
 */
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.prototype.clearFromDate = function() {
  return this.setFromDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.prototype.hasFromDate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp to_date = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.prototype.getToDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByMerchantRequest} returns this
*/
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.prototype.setToDate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetSellReportByMerchantRequest} returns this
 */
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.prototype.clearToDate = function() {
  return this.setToDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.prototype.hasToDate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional mcuc.stark.Currency currency = 3;
 * @return {!proto.mcuc.stark.Currency}
 */
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.prototype.getCurrency = function() {
  return /** @type {!proto.mcuc.stark.Currency} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.mcuc.stark.Currency} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByMerchantRequest} returns this
 */
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated int64 merchant_ids = 4;
 * @return {!Array<number>}
 */
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.prototype.getMerchantIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByMerchantRequest} returns this
 */
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.prototype.setMerchantIdsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.howard.GetSellReportByMerchantRequest} returns this
 */
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.prototype.addMerchantIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.howard.GetSellReportByMerchantRequest} returns this
 */
proto.mcuc.stark.howard.GetSellReportByMerchantRequest.prototype.clearMerchantIdsList = function() {
  return this.setMerchantIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.howard.GetSellReportByMerchantReply.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetSellReportByMerchantReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetSellReportByMerchantReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetSellReportByMerchantReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetSellReportByMerchantReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    topUpsList: jspb.Message.toObjectList(msg.getTopUpsList(),
    proto.mcuc.stark.howard.SaleReportItem.toObject, includeInstance),
    withdrawsList: jspb.Message.toObjectList(msg.getWithdrawsList(),
    proto.mcuc.stark.howard.SaleReportItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetSellReportByMerchantReply}
 */
proto.mcuc.stark.howard.GetSellReportByMerchantReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetSellReportByMerchantReply;
  return proto.mcuc.stark.howard.GetSellReportByMerchantReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetSellReportByMerchantReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetSellReportByMerchantReply}
 */
proto.mcuc.stark.howard.GetSellReportByMerchantReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.howard.SaleReportItem;
      reader.readMessage(value,proto.mcuc.stark.howard.SaleReportItem.deserializeBinaryFromReader);
      msg.addTopUps(value);
      break;
    case 2:
      var value = new proto.mcuc.stark.howard.SaleReportItem;
      reader.readMessage(value,proto.mcuc.stark.howard.SaleReportItem.deserializeBinaryFromReader);
      msg.addWithdraws(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetSellReportByMerchantReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetSellReportByMerchantReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetSellReportByMerchantReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetSellReportByMerchantReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopUpsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.howard.SaleReportItem.serializeBinaryToWriter
    );
  }
  f = message.getWithdrawsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.mcuc.stark.howard.SaleReportItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SaleReportItem top_ups = 1;
 * @return {!Array<!proto.mcuc.stark.howard.SaleReportItem>}
 */
proto.mcuc.stark.howard.GetSellReportByMerchantReply.prototype.getTopUpsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.howard.SaleReportItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.howard.SaleReportItem, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.howard.SaleReportItem>} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByMerchantReply} returns this
*/
proto.mcuc.stark.howard.GetSellReportByMerchantReply.prototype.setTopUpsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.howard.SaleReportItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.howard.SaleReportItem}
 */
proto.mcuc.stark.howard.GetSellReportByMerchantReply.prototype.addTopUps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.howard.SaleReportItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.howard.GetSellReportByMerchantReply} returns this
 */
proto.mcuc.stark.howard.GetSellReportByMerchantReply.prototype.clearTopUpsList = function() {
  return this.setTopUpsList([]);
};


/**
 * repeated SaleReportItem withdraws = 2;
 * @return {!Array<!proto.mcuc.stark.howard.SaleReportItem>}
 */
proto.mcuc.stark.howard.GetSellReportByMerchantReply.prototype.getWithdrawsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.howard.SaleReportItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.howard.SaleReportItem, 2));
};


/**
 * @param {!Array<!proto.mcuc.stark.howard.SaleReportItem>} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByMerchantReply} returns this
*/
proto.mcuc.stark.howard.GetSellReportByMerchantReply.prototype.setWithdrawsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mcuc.stark.howard.SaleReportItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.howard.SaleReportItem}
 */
proto.mcuc.stark.howard.GetSellReportByMerchantReply.prototype.addWithdraws = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mcuc.stark.howard.SaleReportItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.howard.GetSellReportByMerchantReply} returns this
 */
proto.mcuc.stark.howard.GetSellReportByMerchantReply.prototype.clearWithdrawsList = function() {
  return this.setWithdrawsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromDate: (f = msg.getFromDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    toDate: (f = msg.getToDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    currency: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest}
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest;
  return proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest}
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFromDate(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setToDate(value);
      break;
    case 3:
      var value = /** @type {!proto.mcuc.stark.Currency} */ (reader.readEnum());
      msg.setCurrency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromDate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getToDate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCurrency();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp from_date = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest.prototype.getFromDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest} returns this
*/
proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest.prototype.setFromDate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest} returns this
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest.prototype.clearFromDate = function() {
  return this.setFromDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest.prototype.hasFromDate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp to_date = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest.prototype.getToDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest} returns this
*/
proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest.prototype.setToDate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest} returns this
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest.prototype.clearToDate = function() {
  return this.setToDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest.prototype.hasToDate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional mcuc.stark.Currency currency = 3;
 * @return {!proto.mcuc.stark.Currency}
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest.prototype.getCurrency = function() {
  return /** @type {!proto.mcuc.stark.Currency} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.mcuc.stark.Currency} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest} returns this
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodRequest.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    topUpsList: jspb.Message.toObjectList(msg.getTopUpsList(),
    proto.mcuc.stark.howard.SaleReportItem.toObject, includeInstance),
    withdrawsList: jspb.Message.toObjectList(msg.getWithdrawsList(),
    proto.mcuc.stark.howard.SaleReportItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply}
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply;
  return proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply}
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.howard.SaleReportItem;
      reader.readMessage(value,proto.mcuc.stark.howard.SaleReportItem.deserializeBinaryFromReader);
      msg.addTopUps(value);
      break;
    case 2:
      var value = new proto.mcuc.stark.howard.SaleReportItem;
      reader.readMessage(value,proto.mcuc.stark.howard.SaleReportItem.deserializeBinaryFromReader);
      msg.addWithdraws(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopUpsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.howard.SaleReportItem.serializeBinaryToWriter
    );
  }
  f = message.getWithdrawsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.mcuc.stark.howard.SaleReportItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SaleReportItem top_ups = 1;
 * @return {!Array<!proto.mcuc.stark.howard.SaleReportItem>}
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply.prototype.getTopUpsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.howard.SaleReportItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.howard.SaleReportItem, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.howard.SaleReportItem>} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply} returns this
*/
proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply.prototype.setTopUpsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.howard.SaleReportItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.howard.SaleReportItem}
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply.prototype.addTopUps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.howard.SaleReportItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply} returns this
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply.prototype.clearTopUpsList = function() {
  return this.setTopUpsList([]);
};


/**
 * repeated SaleReportItem withdraws = 2;
 * @return {!Array<!proto.mcuc.stark.howard.SaleReportItem>}
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply.prototype.getWithdrawsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.howard.SaleReportItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.howard.SaleReportItem, 2));
};


/**
 * @param {!Array<!proto.mcuc.stark.howard.SaleReportItem>} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply} returns this
*/
proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply.prototype.setWithdrawsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mcuc.stark.howard.SaleReportItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.howard.SaleReportItem}
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply.prototype.addWithdraws = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mcuc.stark.howard.SaleReportItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply} returns this
 */
proto.mcuc.stark.howard.GetSellReportByPaymentMethodReply.prototype.clearWithdrawsList = function() {
  return this.setWithdrawsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetSellReportByTellerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetSellReportByTellerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetSellReportByTellerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetSellReportByTellerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromDate: (f = msg.getFromDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    toDate: (f = msg.getToDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    currency: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetSellReportByTellerRequest}
 */
proto.mcuc.stark.howard.GetSellReportByTellerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetSellReportByTellerRequest;
  return proto.mcuc.stark.howard.GetSellReportByTellerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetSellReportByTellerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetSellReportByTellerRequest}
 */
proto.mcuc.stark.howard.GetSellReportByTellerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFromDate(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setToDate(value);
      break;
    case 3:
      var value = /** @type {!proto.mcuc.stark.Currency} */ (reader.readEnum());
      msg.setCurrency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetSellReportByTellerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetSellReportByTellerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetSellReportByTellerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetSellReportByTellerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromDate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getToDate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCurrency();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp from_date = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.howard.GetSellReportByTellerRequest.prototype.getFromDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByTellerRequest} returns this
*/
proto.mcuc.stark.howard.GetSellReportByTellerRequest.prototype.setFromDate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetSellReportByTellerRequest} returns this
 */
proto.mcuc.stark.howard.GetSellReportByTellerRequest.prototype.clearFromDate = function() {
  return this.setFromDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetSellReportByTellerRequest.prototype.hasFromDate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp to_date = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.howard.GetSellReportByTellerRequest.prototype.getToDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByTellerRequest} returns this
*/
proto.mcuc.stark.howard.GetSellReportByTellerRequest.prototype.setToDate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.howard.GetSellReportByTellerRequest} returns this
 */
proto.mcuc.stark.howard.GetSellReportByTellerRequest.prototype.clearToDate = function() {
  return this.setToDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.howard.GetSellReportByTellerRequest.prototype.hasToDate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional mcuc.stark.Currency currency = 3;
 * @return {!proto.mcuc.stark.Currency}
 */
proto.mcuc.stark.howard.GetSellReportByTellerRequest.prototype.getCurrency = function() {
  return /** @type {!proto.mcuc.stark.Currency} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.mcuc.stark.Currency} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByTellerRequest} returns this
 */
proto.mcuc.stark.howard.GetSellReportByTellerRequest.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.howard.GetSellReportByTellerReply.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.howard.GetSellReportByTellerReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.howard.GetSellReportByTellerReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.howard.GetSellReportByTellerReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetSellReportByTellerReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    topUpsList: jspb.Message.toObjectList(msg.getTopUpsList(),
    proto.mcuc.stark.howard.SaleReportItem.toObject, includeInstance),
    withdrawsList: jspb.Message.toObjectList(msg.getWithdrawsList(),
    proto.mcuc.stark.howard.SaleReportItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.howard.GetSellReportByTellerReply}
 */
proto.mcuc.stark.howard.GetSellReportByTellerReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.howard.GetSellReportByTellerReply;
  return proto.mcuc.stark.howard.GetSellReportByTellerReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.howard.GetSellReportByTellerReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.howard.GetSellReportByTellerReply}
 */
proto.mcuc.stark.howard.GetSellReportByTellerReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.howard.SaleReportItem;
      reader.readMessage(value,proto.mcuc.stark.howard.SaleReportItem.deserializeBinaryFromReader);
      msg.addTopUps(value);
      break;
    case 2:
      var value = new proto.mcuc.stark.howard.SaleReportItem;
      reader.readMessage(value,proto.mcuc.stark.howard.SaleReportItem.deserializeBinaryFromReader);
      msg.addWithdraws(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.howard.GetSellReportByTellerReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.howard.GetSellReportByTellerReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.howard.GetSellReportByTellerReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.howard.GetSellReportByTellerReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopUpsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.howard.SaleReportItem.serializeBinaryToWriter
    );
  }
  f = message.getWithdrawsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.mcuc.stark.howard.SaleReportItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SaleReportItem top_ups = 1;
 * @return {!Array<!proto.mcuc.stark.howard.SaleReportItem>}
 */
proto.mcuc.stark.howard.GetSellReportByTellerReply.prototype.getTopUpsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.howard.SaleReportItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.howard.SaleReportItem, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.howard.SaleReportItem>} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByTellerReply} returns this
*/
proto.mcuc.stark.howard.GetSellReportByTellerReply.prototype.setTopUpsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.howard.SaleReportItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.howard.SaleReportItem}
 */
proto.mcuc.stark.howard.GetSellReportByTellerReply.prototype.addTopUps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.howard.SaleReportItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.howard.GetSellReportByTellerReply} returns this
 */
proto.mcuc.stark.howard.GetSellReportByTellerReply.prototype.clearTopUpsList = function() {
  return this.setTopUpsList([]);
};


/**
 * repeated SaleReportItem withdraws = 2;
 * @return {!Array<!proto.mcuc.stark.howard.SaleReportItem>}
 */
proto.mcuc.stark.howard.GetSellReportByTellerReply.prototype.getWithdrawsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.howard.SaleReportItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.howard.SaleReportItem, 2));
};


/**
 * @param {!Array<!proto.mcuc.stark.howard.SaleReportItem>} value
 * @return {!proto.mcuc.stark.howard.GetSellReportByTellerReply} returns this
*/
proto.mcuc.stark.howard.GetSellReportByTellerReply.prototype.setWithdrawsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mcuc.stark.howard.SaleReportItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.howard.SaleReportItem}
 */
proto.mcuc.stark.howard.GetSellReportByTellerReply.prototype.addWithdraws = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mcuc.stark.howard.SaleReportItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.howard.GetSellReportByTellerReply} returns this
 */
proto.mcuc.stark.howard.GetSellReportByTellerReply.prototype.clearWithdrawsList = function() {
  return this.setWithdrawsList([]);
};


/**
 * @enum {number}
 */
proto.mcuc.stark.howard.StatisticFilterType = {
  STATISTIC_FILTER_UNSPECIFIED: 0,
  STATISTIC_FILTER_DAILY: 1,
  STATISTIC_FILTER_WEEKLY: 2,
  STATISTIC_FILTER_MONTHLY: 3
};

goog.object.extend(exports, proto.mcuc.stark.howard);
