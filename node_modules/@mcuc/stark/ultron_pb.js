// source: stark/ultron.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.mcuc.stark.ultron.ApproveCryptoTopUpReply', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.ApproveCryptoWithdrawReply', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.CallbackTransactionReply', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.CallbackTransactionRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.CancelCryptoTopUpReply', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.CancelCryptoTopUpRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.CancelCryptoWithdrawReply', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.CreateCryptoWithdrawReply', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.CryptoHotWalletStatus', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.CryptoNetworkType', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.CryptoPaymentDetail', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.CryptoType', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.CryptoWallet', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.CryptoWalletName', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.CryptoWalletStatus', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.GetCryptoSettingsReply', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.GetCryptoSettingsRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.GetCryptoWalletReply', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.GetCryptoWalletRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.ImportCryptoHotWalletsReply', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.ImportCryptoWalletsReply', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.ImportCryptoWalletsRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.ListCryptoHotWalletsReply', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.ListCryptoWalletsReply', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.ListCryptoWalletsRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.LoadCryptoWalletsReply', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.LoadCryptoWalletsRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.RejectCryptoTopUpReply', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.RejectCryptoTopUpRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.RejectCryptoWithdrawReply', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.SubmitCryptoWithdrawReply', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.SystemCryptoHotWallet', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.ValidateCryptoWalletsReply', null, global);
goog.exportSymbol('proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.displayName = 'proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.CreateCryptoWithdrawReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.CreateCryptoWithdrawReply.displayName = 'proto.mcuc.stark.ultron.CreateCryptoWithdrawReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest.displayName = 'proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.CancelCryptoWithdrawReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.CancelCryptoWithdrawReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.CancelCryptoWithdrawReply.displayName = 'proto.mcuc.stark.ultron.CancelCryptoWithdrawReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.CancelCryptoTopUpRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.CancelCryptoTopUpRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.CancelCryptoTopUpRequest.displayName = 'proto.mcuc.stark.ultron.CancelCryptoTopUpRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.CancelCryptoTopUpReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.CancelCryptoTopUpReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.CancelCryptoTopUpReply.displayName = 'proto.mcuc.stark.ultron.CancelCryptoTopUpReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest.displayName = 'proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.ApproveCryptoWithdrawReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.ApproveCryptoWithdrawReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.ApproveCryptoWithdrawReply.displayName = 'proto.mcuc.stark.ultron.ApproveCryptoWithdrawReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.displayName = 'proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.SubmitCryptoWithdrawReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.SubmitCryptoWithdrawReply.displayName = 'proto.mcuc.stark.ultron.SubmitCryptoWithdrawReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest.displayName = 'proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.RejectCryptoWithdrawReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.RejectCryptoWithdrawReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.RejectCryptoWithdrawReply.displayName = 'proto.mcuc.stark.ultron.RejectCryptoWithdrawReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest.displayName = 'proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.ApproveCryptoTopUpReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.ApproveCryptoTopUpReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.ApproveCryptoTopUpReply.displayName = 'proto.mcuc.stark.ultron.ApproveCryptoTopUpReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.RejectCryptoTopUpRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.RejectCryptoTopUpRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.RejectCryptoTopUpRequest.displayName = 'proto.mcuc.stark.ultron.RejectCryptoTopUpRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.RejectCryptoTopUpReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.RejectCryptoTopUpReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.RejectCryptoTopUpReply.displayName = 'proto.mcuc.stark.ultron.RejectCryptoTopUpReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.GetCryptoWalletRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.GetCryptoWalletRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.GetCryptoWalletRequest.displayName = 'proto.mcuc.stark.ultron.GetCryptoWalletRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.GetCryptoWalletReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.GetCryptoWalletReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.GetCryptoWalletReply.displayName = 'proto.mcuc.stark.ultron.GetCryptoWalletReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.LoadCryptoWalletsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.LoadCryptoWalletsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.LoadCryptoWalletsRequest.displayName = 'proto.mcuc.stark.ultron.LoadCryptoWalletsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.LoadCryptoWalletsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.LoadCryptoWalletsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.LoadCryptoWalletsReply.displayName = 'proto.mcuc.stark.ultron.LoadCryptoWalletsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest.displayName = 'proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.ultron.ValidateCryptoWalletsReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.ultron.ValidateCryptoWalletsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.ValidateCryptoWalletsReply.displayName = 'proto.mcuc.stark.ultron.ValidateCryptoWalletsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.ultron.ImportCryptoWalletsRequest.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.ultron.ImportCryptoWalletsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.ImportCryptoWalletsRequest.displayName = 'proto.mcuc.stark.ultron.ImportCryptoWalletsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.ultron.ImportCryptoWalletsReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.ultron.ImportCryptoWalletsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.ImportCryptoWalletsReply.displayName = 'proto.mcuc.stark.ultron.ImportCryptoWalletsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.ultron.ListCryptoWalletsRequest.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.ultron.ListCryptoWalletsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.ListCryptoWalletsRequest.displayName = 'proto.mcuc.stark.ultron.ListCryptoWalletsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.ListCryptoWalletsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.ultron.ListCryptoWalletsReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.ultron.ListCryptoWalletsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.ListCryptoWalletsReply.displayName = 'proto.mcuc.stark.ultron.ListCryptoWalletsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest.displayName = 'proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.displayName = 'proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest.displayName = 'proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.ImportCryptoHotWalletsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.ImportCryptoHotWalletsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.ImportCryptoHotWalletsReply.displayName = 'proto.mcuc.stark.ultron.ImportCryptoHotWalletsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.displayName = 'proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.ultron.ListCryptoHotWalletsReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.ultron.ListCryptoHotWalletsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.ListCryptoHotWalletsReply.displayName = 'proto.mcuc.stark.ultron.ListCryptoHotWalletsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest.displayName = 'proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply.displayName = 'proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.SystemCryptoHotWallet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.SystemCryptoHotWallet.displayName = 'proto.mcuc.stark.ultron.SystemCryptoHotWallet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.CallbackTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.CallbackTransactionRequest.displayName = 'proto.mcuc.stark.ultron.CallbackTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.CallbackTransactionReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.CallbackTransactionReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.CallbackTransactionReply.displayName = 'proto.mcuc.stark.ultron.CallbackTransactionReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.CryptoWallet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.CryptoWallet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.CryptoWallet.displayName = 'proto.mcuc.stark.ultron.CryptoWallet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.CryptoPaymentDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.CryptoPaymentDetail.displayName = 'proto.mcuc.stark.ultron.CryptoPaymentDetail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest.displayName = 'proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply.displayName = 'proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.GetCryptoSettingsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.GetCryptoSettingsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.GetCryptoSettingsRequest.displayName = 'proto.mcuc.stark.ultron.GetCryptoSettingsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.ultron.GetCryptoSettingsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.ultron.GetCryptoSettingsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.ultron.GetCryptoSettingsReply.displayName = 'proto.mcuc.stark.ultron.GetCryptoSettingsReply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cryptoWalletName: jspb.Message.getFieldWithDefault(msg, 1, 0),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    cryptoType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cryptoNetworkType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    amountReference: jspb.Message.getFieldWithDefault(msg, 6, 0),
    merchantUserId: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest}
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest;
  return proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest}
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mcuc.stark.ultron.CryptoWalletName} */ (reader.readEnum());
      msg.setCryptoWalletName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {!proto.mcuc.stark.ultron.CryptoType} */ (reader.readEnum());
      msg.setCryptoType(value);
      break;
    case 4:
      var value = /** @type {!proto.mcuc.stark.ultron.CryptoNetworkType} */ (reader.readEnum());
      msg.setCryptoNetworkType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountReference(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCryptoWalletName();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCryptoType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getCryptoNetworkType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getAmountReference();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getMerchantUserId();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional CryptoWalletName crypto_wallet_name = 1;
 * @return {!proto.mcuc.stark.ultron.CryptoWalletName}
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.prototype.getCryptoWalletName = function() {
  return /** @type {!proto.mcuc.stark.ultron.CryptoWalletName} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoWalletName} value
 * @return {!proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.prototype.setCryptoWalletName = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional CryptoType crypto_type = 3;
 * @return {!proto.mcuc.stark.ultron.CryptoType}
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.prototype.getCryptoType = function() {
  return /** @type {!proto.mcuc.stark.ultron.CryptoType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoType} value
 * @return {!proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.prototype.setCryptoType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional CryptoNetworkType crypto_network_type = 4;
 * @return {!proto.mcuc.stark.ultron.CryptoNetworkType}
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.prototype.getCryptoNetworkType = function() {
  return /** @type {!proto.mcuc.stark.ultron.CryptoNetworkType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoNetworkType} value
 * @return {!proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.prototype.setCryptoNetworkType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional double amount = 5;
 * @return {number}
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional uint64 amount_reference = 6;
 * @return {number}
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.prototype.getAmountReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.prototype.setAmountReference = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 merchant_user_id = 7;
 * @return {number}
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.prototype.getMerchantUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawRequest.prototype.setMerchantUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.CreateCryptoWithdrawReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.CreateCryptoWithdrawReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.CreateCryptoWithdrawReply}
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.CreateCryptoWithdrawReply;
  return proto.mcuc.stark.ultron.CreateCryptoWithdrawReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.CreateCryptoWithdrawReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.CreateCryptoWithdrawReply}
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.CreateCryptoWithdrawReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.CreateCryptoWithdrawReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawReply.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.CreateCryptoWithdrawReply} returns this
 */
proto.mcuc.stark.ultron.CreateCryptoWithdrawReply.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    note: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest}
 */
proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest;
  return proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest}
 */
proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string note = 2;
 * @return {string}
 */
proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.CancelCryptoWithdrawRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.CancelCryptoWithdrawReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.CancelCryptoWithdrawReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.CancelCryptoWithdrawReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.CancelCryptoWithdrawReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.CancelCryptoWithdrawReply}
 */
proto.mcuc.stark.ultron.CancelCryptoWithdrawReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.CancelCryptoWithdrawReply;
  return proto.mcuc.stark.ultron.CancelCryptoWithdrawReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.CancelCryptoWithdrawReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.CancelCryptoWithdrawReply}
 */
proto.mcuc.stark.ultron.CancelCryptoWithdrawReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.CancelCryptoWithdrawReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.CancelCryptoWithdrawReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.CancelCryptoWithdrawReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.CancelCryptoWithdrawReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.CancelCryptoTopUpRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.CancelCryptoTopUpRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.CancelCryptoTopUpRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.CancelCryptoTopUpRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    note: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.CancelCryptoTopUpRequest}
 */
proto.mcuc.stark.ultron.CancelCryptoTopUpRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.CancelCryptoTopUpRequest;
  return proto.mcuc.stark.ultron.CancelCryptoTopUpRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.CancelCryptoTopUpRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.CancelCryptoTopUpRequest}
 */
proto.mcuc.stark.ultron.CancelCryptoTopUpRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.CancelCryptoTopUpRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.CancelCryptoTopUpRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.CancelCryptoTopUpRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.CancelCryptoTopUpRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.ultron.CancelCryptoTopUpRequest.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.CancelCryptoTopUpRequest} returns this
 */
proto.mcuc.stark.ultron.CancelCryptoTopUpRequest.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string note = 2;
 * @return {string}
 */
proto.mcuc.stark.ultron.CancelCryptoTopUpRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.CancelCryptoTopUpRequest} returns this
 */
proto.mcuc.stark.ultron.CancelCryptoTopUpRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.CancelCryptoTopUpReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.CancelCryptoTopUpReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.CancelCryptoTopUpReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.CancelCryptoTopUpReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.CancelCryptoTopUpReply}
 */
proto.mcuc.stark.ultron.CancelCryptoTopUpReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.CancelCryptoTopUpReply;
  return proto.mcuc.stark.ultron.CancelCryptoTopUpReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.CancelCryptoTopUpReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.CancelCryptoTopUpReply}
 */
proto.mcuc.stark.ultron.CancelCryptoTopUpReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.CancelCryptoTopUpReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.CancelCryptoTopUpReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.CancelCryptoTopUpReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.CancelCryptoTopUpReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    note: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest}
 */
proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest;
  return proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest}
 */
proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string note = 2;
 * @return {string}
 */
proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.ApproveCryptoWithdrawRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.ApproveCryptoWithdrawReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.ApproveCryptoWithdrawReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.ApproveCryptoWithdrawReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ApproveCryptoWithdrawReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.ApproveCryptoWithdrawReply}
 */
proto.mcuc.stark.ultron.ApproveCryptoWithdrawReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.ApproveCryptoWithdrawReply;
  return proto.mcuc.stark.ultron.ApproveCryptoWithdrawReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.ApproveCryptoWithdrawReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.ApproveCryptoWithdrawReply}
 */
proto.mcuc.stark.ultron.ApproveCryptoWithdrawReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.ApproveCryptoWithdrawReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.ApproveCryptoWithdrawReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.ApproveCryptoWithdrawReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ApproveCryptoWithdrawReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    senderAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    fee: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    txHash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    imageUrl: jspb.Message.getFieldWithDefault(msg, 6, ""),
    note: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest}
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest;
  return proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest}
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFee(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageUrl(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSenderAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getFee();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getImageUrl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string sender_address = 2;
 * @return {string}
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.prototype.getSenderAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.prototype.setSenderAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional double amount = 3;
 * @return {number}
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double fee = 4;
 * @return {number}
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.prototype.setFee = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional string tx_hash = 5;
 * @return {string}
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.prototype.setTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string image_url = 6;
 * @return {string}
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.prototype.getImageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.prototype.setImageUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string note = 7;
 * @return {string}
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.SubmitCryptoWithdrawReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.SubmitCryptoWithdrawReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.SubmitCryptoWithdrawReply}
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.SubmitCryptoWithdrawReply;
  return proto.mcuc.stark.ultron.SubmitCryptoWithdrawReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.SubmitCryptoWithdrawReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.SubmitCryptoWithdrawReply}
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.SubmitCryptoWithdrawReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.SubmitCryptoWithdrawReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.SubmitCryptoWithdrawReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    note: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isMerchantCall: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest}
 */
proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest;
  return proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest}
 */
proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMerchantCall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsMerchantCall();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string note = 2;
 * @return {string}
 */
proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool is_merchant_call = 3;
 * @return {boolean}
 */
proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest.prototype.getIsMerchantCall = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.RejectCryptoWithdrawRequest.prototype.setIsMerchantCall = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.RejectCryptoWithdrawReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.RejectCryptoWithdrawReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.RejectCryptoWithdrawReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.RejectCryptoWithdrawReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.RejectCryptoWithdrawReply}
 */
proto.mcuc.stark.ultron.RejectCryptoWithdrawReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.RejectCryptoWithdrawReply;
  return proto.mcuc.stark.ultron.RejectCryptoWithdrawReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.RejectCryptoWithdrawReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.RejectCryptoWithdrawReply}
 */
proto.mcuc.stark.ultron.RejectCryptoWithdrawReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.RejectCryptoWithdrawReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.RejectCryptoWithdrawReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.RejectCryptoWithdrawReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.RejectCryptoWithdrawReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    note: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest}
 */
proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest;
  return proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest}
 */
proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest} returns this
 */
proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string note = 2;
 * @return {string}
 */
proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest} returns this
 */
proto.mcuc.stark.ultron.ApproveCryptoTopUpRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.ApproveCryptoTopUpReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.ApproveCryptoTopUpReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.ApproveCryptoTopUpReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ApproveCryptoTopUpReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.ApproveCryptoTopUpReply}
 */
proto.mcuc.stark.ultron.ApproveCryptoTopUpReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.ApproveCryptoTopUpReply;
  return proto.mcuc.stark.ultron.ApproveCryptoTopUpReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.ApproveCryptoTopUpReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.ApproveCryptoTopUpReply}
 */
proto.mcuc.stark.ultron.ApproveCryptoTopUpReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.ApproveCryptoTopUpReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.ApproveCryptoTopUpReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.ApproveCryptoTopUpReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ApproveCryptoTopUpReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.RejectCryptoTopUpRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.RejectCryptoTopUpRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.RejectCryptoTopUpRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.RejectCryptoTopUpRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    note: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isMerchantCall: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.RejectCryptoTopUpRequest}
 */
proto.mcuc.stark.ultron.RejectCryptoTopUpRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.RejectCryptoTopUpRequest;
  return proto.mcuc.stark.ultron.RejectCryptoTopUpRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.RejectCryptoTopUpRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.RejectCryptoTopUpRequest}
 */
proto.mcuc.stark.ultron.RejectCryptoTopUpRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaymentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMerchantCall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.RejectCryptoTopUpRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.RejectCryptoTopUpRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.RejectCryptoTopUpRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.RejectCryptoTopUpRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsMerchantCall();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int64 payment_id = 1;
 * @return {number}
 */
proto.mcuc.stark.ultron.RejectCryptoTopUpRequest.prototype.getPaymentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.RejectCryptoTopUpRequest} returns this
 */
proto.mcuc.stark.ultron.RejectCryptoTopUpRequest.prototype.setPaymentId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string note = 2;
 * @return {string}
 */
proto.mcuc.stark.ultron.RejectCryptoTopUpRequest.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.RejectCryptoTopUpRequest} returns this
 */
proto.mcuc.stark.ultron.RejectCryptoTopUpRequest.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool is_merchant_call = 3;
 * @return {boolean}
 */
proto.mcuc.stark.ultron.RejectCryptoTopUpRequest.prototype.getIsMerchantCall = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mcuc.stark.ultron.RejectCryptoTopUpRequest} returns this
 */
proto.mcuc.stark.ultron.RejectCryptoTopUpRequest.prototype.setIsMerchantCall = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.RejectCryptoTopUpReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.RejectCryptoTopUpReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.RejectCryptoTopUpReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.RejectCryptoTopUpReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.RejectCryptoTopUpReply}
 */
proto.mcuc.stark.ultron.RejectCryptoTopUpReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.RejectCryptoTopUpReply;
  return proto.mcuc.stark.ultron.RejectCryptoTopUpReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.RejectCryptoTopUpReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.RejectCryptoTopUpReply}
 */
proto.mcuc.stark.ultron.RejectCryptoTopUpReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.RejectCryptoTopUpReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.RejectCryptoTopUpReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.RejectCryptoTopUpReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.RejectCryptoTopUpReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.GetCryptoWalletRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.GetCryptoWalletRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.GetCryptoWalletRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.GetCryptoWalletRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cryptoType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cryptoNetworkType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    merchantUserId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.GetCryptoWalletRequest}
 */
proto.mcuc.stark.ultron.GetCryptoWalletRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.GetCryptoWalletRequest;
  return proto.mcuc.stark.ultron.GetCryptoWalletRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.GetCryptoWalletRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.GetCryptoWalletRequest}
 */
proto.mcuc.stark.ultron.GetCryptoWalletRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mcuc.stark.ultron.CryptoType} */ (reader.readEnum());
      msg.setCryptoType(value);
      break;
    case 2:
      var value = /** @type {!proto.mcuc.stark.ultron.CryptoNetworkType} */ (reader.readEnum());
      msg.setCryptoNetworkType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.GetCryptoWalletRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.GetCryptoWalletRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.GetCryptoWalletRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.GetCryptoWalletRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCryptoType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCryptoNetworkType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMerchantUserId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional CryptoType crypto_type = 1;
 * @return {!proto.mcuc.stark.ultron.CryptoType}
 */
proto.mcuc.stark.ultron.GetCryptoWalletRequest.prototype.getCryptoType = function() {
  return /** @type {!proto.mcuc.stark.ultron.CryptoType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoType} value
 * @return {!proto.mcuc.stark.ultron.GetCryptoWalletRequest} returns this
 */
proto.mcuc.stark.ultron.GetCryptoWalletRequest.prototype.setCryptoType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CryptoNetworkType crypto_network_type = 2;
 * @return {!proto.mcuc.stark.ultron.CryptoNetworkType}
 */
proto.mcuc.stark.ultron.GetCryptoWalletRequest.prototype.getCryptoNetworkType = function() {
  return /** @type {!proto.mcuc.stark.ultron.CryptoNetworkType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoNetworkType} value
 * @return {!proto.mcuc.stark.ultron.GetCryptoWalletRequest} returns this
 */
proto.mcuc.stark.ultron.GetCryptoWalletRequest.prototype.setCryptoNetworkType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 merchant_user_id = 3;
 * @return {number}
 */
proto.mcuc.stark.ultron.GetCryptoWalletRequest.prototype.getMerchantUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.GetCryptoWalletRequest} returns this
 */
proto.mcuc.stark.ultron.GetCryptoWalletRequest.prototype.setMerchantUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.GetCryptoWalletReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.GetCryptoWalletReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.GetCryptoWalletReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.GetCryptoWalletReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.GetCryptoWalletReply}
 */
proto.mcuc.stark.ultron.GetCryptoWalletReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.GetCryptoWalletReply;
  return proto.mcuc.stark.ultron.GetCryptoWalletReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.GetCryptoWalletReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.GetCryptoWalletReply}
 */
proto.mcuc.stark.ultron.GetCryptoWalletReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.GetCryptoWalletReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.GetCryptoWalletReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.GetCryptoWalletReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.GetCryptoWalletReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.mcuc.stark.ultron.GetCryptoWalletReply.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.GetCryptoWalletReply} returns this
 */
proto.mcuc.stark.ultron.GetCryptoWalletReply.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.LoadCryptoWalletsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.LoadCryptoWalletsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.LoadCryptoWalletsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.LoadCryptoWalletsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cryptoType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cryptoNetworkType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.LoadCryptoWalletsRequest}
 */
proto.mcuc.stark.ultron.LoadCryptoWalletsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.LoadCryptoWalletsRequest;
  return proto.mcuc.stark.ultron.LoadCryptoWalletsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.LoadCryptoWalletsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.LoadCryptoWalletsRequest}
 */
proto.mcuc.stark.ultron.LoadCryptoWalletsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mcuc.stark.ultron.CryptoType} */ (reader.readEnum());
      msg.setCryptoType(value);
      break;
    case 2:
      var value = /** @type {!proto.mcuc.stark.ultron.CryptoNetworkType} */ (reader.readEnum());
      msg.setCryptoNetworkType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.LoadCryptoWalletsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.LoadCryptoWalletsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.LoadCryptoWalletsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.LoadCryptoWalletsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCryptoType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCryptoNetworkType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional CryptoType crypto_type = 1;
 * @return {!proto.mcuc.stark.ultron.CryptoType}
 */
proto.mcuc.stark.ultron.LoadCryptoWalletsRequest.prototype.getCryptoType = function() {
  return /** @type {!proto.mcuc.stark.ultron.CryptoType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoType} value
 * @return {!proto.mcuc.stark.ultron.LoadCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.LoadCryptoWalletsRequest.prototype.setCryptoType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CryptoNetworkType crypto_network_type = 2;
 * @return {!proto.mcuc.stark.ultron.CryptoNetworkType}
 */
proto.mcuc.stark.ultron.LoadCryptoWalletsRequest.prototype.getCryptoNetworkType = function() {
  return /** @type {!proto.mcuc.stark.ultron.CryptoNetworkType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoNetworkType} value
 * @return {!proto.mcuc.stark.ultron.LoadCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.LoadCryptoWalletsRequest.prototype.setCryptoNetworkType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.LoadCryptoWalletsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.LoadCryptoWalletsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.LoadCryptoWalletsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.LoadCryptoWalletsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.LoadCryptoWalletsReply}
 */
proto.mcuc.stark.ultron.LoadCryptoWalletsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.LoadCryptoWalletsReply;
  return proto.mcuc.stark.ultron.LoadCryptoWalletsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.LoadCryptoWalletsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.LoadCryptoWalletsReply}
 */
proto.mcuc.stark.ultron.LoadCryptoWalletsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.LoadCryptoWalletsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.LoadCryptoWalletsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.LoadCryptoWalletsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.LoadCryptoWalletsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string data = 1;
 * @return {string}
 */
proto.mcuc.stark.ultron.LoadCryptoWalletsReply.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.LoadCryptoWalletsReply} returns this
 */
proto.mcuc.stark.ultron.LoadCryptoWalletsReply.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.mcuc.stark.ultron.CryptoWallet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest}
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest;
  return proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest}
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.ultron.CryptoWallet;
      reader.readMessage(value,proto.mcuc.stark.ultron.CryptoWallet.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.ultron.CryptoWallet.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CryptoWallet records = 1;
 * @return {!Array<!proto.mcuc.stark.ultron.CryptoWallet>}
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.ultron.CryptoWallet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.ultron.CryptoWallet, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.CryptoWallet>} value
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest} returns this
*/
proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest.prototype.setRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoWallet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.CryptoWallet}
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.ultron.CryptoWallet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsRequest.prototype.clearRecordsList = function() {
  return this.setRecordsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsReply.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.ValidateCryptoWalletsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.ValidateCryptoWalletsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    validRecordsList: jspb.Message.toObjectList(msg.getValidRecordsList(),
    proto.mcuc.stark.ultron.CryptoWallet.toObject, includeInstance),
    duplicatedRecordsList: jspb.Message.toObjectList(msg.getDuplicatedRecordsList(),
    proto.mcuc.stark.ultron.CryptoWallet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoWalletsReply}
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.ValidateCryptoWalletsReply;
  return proto.mcuc.stark.ultron.ValidateCryptoWalletsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.ValidateCryptoWalletsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoWalletsReply}
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.ultron.CryptoWallet;
      reader.readMessage(value,proto.mcuc.stark.ultron.CryptoWallet.deserializeBinaryFromReader);
      msg.addValidRecords(value);
      break;
    case 2:
      var value = new proto.mcuc.stark.ultron.CryptoWallet;
      reader.readMessage(value,proto.mcuc.stark.ultron.CryptoWallet.deserializeBinaryFromReader);
      msg.addDuplicatedRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.ValidateCryptoWalletsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.ValidateCryptoWalletsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.ultron.CryptoWallet.serializeBinaryToWriter
    );
  }
  f = message.getDuplicatedRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.mcuc.stark.ultron.CryptoWallet.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CryptoWallet valid_records = 1;
 * @return {!Array<!proto.mcuc.stark.ultron.CryptoWallet>}
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsReply.prototype.getValidRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.ultron.CryptoWallet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.ultron.CryptoWallet, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.CryptoWallet>} value
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoWalletsReply} returns this
*/
proto.mcuc.stark.ultron.ValidateCryptoWalletsReply.prototype.setValidRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoWallet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.CryptoWallet}
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsReply.prototype.addValidRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.ultron.CryptoWallet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoWalletsReply} returns this
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsReply.prototype.clearValidRecordsList = function() {
  return this.setValidRecordsList([]);
};


/**
 * repeated CryptoWallet duplicated_records = 2;
 * @return {!Array<!proto.mcuc.stark.ultron.CryptoWallet>}
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsReply.prototype.getDuplicatedRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.ultron.CryptoWallet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.ultron.CryptoWallet, 2));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.CryptoWallet>} value
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoWalletsReply} returns this
*/
proto.mcuc.stark.ultron.ValidateCryptoWalletsReply.prototype.setDuplicatedRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoWallet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.CryptoWallet}
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsReply.prototype.addDuplicatedRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mcuc.stark.ultron.CryptoWallet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoWalletsReply} returns this
 */
proto.mcuc.stark.ultron.ValidateCryptoWalletsReply.prototype.clearDuplicatedRecordsList = function() {
  return this.setDuplicatedRecordsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.ImportCryptoWalletsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.ImportCryptoWalletsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    walletsList: jspb.Message.toObjectList(msg.getWalletsList(),
    proto.mcuc.stark.ultron.CryptoWallet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.ImportCryptoWalletsRequest}
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.ImportCryptoWalletsRequest;
  return proto.mcuc.stark.ultron.ImportCryptoWalletsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.ImportCryptoWalletsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.ImportCryptoWalletsRequest}
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.ultron.CryptoWallet;
      reader.readMessage(value,proto.mcuc.stark.ultron.CryptoWallet.deserializeBinaryFromReader);
      msg.addWallets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.ImportCryptoWalletsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.ImportCryptoWalletsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWalletsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.ultron.CryptoWallet.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CryptoWallet wallets = 1;
 * @return {!Array<!proto.mcuc.stark.ultron.CryptoWallet>}
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsRequest.prototype.getWalletsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.ultron.CryptoWallet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.ultron.CryptoWallet, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.CryptoWallet>} value
 * @return {!proto.mcuc.stark.ultron.ImportCryptoWalletsRequest} returns this
*/
proto.mcuc.stark.ultron.ImportCryptoWalletsRequest.prototype.setWalletsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoWallet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.CryptoWallet}
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsRequest.prototype.addWallets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.ultron.CryptoWallet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ImportCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsRequest.prototype.clearWalletsList = function() {
  return this.setWalletsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.ImportCryptoWalletsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.ImportCryptoWalletsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    walletsList: jspb.Message.toObjectList(msg.getWalletsList(),
    proto.mcuc.stark.ultron.CryptoWallet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.ImportCryptoWalletsReply}
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.ImportCryptoWalletsReply;
  return proto.mcuc.stark.ultron.ImportCryptoWalletsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.ImportCryptoWalletsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.ImportCryptoWalletsReply}
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.ultron.CryptoWallet;
      reader.readMessage(value,proto.mcuc.stark.ultron.CryptoWallet.deserializeBinaryFromReader);
      msg.addWallets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.ImportCryptoWalletsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.ImportCryptoWalletsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWalletsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.ultron.CryptoWallet.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CryptoWallet wallets = 1;
 * @return {!Array<!proto.mcuc.stark.ultron.CryptoWallet>}
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsReply.prototype.getWalletsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.ultron.CryptoWallet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.ultron.CryptoWallet, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.CryptoWallet>} value
 * @return {!proto.mcuc.stark.ultron.ImportCryptoWalletsReply} returns this
*/
proto.mcuc.stark.ultron.ImportCryptoWalletsReply.prototype.setWalletsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoWallet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.CryptoWallet}
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsReply.prototype.addWallets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.ultron.CryptoWallet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ImportCryptoWalletsReply} returns this
 */
proto.mcuc.stark.ultron.ImportCryptoWalletsReply.prototype.clearWalletsList = function() {
  return this.setWalletsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.repeatedFields_ = [3,4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.ListCryptoWalletsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    addressesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    cryptoTypesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    cryptoNetworkTypesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    statusesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    merchantIdsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest}
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.ListCryptoWalletsRequest;
  return proto.mcuc.stark.ultron.ListCryptoWalletsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest}
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddresses(value);
      break;
    case 4:
      var value = /** @type {!Array<!proto.mcuc.stark.ultron.CryptoType>} */ (reader.readPackedEnum());
      msg.setCryptoTypesList(value);
      break;
    case 5:
      var value = /** @type {!Array<!proto.mcuc.stark.ultron.CryptoNetworkType>} */ (reader.readPackedEnum());
      msg.setCryptoNetworkTypesList(value);
      break;
    case 6:
      var value = /** @type {!Array<!proto.mcuc.stark.ultron.CryptoWalletStatus>} */ (reader.readPackedEnum());
      msg.setStatusesList(value);
      break;
    case 7:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setMerchantIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.ListCryptoWalletsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getCryptoTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
  f = message.getCryptoNetworkTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      5,
      f
    );
  }
  f = message.getStatusesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      6,
      f
    );
  }
  f = message.getMerchantIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      7,
      f
    );
  }
};


/**
 * optional uint32 page = 1;
 * @return {number}
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 size = 2;
 * @return {number}
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string addresses = 3;
 * @return {!Array<string>}
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.getAddressesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.setAddressesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.addAddresses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.clearAddressesList = function() {
  return this.setAddressesList([]);
};


/**
 * repeated CryptoType crypto_types = 4;
 * @return {!Array<!proto.mcuc.stark.ultron.CryptoType>}
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.getCryptoTypesList = function() {
  return /** @type {!Array<!proto.mcuc.stark.ultron.CryptoType>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.CryptoType>} value
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.setCryptoTypesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoType} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.addCryptoTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.clearCryptoTypesList = function() {
  return this.setCryptoTypesList([]);
};


/**
 * repeated CryptoNetworkType crypto_network_types = 5;
 * @return {!Array<!proto.mcuc.stark.ultron.CryptoNetworkType>}
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.getCryptoNetworkTypesList = function() {
  return /** @type {!Array<!proto.mcuc.stark.ultron.CryptoNetworkType>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.CryptoNetworkType>} value
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.setCryptoNetworkTypesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoNetworkType} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.addCryptoNetworkTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.clearCryptoNetworkTypesList = function() {
  return this.setCryptoNetworkTypesList([]);
};


/**
 * repeated CryptoWalletStatus statuses = 6;
 * @return {!Array<!proto.mcuc.stark.ultron.CryptoWalletStatus>}
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.getStatusesList = function() {
  return /** @type {!Array<!proto.mcuc.stark.ultron.CryptoWalletStatus>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.CryptoWalletStatus>} value
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.setStatusesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoWalletStatus} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.addStatuses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.clearStatusesList = function() {
  return this.setStatusesList([]);
};


/**
 * repeated int64 merchant_ids = 7;
 * @return {!Array<number>}
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.getMerchantIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.setMerchantIdsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.addMerchantIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoWalletsRequest.prototype.clearMerchantIdsList = function() {
  return this.setMerchantIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.ultron.ListCryptoWalletsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.ListCryptoWalletsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.ListCryptoWalletsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.ListCryptoWalletsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ListCryptoWalletsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.mcuc.stark.ultron.CryptoWallet.toObject, includeInstance),
    total: jspb.Message.getFieldWithDefault(msg, 2, 0),
    currentPage: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsReply}
 */
proto.mcuc.stark.ultron.ListCryptoWalletsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.ListCryptoWalletsReply;
  return proto.mcuc.stark.ultron.ListCryptoWalletsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.ListCryptoWalletsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsReply}
 */
proto.mcuc.stark.ultron.ListCryptoWalletsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.ultron.CryptoWallet;
      reader.readMessage(value,proto.mcuc.stark.ultron.CryptoWallet.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotal(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.ListCryptoWalletsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.ListCryptoWalletsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.ListCryptoWalletsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ListCryptoWalletsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.ultron.CryptoWallet.serializeBinaryToWriter
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getCurrentPage();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * repeated CryptoWallet records = 1;
 * @return {!Array<!proto.mcuc.stark.ultron.CryptoWallet>}
 */
proto.mcuc.stark.ultron.ListCryptoWalletsReply.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.ultron.CryptoWallet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.ultron.CryptoWallet, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.CryptoWallet>} value
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsReply} returns this
*/
proto.mcuc.stark.ultron.ListCryptoWalletsReply.prototype.setRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoWallet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.CryptoWallet}
 */
proto.mcuc.stark.ultron.ListCryptoWalletsReply.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.ultron.CryptoWallet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsReply} returns this
 */
proto.mcuc.stark.ultron.ListCryptoWalletsReply.prototype.clearRecordsList = function() {
  return this.setRecordsList([]);
};


/**
 * optional uint64 total = 2;
 * @return {number}
 */
proto.mcuc.stark.ultron.ListCryptoWalletsReply.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsReply} returns this
 */
proto.mcuc.stark.ultron.ListCryptoWalletsReply.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 current_page = 3;
 * @return {number}
 */
proto.mcuc.stark.ultron.ListCryptoWalletsReply.prototype.getCurrentPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.ListCryptoWalletsReply} returns this
 */
proto.mcuc.stark.ultron.ListCryptoWalletsReply.prototype.setCurrentPage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.mcuc.stark.ultron.SystemCryptoHotWallet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest}
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest;
  return proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest}
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.ultron.SystemCryptoHotWallet;
      reader.readMessage(value,proto.mcuc.stark.ultron.SystemCryptoHotWallet.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.ultron.SystemCryptoHotWallet.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SystemCryptoHotWallet records = 1;
 * @return {!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>}
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.ultron.SystemCryptoHotWallet, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>} value
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest} returns this
*/
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest.prototype.setRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.ultron.SystemCryptoHotWallet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.SystemCryptoHotWallet}
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.ultron.SystemCryptoHotWallet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsRequest.prototype.clearRecordsList = function() {
  return this.setRecordsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    validRecordsList: jspb.Message.toObjectList(msg.getValidRecordsList(),
    proto.mcuc.stark.ultron.SystemCryptoHotWallet.toObject, includeInstance),
    duplicatedRecordsList: jspb.Message.toObjectList(msg.getDuplicatedRecordsList(),
    proto.mcuc.stark.ultron.SystemCryptoHotWallet.toObject, includeInstance),
    duplicatedIdRecordsList: jspb.Message.toObjectList(msg.getDuplicatedIdRecordsList(),
    proto.mcuc.stark.ultron.SystemCryptoHotWallet.toObject, includeInstance),
    invalidRecordsList: jspb.Message.toObjectList(msg.getInvalidRecordsList(),
    proto.mcuc.stark.ultron.SystemCryptoHotWallet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply}
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply;
  return proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply}
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.ultron.SystemCryptoHotWallet;
      reader.readMessage(value,proto.mcuc.stark.ultron.SystemCryptoHotWallet.deserializeBinaryFromReader);
      msg.addValidRecords(value);
      break;
    case 2:
      var value = new proto.mcuc.stark.ultron.SystemCryptoHotWallet;
      reader.readMessage(value,proto.mcuc.stark.ultron.SystemCryptoHotWallet.deserializeBinaryFromReader);
      msg.addDuplicatedRecords(value);
      break;
    case 3:
      var value = new proto.mcuc.stark.ultron.SystemCryptoHotWallet;
      reader.readMessage(value,proto.mcuc.stark.ultron.SystemCryptoHotWallet.deserializeBinaryFromReader);
      msg.addDuplicatedIdRecords(value);
      break;
    case 4:
      var value = new proto.mcuc.stark.ultron.SystemCryptoHotWallet;
      reader.readMessage(value,proto.mcuc.stark.ultron.SystemCryptoHotWallet.deserializeBinaryFromReader);
      msg.addInvalidRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.ultron.SystemCryptoHotWallet.serializeBinaryToWriter
    );
  }
  f = message.getDuplicatedRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.mcuc.stark.ultron.SystemCryptoHotWallet.serializeBinaryToWriter
    );
  }
  f = message.getDuplicatedIdRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.mcuc.stark.ultron.SystemCryptoHotWallet.serializeBinaryToWriter
    );
  }
  f = message.getInvalidRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.mcuc.stark.ultron.SystemCryptoHotWallet.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SystemCryptoHotWallet valid_records = 1;
 * @return {!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>}
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.prototype.getValidRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.ultron.SystemCryptoHotWallet, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>} value
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply} returns this
*/
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.prototype.setValidRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.ultron.SystemCryptoHotWallet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.SystemCryptoHotWallet}
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.prototype.addValidRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.ultron.SystemCryptoHotWallet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply} returns this
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.prototype.clearValidRecordsList = function() {
  return this.setValidRecordsList([]);
};


/**
 * repeated SystemCryptoHotWallet duplicated_records = 2;
 * @return {!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>}
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.prototype.getDuplicatedRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.ultron.SystemCryptoHotWallet, 2));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>} value
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply} returns this
*/
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.prototype.setDuplicatedRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mcuc.stark.ultron.SystemCryptoHotWallet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.SystemCryptoHotWallet}
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.prototype.addDuplicatedRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mcuc.stark.ultron.SystemCryptoHotWallet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply} returns this
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.prototype.clearDuplicatedRecordsList = function() {
  return this.setDuplicatedRecordsList([]);
};


/**
 * repeated SystemCryptoHotWallet duplicated_id_records = 3;
 * @return {!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>}
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.prototype.getDuplicatedIdRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.ultron.SystemCryptoHotWallet, 3));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>} value
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply} returns this
*/
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.prototype.setDuplicatedIdRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.mcuc.stark.ultron.SystemCryptoHotWallet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.SystemCryptoHotWallet}
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.prototype.addDuplicatedIdRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.mcuc.stark.ultron.SystemCryptoHotWallet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply} returns this
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.prototype.clearDuplicatedIdRecordsList = function() {
  return this.setDuplicatedIdRecordsList([]);
};


/**
 * repeated SystemCryptoHotWallet invalid_records = 4;
 * @return {!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>}
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.prototype.getInvalidRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.ultron.SystemCryptoHotWallet, 4));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>} value
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply} returns this
*/
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.prototype.setInvalidRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.mcuc.stark.ultron.SystemCryptoHotWallet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.SystemCryptoHotWallet}
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.prototype.addInvalidRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.mcuc.stark.ultron.SystemCryptoHotWallet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply} returns this
 */
proto.mcuc.stark.ultron.ValidateCryptoHotWalletsReply.prototype.clearInvalidRecordsList = function() {
  return this.setInvalidRecordsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.mcuc.stark.ultron.SystemCryptoHotWallet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest}
 */
proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest;
  return proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest}
 */
proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.ultron.SystemCryptoHotWallet;
      reader.readMessage(value,proto.mcuc.stark.ultron.SystemCryptoHotWallet.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.ultron.SystemCryptoHotWallet.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SystemCryptoHotWallet records = 1;
 * @return {!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>}
 */
proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.ultron.SystemCryptoHotWallet, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>} value
 * @return {!proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest} returns this
*/
proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest.prototype.setRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.ultron.SystemCryptoHotWallet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.SystemCryptoHotWallet}
 */
proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.ultron.SystemCryptoHotWallet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ImportCryptoHotWalletsRequest.prototype.clearRecordsList = function() {
  return this.setRecordsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.ImportCryptoHotWalletsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.ImportCryptoHotWalletsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.ImportCryptoHotWalletsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ImportCryptoHotWalletsReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.ImportCryptoHotWalletsReply}
 */
proto.mcuc.stark.ultron.ImportCryptoHotWalletsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.ImportCryptoHotWalletsReply;
  return proto.mcuc.stark.ultron.ImportCryptoHotWalletsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.ImportCryptoHotWalletsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.ImportCryptoHotWalletsReply}
 */
proto.mcuc.stark.ultron.ImportCryptoHotWalletsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.ImportCryptoHotWalletsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.ImportCryptoHotWalletsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.ImportCryptoHotWalletsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ImportCryptoHotWalletsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.repeatedFields_ = [3,4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    addressesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    cryptoTypesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    cryptoNetworkTypesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    statusesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    merchantIdsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest}
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest;
  return proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest}
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddresses(value);
      break;
    case 4:
      var value = /** @type {!Array<!proto.mcuc.stark.ultron.CryptoType>} */ (reader.readPackedEnum());
      msg.setCryptoTypesList(value);
      break;
    case 5:
      var value = /** @type {!Array<!proto.mcuc.stark.ultron.CryptoNetworkType>} */ (reader.readPackedEnum());
      msg.setCryptoNetworkTypesList(value);
      break;
    case 6:
      var value = /** @type {!Array<!proto.mcuc.stark.ultron.CryptoWalletStatus>} */ (reader.readPackedEnum());
      msg.setStatusesList(value);
      break;
    case 7:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setMerchantIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getCryptoTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
  f = message.getCryptoNetworkTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      5,
      f
    );
  }
  f = message.getStatusesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      6,
      f
    );
  }
  f = message.getMerchantIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      7,
      f
    );
  }
};


/**
 * optional uint32 page = 1;
 * @return {number}
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 size = 2;
 * @return {number}
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string addresses = 3;
 * @return {!Array<string>}
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.getAddressesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.setAddressesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.addAddresses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.clearAddressesList = function() {
  return this.setAddressesList([]);
};


/**
 * repeated CryptoType crypto_types = 4;
 * @return {!Array<!proto.mcuc.stark.ultron.CryptoType>}
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.getCryptoTypesList = function() {
  return /** @type {!Array<!proto.mcuc.stark.ultron.CryptoType>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.CryptoType>} value
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.setCryptoTypesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoType} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.addCryptoTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.clearCryptoTypesList = function() {
  return this.setCryptoTypesList([]);
};


/**
 * repeated CryptoNetworkType crypto_network_types = 5;
 * @return {!Array<!proto.mcuc.stark.ultron.CryptoNetworkType>}
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.getCryptoNetworkTypesList = function() {
  return /** @type {!Array<!proto.mcuc.stark.ultron.CryptoNetworkType>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.CryptoNetworkType>} value
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.setCryptoNetworkTypesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoNetworkType} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.addCryptoNetworkTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.clearCryptoNetworkTypesList = function() {
  return this.setCryptoNetworkTypesList([]);
};


/**
 * repeated CryptoWalletStatus statuses = 6;
 * @return {!Array<!proto.mcuc.stark.ultron.CryptoWalletStatus>}
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.getStatusesList = function() {
  return /** @type {!Array<!proto.mcuc.stark.ultron.CryptoWalletStatus>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.CryptoWalletStatus>} value
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.setStatusesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoWalletStatus} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.addStatuses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.clearStatusesList = function() {
  return this.setStatusesList([]);
};


/**
 * repeated int64 merchant_ids = 7;
 * @return {!Array<number>}
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.getMerchantIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.setMerchantIdsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.addMerchantIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsRequest.prototype.clearMerchantIdsList = function() {
  return this.setMerchantIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.ListCryptoHotWalletsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.ListCryptoHotWalletsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.mcuc.stark.ultron.SystemCryptoHotWallet.toObject, includeInstance),
    total: jspb.Message.getFieldWithDefault(msg, 2, 0),
    currentPage: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsReply}
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.ListCryptoHotWalletsReply;
  return proto.mcuc.stark.ultron.ListCryptoHotWalletsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.ListCryptoHotWalletsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsReply}
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.ultron.SystemCryptoHotWallet;
      reader.readMessage(value,proto.mcuc.stark.ultron.SystemCryptoHotWallet.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotal(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.ListCryptoHotWalletsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.ListCryptoHotWalletsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.ultron.SystemCryptoHotWallet.serializeBinaryToWriter
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getCurrentPage();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * repeated SystemCryptoHotWallet records = 1;
 * @return {!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>}
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsReply.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.ultron.SystemCryptoHotWallet, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>} value
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsReply} returns this
*/
proto.mcuc.stark.ultron.ListCryptoHotWalletsReply.prototype.setRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.ultron.SystemCryptoHotWallet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.SystemCryptoHotWallet}
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsReply.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.ultron.SystemCryptoHotWallet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsReply} returns this
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsReply.prototype.clearRecordsList = function() {
  return this.setRecordsList([]);
};


/**
 * optional uint64 total = 2;
 * @return {number}
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsReply.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsReply} returns this
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsReply.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 current_page = 3;
 * @return {number}
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsReply.prototype.getCurrentPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.ListCryptoHotWalletsReply} returns this
 */
proto.mcuc.stark.ultron.ListCryptoHotWalletsReply.prototype.setCurrentPage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cryptoType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cryptoNetworkType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    merchantId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest}
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest;
  return proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest}
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mcuc.stark.ultron.CryptoType} */ (reader.readEnum());
      msg.setCryptoType(value);
      break;
    case 2:
      var value = /** @type {!proto.mcuc.stark.ultron.CryptoNetworkType} */ (reader.readEnum());
      msg.setCryptoNetworkType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCryptoType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCryptoNetworkType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMerchantId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional CryptoType crypto_type = 1;
 * @return {!proto.mcuc.stark.ultron.CryptoType}
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest.prototype.getCryptoType = function() {
  return /** @type {!proto.mcuc.stark.ultron.CryptoType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoType} value
 * @return {!proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest.prototype.setCryptoType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CryptoNetworkType crypto_network_type = 2;
 * @return {!proto.mcuc.stark.ultron.CryptoNetworkType}
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest.prototype.getCryptoNetworkType = function() {
  return /** @type {!proto.mcuc.stark.ultron.CryptoNetworkType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoNetworkType} value
 * @return {!proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest.prototype.setCryptoNetworkType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 merchant_id = 3;
 * @return {number}
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest.prototype.getMerchantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest.prototype.setMerchantId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional double amount = 4;
 * @return {number}
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest} returns this
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.mcuc.stark.ultron.SystemCryptoHotWallet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply}
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply;
  return proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply}
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mcuc.stark.ultron.SystemCryptoHotWallet;
      reader.readMessage(value,proto.mcuc.stark.ultron.SystemCryptoHotWallet.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mcuc.stark.ultron.SystemCryptoHotWallet.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SystemCryptoHotWallet records = 1;
 * @return {!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>}
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mcuc.stark.ultron.SystemCryptoHotWallet, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.SystemCryptoHotWallet>} value
 * @return {!proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply} returns this
*/
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply.prototype.setRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.ultron.SystemCryptoHotWallet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.ultron.SystemCryptoHotWallet}
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.ultron.SystemCryptoHotWallet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply} returns this
 */
proto.mcuc.stark.ultron.GetSystemCryptoHotWalletsReply.prototype.clearRecordsList = function() {
  return this.setRecordsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.SystemCryptoHotWallet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.SystemCryptoHotWallet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    merchantId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cryptoType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cryptoNetworkType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    totalBalance: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    balance: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    status: jspb.Message.getFieldWithDefault(msg, 8, 0),
    errorCode: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.SystemCryptoHotWallet}
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.SystemCryptoHotWallet;
  return proto.mcuc.stark.ultron.SystemCryptoHotWallet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.SystemCryptoHotWallet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.SystemCryptoHotWallet}
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantId(value);
      break;
    case 4:
      var value = /** @type {!proto.mcuc.stark.ultron.CryptoType} */ (reader.readEnum());
      msg.setCryptoType(value);
      break;
    case 5:
      var value = /** @type {!proto.mcuc.stark.ultron.CryptoNetworkType} */ (reader.readEnum());
      msg.setCryptoNetworkType(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalBalance(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBalance(value);
      break;
    case 8:
      var value = /** @type {!proto.mcuc.stark.ultron.CryptoHotWalletStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.SystemCryptoHotWallet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.SystemCryptoHotWallet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMerchantId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCryptoType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getCryptoNetworkType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getTotalBalance();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getBalance();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getErrorCode();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.SystemCryptoHotWallet} returns this
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.SystemCryptoHotWallet} returns this
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 merchant_id = 3;
 * @return {number}
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.prototype.getMerchantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.SystemCryptoHotWallet} returns this
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.prototype.setMerchantId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional CryptoType crypto_type = 4;
 * @return {!proto.mcuc.stark.ultron.CryptoType}
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.prototype.getCryptoType = function() {
  return /** @type {!proto.mcuc.stark.ultron.CryptoType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoType} value
 * @return {!proto.mcuc.stark.ultron.SystemCryptoHotWallet} returns this
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.prototype.setCryptoType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional CryptoNetworkType crypto_network_type = 5;
 * @return {!proto.mcuc.stark.ultron.CryptoNetworkType}
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.prototype.getCryptoNetworkType = function() {
  return /** @type {!proto.mcuc.stark.ultron.CryptoNetworkType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoNetworkType} value
 * @return {!proto.mcuc.stark.ultron.SystemCryptoHotWallet} returns this
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.prototype.setCryptoNetworkType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional double total_balance = 6;
 * @return {number}
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.prototype.getTotalBalance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.SystemCryptoHotWallet} returns this
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.prototype.setTotalBalance = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double balance = 7;
 * @return {number}
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.SystemCryptoHotWallet} returns this
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.prototype.setBalance = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional CryptoHotWalletStatus status = 8;
 * @return {!proto.mcuc.stark.ultron.CryptoHotWalletStatus}
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.prototype.getStatus = function() {
  return /** @type {!proto.mcuc.stark.ultron.CryptoHotWalletStatus} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoHotWalletStatus} value
 * @return {!proto.mcuc.stark.ultron.SystemCryptoHotWallet} returns this
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional string error_code = 9;
 * @return {string}
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.prototype.getErrorCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.SystemCryptoHotWallet} returns this
 */
proto.mcuc.stark.ultron.SystemCryptoHotWallet.prototype.setErrorCode = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.CallbackTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.CallbackTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    storeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    appTransId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sender: jspb.Message.getFieldWithDefault(msg, 4, ""),
    recipient: jspb.Message.getFieldWithDefault(msg, 5, ""),
    currency: jspb.Message.getFieldWithDefault(msg, 6, ""),
    transactionFee: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    txHash: jspb.Message.getFieldWithDefault(msg, 8, ""),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    receivedAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    type: jspb.Message.getFieldWithDefault(msg, 11, ""),
    state: jspb.Message.getFieldWithDefault(msg, 12, ""),
    message: jspb.Message.getFieldWithDefault(msg, 13, ""),
    bcFee: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    bcFeeCurrency: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.CallbackTransactionRequest}
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.CallbackTransactionRequest;
  return proto.mcuc.stark.ultron.CallbackTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.CallbackTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.CallbackTransactionRequest}
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStoreId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppTransId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipient(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTransactionFee(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setReceivedAmount(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBcFee(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setBcFeeCurrency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.CallbackTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.CallbackTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStoreId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAppTransId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRecipient();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTransactionFee();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getReceivedAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getBcFee();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getBcFeeCurrency();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional string store_id = 1;
 * @return {string}
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.getStoreId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.CallbackTransactionRequest} returns this
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.setStoreId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string app_trans_id = 2;
 * @return {string}
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.getAppTransId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.CallbackTransactionRequest} returns this
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.setAppTransId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string trans_id = 3;
 * @return {string}
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.getTransId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.CallbackTransactionRequest} returns this
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.setTransId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string sender = 4;
 * @return {string}
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.CallbackTransactionRequest} returns this
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string recipient = 5;
 * @return {string}
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.getRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.CallbackTransactionRequest} returns this
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.setRecipient = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string currency = 6;
 * @return {string}
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.CallbackTransactionRequest} returns this
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional double transaction_fee = 7;
 * @return {number}
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.getTransactionFee = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.CallbackTransactionRequest} returns this
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.setTransactionFee = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional string tx_hash = 8;
 * @return {string}
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.CallbackTransactionRequest} returns this
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.setTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional double amount = 9;
 * @return {number}
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.CallbackTransactionRequest} returns this
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double received_amount = 10;
 * @return {number}
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.getReceivedAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.CallbackTransactionRequest} returns this
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.setReceivedAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional string type = 11;
 * @return {string}
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.CallbackTransactionRequest} returns this
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string state = 12;
 * @return {string}
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.CallbackTransactionRequest} returns this
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string message = 13;
 * @return {string}
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.CallbackTransactionRequest} returns this
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional double bc_fee = 14;
 * @return {number}
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.getBcFee = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.CallbackTransactionRequest} returns this
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.setBcFee = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional string bc_fee_currency = 15;
 * @return {string}
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.getBcFeeCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.CallbackTransactionRequest} returns this
 */
proto.mcuc.stark.ultron.CallbackTransactionRequest.prototype.setBcFeeCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.CallbackTransactionReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.CallbackTransactionReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.CallbackTransactionReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.CallbackTransactionReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.CallbackTransactionReply}
 */
proto.mcuc.stark.ultron.CallbackTransactionReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.CallbackTransactionReply;
  return proto.mcuc.stark.ultron.CallbackTransactionReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.CallbackTransactionReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.CallbackTransactionReply}
 */
proto.mcuc.stark.ultron.CallbackTransactionReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.CallbackTransactionReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.CallbackTransactionReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.CallbackTransactionReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.CallbackTransactionReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.CryptoWallet.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.CryptoWallet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.CryptoWallet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.CryptoWallet.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    merchantId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cryptoType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cryptoNetworkType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    status: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.CryptoWallet}
 */
proto.mcuc.stark.ultron.CryptoWallet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.CryptoWallet;
  return proto.mcuc.stark.ultron.CryptoWallet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.CryptoWallet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.CryptoWallet}
 */
proto.mcuc.stark.ultron.CryptoWallet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantId(value);
      break;
    case 4:
      var value = /** @type {!proto.mcuc.stark.ultron.CryptoType} */ (reader.readEnum());
      msg.setCryptoType(value);
      break;
    case 5:
      var value = /** @type {!proto.mcuc.stark.ultron.CryptoNetworkType} */ (reader.readEnum());
      msg.setCryptoNetworkType(value);
      break;
    case 6:
      var value = /** @type {!proto.mcuc.stark.ultron.CryptoWalletStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.CryptoWallet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.CryptoWallet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.CryptoWallet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.CryptoWallet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMerchantId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCryptoType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getCryptoNetworkType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.mcuc.stark.ultron.CryptoWallet.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.CryptoWallet} returns this
 */
proto.mcuc.stark.ultron.CryptoWallet.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.mcuc.stark.ultron.CryptoWallet.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.CryptoWallet} returns this
 */
proto.mcuc.stark.ultron.CryptoWallet.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 merchant_id = 3;
 * @return {number}
 */
proto.mcuc.stark.ultron.CryptoWallet.prototype.getMerchantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.CryptoWallet} returns this
 */
proto.mcuc.stark.ultron.CryptoWallet.prototype.setMerchantId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional CryptoType crypto_type = 4;
 * @return {!proto.mcuc.stark.ultron.CryptoType}
 */
proto.mcuc.stark.ultron.CryptoWallet.prototype.getCryptoType = function() {
  return /** @type {!proto.mcuc.stark.ultron.CryptoType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoType} value
 * @return {!proto.mcuc.stark.ultron.CryptoWallet} returns this
 */
proto.mcuc.stark.ultron.CryptoWallet.prototype.setCryptoType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional CryptoNetworkType crypto_network_type = 5;
 * @return {!proto.mcuc.stark.ultron.CryptoNetworkType}
 */
proto.mcuc.stark.ultron.CryptoWallet.prototype.getCryptoNetworkType = function() {
  return /** @type {!proto.mcuc.stark.ultron.CryptoNetworkType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoNetworkType} value
 * @return {!proto.mcuc.stark.ultron.CryptoWallet} returns this
 */
proto.mcuc.stark.ultron.CryptoWallet.prototype.setCryptoNetworkType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional CryptoWalletStatus status = 6;
 * @return {!proto.mcuc.stark.ultron.CryptoWalletStatus}
 */
proto.mcuc.stark.ultron.CryptoWallet.prototype.getStatus = function() {
  return /** @type {!proto.mcuc.stark.ultron.CryptoWalletStatus} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoWalletStatus} value
 * @return {!proto.mcuc.stark.ultron.CryptoWallet} returns this
 */
proto.mcuc.stark.ultron.CryptoWallet.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.CryptoPaymentDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.CryptoPaymentDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    cryptoType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cryptoNetworkType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cryptoWalletName: jspb.Message.getFieldWithDefault(msg, 3, 0),
    receiverAddress: jspb.Message.getFieldWithDefault(msg, 4, ""),
    senderAddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    receivedAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    txHash: jspb.Message.getFieldWithDefault(msg, 8, ""),
    fee: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    imageUrl: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.CryptoPaymentDetail}
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.CryptoPaymentDetail;
  return proto.mcuc.stark.ultron.CryptoPaymentDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.CryptoPaymentDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.CryptoPaymentDetail}
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mcuc.stark.ultron.CryptoType} */ (reader.readEnum());
      msg.setCryptoType(value);
      break;
    case 2:
      var value = /** @type {!proto.mcuc.stark.ultron.CryptoNetworkType} */ (reader.readEnum());
      msg.setCryptoNetworkType(value);
      break;
    case 3:
      var value = /** @type {!proto.mcuc.stark.ultron.CryptoWalletName} */ (reader.readEnum());
      msg.setCryptoWalletName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiverAddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderAddress(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setReceivedAmount(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFee(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.CryptoPaymentDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.CryptoPaymentDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCryptoType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCryptoNetworkType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCryptoWalletName();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getReceiverAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSenderAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getReceivedAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getFee();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getImageUrl();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional CryptoType crypto_type = 1;
 * @return {!proto.mcuc.stark.ultron.CryptoType}
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.getCryptoType = function() {
  return /** @type {!proto.mcuc.stark.ultron.CryptoType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoType} value
 * @return {!proto.mcuc.stark.ultron.CryptoPaymentDetail} returns this
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.setCryptoType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CryptoNetworkType crypto_network_type = 2;
 * @return {!proto.mcuc.stark.ultron.CryptoNetworkType}
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.getCryptoNetworkType = function() {
  return /** @type {!proto.mcuc.stark.ultron.CryptoNetworkType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoNetworkType} value
 * @return {!proto.mcuc.stark.ultron.CryptoPaymentDetail} returns this
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.setCryptoNetworkType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional CryptoWalletName crypto_wallet_name = 3;
 * @return {!proto.mcuc.stark.ultron.CryptoWalletName}
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.getCryptoWalletName = function() {
  return /** @type {!proto.mcuc.stark.ultron.CryptoWalletName} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoWalletName} value
 * @return {!proto.mcuc.stark.ultron.CryptoPaymentDetail} returns this
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.setCryptoWalletName = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string receiver_address = 4;
 * @return {string}
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.getReceiverAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.CryptoPaymentDetail} returns this
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.setReceiverAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string sender_address = 5;
 * @return {string}
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.getSenderAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.CryptoPaymentDetail} returns this
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.setSenderAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional double amount = 6;
 * @return {number}
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.CryptoPaymentDetail} returns this
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double received_amount = 7;
 * @return {number}
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.getReceivedAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.CryptoPaymentDetail} returns this
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.setReceivedAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional string tx_hash = 8;
 * @return {string}
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.CryptoPaymentDetail} returns this
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.setTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional double fee = 9;
 * @return {number}
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.ultron.CryptoPaymentDetail} returns this
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.setFee = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional string image_url = 10;
 * @return {string}
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.getImageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.ultron.CryptoPaymentDetail} returns this
 */
proto.mcuc.stark.ultron.CryptoPaymentDetail.prototype.setImageUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest}
 */
proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest;
  return proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest}
 */
proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest} returns this
 */
proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply}
 */
proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply;
  return proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply}
 */
proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.GetCryptoSettingsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.GetCryptoSettingsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.GetCryptoSettingsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.GetCryptoSettingsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.GetCryptoSettingsRequest}
 */
proto.mcuc.stark.ultron.GetCryptoSettingsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.GetCryptoSettingsRequest;
  return proto.mcuc.stark.ultron.GetCryptoSettingsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.GetCryptoSettingsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.GetCryptoSettingsRequest}
 */
proto.mcuc.stark.ultron.GetCryptoSettingsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.GetCryptoSettingsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.GetCryptoSettingsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.GetCryptoSettingsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.GetCryptoSettingsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.ultron.GetCryptoSettingsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.ultron.GetCryptoSettingsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.ultron.GetCryptoSettingsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.GetCryptoSettingsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    autoTransferWithdrawCrypto: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.ultron.GetCryptoSettingsReply}
 */
proto.mcuc.stark.ultron.GetCryptoSettingsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.ultron.GetCryptoSettingsReply;
  return proto.mcuc.stark.ultron.GetCryptoSettingsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.ultron.GetCryptoSettingsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.ultron.GetCryptoSettingsReply}
 */
proto.mcuc.stark.ultron.GetCryptoSettingsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoTransferWithdrawCrypto(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.ultron.GetCryptoSettingsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.ultron.GetCryptoSettingsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.ultron.GetCryptoSettingsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.ultron.GetCryptoSettingsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAutoTransferWithdrawCrypto();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool auto_transfer_withdraw_crypto = 1;
 * @return {boolean}
 */
proto.mcuc.stark.ultron.GetCryptoSettingsReply.prototype.getAutoTransferWithdrawCrypto = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mcuc.stark.ultron.GetCryptoSettingsReply} returns this
 */
proto.mcuc.stark.ultron.GetCryptoSettingsReply.prototype.setAutoTransferWithdrawCrypto = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.mcuc.stark.ultron.CryptoType = {
  CRYPTO_TYPE_UNSPECIFIED: 0,
  USDT: 1
};

/**
 * @enum {number}
 */
proto.mcuc.stark.ultron.CryptoNetworkType = {
  CRYPTO_NETWORK_TYPE_UNSPECIFIED: 0,
  ERC20: 1,
  BEP20: 2,
  TRC20: 3
};

/**
 * @enum {number}
 */
proto.mcuc.stark.ultron.CryptoWalletStatus = {
  CRYPTO_NETWORK_STATUS_UNSPECIFIED: 0,
  AVAILABLE: 1,
  USED: 2,
  BANNED: 3
};

/**
 * @enum {number}
 */
proto.mcuc.stark.ultron.CryptoHotWalletStatus = {
  CRYPTO_HOT_WALLET_STATUS_UNSPECIFIED: 0,
  CRYPTO_HOT_WALLET_STATUS_ACTIVE: 1,
  CRYPTO_HOT_WALLET_STATUS_IN_ACTIVE: 2
};

/**
 * @enum {number}
 */
proto.mcuc.stark.ultron.CryptoWalletName = {
  CRYPTO_WALLET_NAME_UNSPECIFIED: 0,
  UMO: 1
};

goog.object.extend(exports, proto.mcuc.stark.ultron);
