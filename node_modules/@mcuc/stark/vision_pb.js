// source: stark/vision.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var validate_validate_pb = require('@greyhole/validate/validate_pb.js');
goog.object.extend(proto, validate_validate_pb);
var groot_api_groot_pb = require('@mcuc/groot/groot_pb.js');
goog.object.extend(proto, groot_api_groot_pb);
var stark_api_stark_pb = require('@mcuc/stark/stark_pb.js');
goog.object.extend(proto, stark_api_stark_pb);
var stark_api_pepper_pb = require('@mcuc/stark/pepper_pb.js');
goog.object.extend(proto, stark_api_pepper_pb);
var stark_api_tony_pb = require('@mcuc/stark/tony_pb.js');
goog.object.extend(proto, stark_api_tony_pb);
var stark_api_ultron_pb = require('@mcuc/stark/ultron_pb.js');
goog.object.extend(proto, stark_api_ultron_pb);
goog.exportSymbol('proto.mcuc.stark.vision.GetPaymentDetailReply', null, global);
goog.exportSymbol('proto.mcuc.stark.vision.GetPaymentDetailRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply', null, global);
goog.exportSymbol('proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.PayloadCase', null, global);
goog.exportSymbol('proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.vision.ListPaymentsReply', null, global);
goog.exportSymbol('proto.mcuc.stark.vision.ListPaymentsRequest', null, global);
goog.exportSymbol('proto.mcuc.stark.vision.Order', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.vision.GetPaymentDetailRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.vision.GetPaymentDetailRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.vision.GetPaymentDetailRequest.displayName = 'proto.mcuc.stark.vision.GetPaymentDetailRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.vision.GetPaymentDetailReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.vision.GetPaymentDetailReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.vision.GetPaymentDetailReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.vision.GetPaymentDetailReply.displayName = 'proto.mcuc.stark.vision.GetPaymentDetailReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.vision.ListPaymentsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.vision.ListPaymentsRequest.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.vision.ListPaymentsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.vision.ListPaymentsRequest.displayName = 'proto.mcuc.stark.vision.ListPaymentsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.vision.ListPaymentsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mcuc.stark.vision.ListPaymentsReply.repeatedFields_, null);
};
goog.inherits(proto.mcuc.stark.vision.ListPaymentsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.vision.ListPaymentsReply.displayName = 'proto.mcuc.stark.vision.ListPaymentsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest.displayName = 'proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.oneofGroups_);
};
goog.inherits(proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.displayName = 'proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.vision.GetPaymentDetailRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.vision.GetPaymentDetailRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.vision.GetPaymentDetailRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.vision.GetPaymentDetailRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.vision.GetPaymentDetailRequest}
 */
proto.mcuc.stark.vision.GetPaymentDetailRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.vision.GetPaymentDetailRequest;
  return proto.mcuc.stark.vision.GetPaymentDetailRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.vision.GetPaymentDetailRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.vision.GetPaymentDetailRequest}
 */
proto.mcuc.stark.vision.GetPaymentDetailRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.vision.GetPaymentDetailRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.vision.GetPaymentDetailRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.vision.GetPaymentDetailRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.vision.GetPaymentDetailRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.mcuc.stark.vision.GetPaymentDetailRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.vision.GetPaymentDetailRequest} returns this
 */
proto.mcuc.stark.vision.GetPaymentDetailRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.vision.GetPaymentDetailReply.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.vision.GetPaymentDetailReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.vision.GetPaymentDetailReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.vision.GetPaymentDetailReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.vision.GetPaymentDetailReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    payment: (f = msg.getPayment()) && stark_api_stark_pb.Payment.toObject(includeInstance, f),
    paymentDetail: (f = msg.getPaymentDetail()) && stark_api_stark_pb.PaymentDetail.toObject(includeInstance, f),
    revisionsList: jspb.Message.toObjectList(msg.getRevisionsList(),
    stark_api_stark_pb.Revision.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.vision.GetPaymentDetailReply}
 */
proto.mcuc.stark.vision.GetPaymentDetailReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.vision.GetPaymentDetailReply;
  return proto.mcuc.stark.vision.GetPaymentDetailReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.vision.GetPaymentDetailReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.vision.GetPaymentDetailReply}
 */
proto.mcuc.stark.vision.GetPaymentDetailReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new stark_api_stark_pb.Payment;
      reader.readMessage(value,stark_api_stark_pb.Payment.deserializeBinaryFromReader);
      msg.setPayment(value);
      break;
    case 2:
      var value = new stark_api_stark_pb.PaymentDetail;
      reader.readMessage(value,stark_api_stark_pb.PaymentDetail.deserializeBinaryFromReader);
      msg.setPaymentDetail(value);
      break;
    case 3:
      var value = new stark_api_stark_pb.Revision;
      reader.readMessage(value,stark_api_stark_pb.Revision.deserializeBinaryFromReader);
      msg.addRevisions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.vision.GetPaymentDetailReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.vision.GetPaymentDetailReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.vision.GetPaymentDetailReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.vision.GetPaymentDetailReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      stark_api_stark_pb.Payment.serializeBinaryToWriter
    );
  }
  f = message.getPaymentDetail();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      stark_api_stark_pb.PaymentDetail.serializeBinaryToWriter
    );
  }
  f = message.getRevisionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      stark_api_stark_pb.Revision.serializeBinaryToWriter
    );
  }
};


/**
 * optional mcuc.stark.Payment payment = 1;
 * @return {?proto.mcuc.stark.Payment}
 */
proto.mcuc.stark.vision.GetPaymentDetailReply.prototype.getPayment = function() {
  return /** @type{?proto.mcuc.stark.Payment} */ (
    jspb.Message.getWrapperField(this, stark_api_stark_pb.Payment, 1));
};


/**
 * @param {?proto.mcuc.stark.Payment|undefined} value
 * @return {!proto.mcuc.stark.vision.GetPaymentDetailReply} returns this
*/
proto.mcuc.stark.vision.GetPaymentDetailReply.prototype.setPayment = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.vision.GetPaymentDetailReply} returns this
 */
proto.mcuc.stark.vision.GetPaymentDetailReply.prototype.clearPayment = function() {
  return this.setPayment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.vision.GetPaymentDetailReply.prototype.hasPayment = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional mcuc.stark.PaymentDetail payment_detail = 2;
 * @return {?proto.mcuc.stark.PaymentDetail}
 */
proto.mcuc.stark.vision.GetPaymentDetailReply.prototype.getPaymentDetail = function() {
  return /** @type{?proto.mcuc.stark.PaymentDetail} */ (
    jspb.Message.getWrapperField(this, stark_api_stark_pb.PaymentDetail, 2));
};


/**
 * @param {?proto.mcuc.stark.PaymentDetail|undefined} value
 * @return {!proto.mcuc.stark.vision.GetPaymentDetailReply} returns this
*/
proto.mcuc.stark.vision.GetPaymentDetailReply.prototype.setPaymentDetail = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.vision.GetPaymentDetailReply} returns this
 */
proto.mcuc.stark.vision.GetPaymentDetailReply.prototype.clearPaymentDetail = function() {
  return this.setPaymentDetail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.vision.GetPaymentDetailReply.prototype.hasPaymentDetail = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated mcuc.stark.Revision revisions = 3;
 * @return {!Array<!proto.mcuc.stark.Revision>}
 */
proto.mcuc.stark.vision.GetPaymentDetailReply.prototype.getRevisionsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.Revision>} */ (
    jspb.Message.getRepeatedWrapperField(this, stark_api_stark_pb.Revision, 3));
};


/**
 * @param {!Array<!proto.mcuc.stark.Revision>} value
 * @return {!proto.mcuc.stark.vision.GetPaymentDetailReply} returns this
*/
proto.mcuc.stark.vision.GetPaymentDetailReply.prototype.setRevisionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.mcuc.stark.Revision=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.Revision}
 */
proto.mcuc.stark.vision.GetPaymentDetailReply.prototype.addRevisions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.mcuc.stark.Revision, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.vision.GetPaymentDetailReply} returns this
 */
proto.mcuc.stark.vision.GetPaymentDetailReply.prototype.clearRevisionsList = function() {
  return this.setRevisionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.vision.ListPaymentsRequest.repeatedFields_ = [5,6,7,8,9,10,11,12,13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.vision.ListPaymentsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.vision.ListPaymentsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.vision.ListPaymentsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    from: (f = msg.getFrom()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    to: (f = msg.getTo()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    paymentIdsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    paymentTypesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    methodsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    statusesList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    merchantIdsList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    bankNamesList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    eWalletNamesList: (f = jspb.Message.getRepeatedField(msg, 11)) == null ? undefined : f,
    telcoNamesList: (f = jspb.Message.getRepeatedField(msg, 12)) == null ? undefined : f,
    cryptoWalletNameList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    order: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest}
 */
proto.mcuc.stark.vision.ListPaymentsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.vision.ListPaymentsRequest;
  return proto.mcuc.stark.vision.ListPaymentsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.vision.ListPaymentsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest}
 */
proto.mcuc.stark.vision.ListPaymentsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSize(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setPaymentIdsList(value);
      break;
    case 6:
      var value = /** @type {!Array<!proto.mcuc.stark.PaymentType>} */ (reader.readPackedEnum());
      msg.setPaymentTypesList(value);
      break;
    case 7:
      var value = /** @type {!Array<!proto.mcuc.stark.MethodType>} */ (reader.readPackedEnum());
      msg.setMethodsList(value);
      break;
    case 8:
      var value = /** @type {!Array<!proto.mcuc.stark.Status>} */ (reader.readPackedEnum());
      msg.setStatusesList(value);
      break;
    case 9:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setMerchantIdsList(value);
      break;
    case 10:
      var value = /** @type {!Array<!proto.mcuc.stark.pepper.BankName>} */ (reader.readPackedEnum());
      msg.setBankNamesList(value);
      break;
    case 11:
      var value = /** @type {!Array<!proto.mcuc.stark.tony.EWalletName>} */ (reader.readPackedEnum());
      msg.setEWalletNamesList(value);
      break;
    case 12:
      var value = /** @type {!Array<!proto.mcuc.groot.TelcoName>} */ (reader.readPackedEnum());
      msg.setTelcoNamesList(value);
      break;
    case 13:
      var value = /** @type {!Array<!proto.mcuc.stark.ultron.CryptoWalletName>} */ (reader.readPackedEnum());
      msg.setCryptoWalletNameList(value);
      break;
    case 14:
      var value = /** @type {!proto.mcuc.stark.vision.Order} */ (reader.readEnum());
      msg.setOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.vision.ListPaymentsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.vision.ListPaymentsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.vision.ListPaymentsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPaymentIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      5,
      f
    );
  }
  f = message.getPaymentTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      6,
      f
    );
  }
  f = message.getMethodsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      7,
      f
    );
  }
  f = message.getStatusesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      8,
      f
    );
  }
  f = message.getMerchantIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      9,
      f
    );
  }
  f = message.getBankNamesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      10,
      f
    );
  }
  f = message.getEWalletNamesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      11,
      f
    );
  }
  f = message.getTelcoNamesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      12,
      f
    );
  }
  f = message.getCryptoWalletNameList();
  if (f.length > 0) {
    writer.writePackedEnum(
      13,
      f
    );
  }
  f = message.getOrder();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
};


/**
 * optional uint32 page = 1;
 * @return {number}
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 size = 2;
 * @return {number}
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp from = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.getFrom = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
*/
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.setFrom = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.clearFrom = function() {
  return this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp to = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.getTo = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
*/
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.setTo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.clearTo = function() {
  return this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.hasTo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated int64 payment_ids = 5;
 * @return {!Array<number>}
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.getPaymentIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.setPaymentIdsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.addPaymentIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.clearPaymentIdsList = function() {
  return this.setPaymentIdsList([]);
};


/**
 * repeated mcuc.stark.PaymentType payment_types = 6;
 * @return {!Array<!proto.mcuc.stark.PaymentType>}
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.getPaymentTypesList = function() {
  return /** @type {!Array<!proto.mcuc.stark.PaymentType>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<!proto.mcuc.stark.PaymentType>} value
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.setPaymentTypesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!proto.mcuc.stark.PaymentType} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.addPaymentTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.clearPaymentTypesList = function() {
  return this.setPaymentTypesList([]);
};


/**
 * repeated mcuc.stark.MethodType methods = 7;
 * @return {!Array<!proto.mcuc.stark.MethodType>}
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.getMethodsList = function() {
  return /** @type {!Array<!proto.mcuc.stark.MethodType>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<!proto.mcuc.stark.MethodType>} value
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.setMethodsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!proto.mcuc.stark.MethodType} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.addMethods = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.clearMethodsList = function() {
  return this.setMethodsList([]);
};


/**
 * repeated mcuc.stark.Status statuses = 8;
 * @return {!Array<!proto.mcuc.stark.Status>}
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.getStatusesList = function() {
  return /** @type {!Array<!proto.mcuc.stark.Status>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<!proto.mcuc.stark.Status>} value
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.setStatusesList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!proto.mcuc.stark.Status} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.addStatuses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.clearStatusesList = function() {
  return this.setStatusesList([]);
};


/**
 * repeated int64 merchant_ids = 9;
 * @return {!Array<number>}
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.getMerchantIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.setMerchantIdsList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.addMerchantIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.clearMerchantIdsList = function() {
  return this.setMerchantIdsList([]);
};


/**
 * repeated mcuc.stark.pepper.BankName bank_names = 10;
 * @return {!Array<!proto.mcuc.stark.pepper.BankName>}
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.getBankNamesList = function() {
  return /** @type {!Array<!proto.mcuc.stark.pepper.BankName>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<!proto.mcuc.stark.pepper.BankName>} value
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.setBankNamesList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!proto.mcuc.stark.pepper.BankName} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.addBankNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.clearBankNamesList = function() {
  return this.setBankNamesList([]);
};


/**
 * repeated mcuc.stark.tony.EWalletName e_wallet_names = 11;
 * @return {!Array<!proto.mcuc.stark.tony.EWalletName>}
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.getEWalletNamesList = function() {
  return /** @type {!Array<!proto.mcuc.stark.tony.EWalletName>} */ (jspb.Message.getRepeatedField(this, 11));
};


/**
 * @param {!Array<!proto.mcuc.stark.tony.EWalletName>} value
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.setEWalletNamesList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {!proto.mcuc.stark.tony.EWalletName} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.addEWalletNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.clearEWalletNamesList = function() {
  return this.setEWalletNamesList([]);
};


/**
 * repeated mcuc.groot.TelcoName telco_names = 12;
 * @return {!Array<!proto.mcuc.groot.TelcoName>}
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.getTelcoNamesList = function() {
  return /** @type {!Array<!proto.mcuc.groot.TelcoName>} */ (jspb.Message.getRepeatedField(this, 12));
};


/**
 * @param {!Array<!proto.mcuc.groot.TelcoName>} value
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.setTelcoNamesList = function(value) {
  return jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {!proto.mcuc.groot.TelcoName} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.addTelcoNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.clearTelcoNamesList = function() {
  return this.setTelcoNamesList([]);
};


/**
 * repeated mcuc.stark.ultron.CryptoWalletName crypto_wallet_name = 13;
 * @return {!Array<!proto.mcuc.stark.ultron.CryptoWalletName>}
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.getCryptoWalletNameList = function() {
  return /** @type {!Array<!proto.mcuc.stark.ultron.CryptoWalletName>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<!proto.mcuc.stark.ultron.CryptoWalletName>} value
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.setCryptoWalletNameList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {!proto.mcuc.stark.ultron.CryptoWalletName} value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.addCryptoWalletName = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.clearCryptoWalletNameList = function() {
  return this.setCryptoWalletNameList([]);
};


/**
 * optional Order order = 14;
 * @return {!proto.mcuc.stark.vision.Order}
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.getOrder = function() {
  return /** @type {!proto.mcuc.stark.vision.Order} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {!proto.mcuc.stark.vision.Order} value
 * @return {!proto.mcuc.stark.vision.ListPaymentsRequest} returns this
 */
proto.mcuc.stark.vision.ListPaymentsRequest.prototype.setOrder = function(value) {
  return jspb.Message.setProto3EnumField(this, 14, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mcuc.stark.vision.ListPaymentsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.vision.ListPaymentsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.vision.ListPaymentsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.vision.ListPaymentsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.vision.ListPaymentsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    stark_api_stark_pb.PaymentWithDetail.toObject, includeInstance),
    total: jspb.Message.getFieldWithDefault(msg, 2, 0),
    currentPage: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.vision.ListPaymentsReply}
 */
proto.mcuc.stark.vision.ListPaymentsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.vision.ListPaymentsReply;
  return proto.mcuc.stark.vision.ListPaymentsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.vision.ListPaymentsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.vision.ListPaymentsReply}
 */
proto.mcuc.stark.vision.ListPaymentsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new stark_api_stark_pb.PaymentWithDetail;
      reader.readMessage(value,stark_api_stark_pb.PaymentWithDetail.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotal(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.vision.ListPaymentsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.vision.ListPaymentsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.vision.ListPaymentsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.vision.ListPaymentsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      stark_api_stark_pb.PaymentWithDetail.serializeBinaryToWriter
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getCurrentPage();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * repeated mcuc.stark.PaymentWithDetail records = 1;
 * @return {!Array<!proto.mcuc.stark.PaymentWithDetail>}
 */
proto.mcuc.stark.vision.ListPaymentsReply.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.mcuc.stark.PaymentWithDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, stark_api_stark_pb.PaymentWithDetail, 1));
};


/**
 * @param {!Array<!proto.mcuc.stark.PaymentWithDetail>} value
 * @return {!proto.mcuc.stark.vision.ListPaymentsReply} returns this
*/
proto.mcuc.stark.vision.ListPaymentsReply.prototype.setRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mcuc.stark.PaymentWithDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mcuc.stark.PaymentWithDetail}
 */
proto.mcuc.stark.vision.ListPaymentsReply.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mcuc.stark.PaymentWithDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mcuc.stark.vision.ListPaymentsReply} returns this
 */
proto.mcuc.stark.vision.ListPaymentsReply.prototype.clearRecordsList = function() {
  return this.setRecordsList([]);
};


/**
 * optional uint64 total = 2;
 * @return {number}
 */
proto.mcuc.stark.vision.ListPaymentsReply.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.vision.ListPaymentsReply} returns this
 */
proto.mcuc.stark.vision.ListPaymentsReply.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 current_page = 3;
 * @return {number}
 */
proto.mcuc.stark.vision.ListPaymentsReply.prototype.getCurrentPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.vision.ListPaymentsReply} returns this
 */
proto.mcuc.stark.vision.ListPaymentsReply.prototype.setCurrentPage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest}
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest;
  return proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest}
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest} returns this
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeRequest.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.oneofGroups_ = [[4,5]];

/**
 * @enum {number}
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  BANK_NAME: 4,
  E_WALLET_NAME: 5
};

/**
 * @return {proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.PayloadCase}
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.prototype.getPayloadCase = function() {
  return /** @type {proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.prototype.toObject = function(opt_includeInstance) {
  return proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    merchantId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    merchantUserId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    paymentMethod: jspb.Message.getFieldWithDefault(msg, 3, 0),
    bankName: jspb.Message.getFieldWithDefault(msg, 4, 0),
    eWalletName: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply}
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply;
  return proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply}
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantUserId(value);
      break;
    case 3:
      var value = /** @type {!proto.mcuc.stark.MethodType} */ (reader.readEnum());
      msg.setPaymentMethod(value);
      break;
    case 4:
      var value = /** @type {!proto.mcuc.stark.pepper.BankName} */ (reader.readEnum());
      msg.setBankName(value);
      break;
    case 5:
      var value = /** @type {!proto.mcuc.stark.tony.EWalletName} */ (reader.readEnum());
      msg.setEWalletName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMerchantId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMerchantUserId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPaymentMethod();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {!proto.mcuc.stark.pepper.BankName} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {!proto.mcuc.stark.tony.EWalletName} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional int64 merchant_id = 1;
 * @return {number}
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.prototype.getMerchantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply} returns this
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.prototype.setMerchantId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 merchant_user_id = 2;
 * @return {number}
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.prototype.getMerchantUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply} returns this
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.prototype.setMerchantUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional mcuc.stark.MethodType payment_method = 3;
 * @return {!proto.mcuc.stark.MethodType}
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.prototype.getPaymentMethod = function() {
  return /** @type {!proto.mcuc.stark.MethodType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.mcuc.stark.MethodType} value
 * @return {!proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply} returns this
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.prototype.setPaymentMethod = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional mcuc.stark.pepper.BankName bank_name = 4;
 * @return {!proto.mcuc.stark.pepper.BankName}
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.prototype.getBankName = function() {
  return /** @type {!proto.mcuc.stark.pepper.BankName} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.mcuc.stark.pepper.BankName} value
 * @return {!proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply} returns this
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.prototype.setBankName = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply} returns this
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.prototype.clearBankName = function() {
  return jspb.Message.setOneofField(this, 4, proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.prototype.hasBankName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional mcuc.stark.tony.EWalletName e_wallet_name = 5;
 * @return {!proto.mcuc.stark.tony.EWalletName}
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.prototype.getEWalletName = function() {
  return /** @type {!proto.mcuc.stark.tony.EWalletName} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.mcuc.stark.tony.EWalletName} value
 * @return {!proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply} returns this
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.prototype.setEWalletName = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply} returns this
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.prototype.clearEWalletName = function() {
  return jspb.Message.setOneofField(this, 5, proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mcuc.stark.vision.GetPaymentInfoByPaymentCodeReply.prototype.hasEWalletName = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * @enum {number}
 */
proto.mcuc.stark.vision.Order = {
  UNSPECIFIED: 0,
  CREATED_AT_ASC: 1,
  CREATED_AT_DESC: 2,
  UPDATED_AT_ASC: 3,
  UPDATED_AT_DESC: 4
};

goog.object.extend(exports, proto.mcuc.stark.vision);
