"use strict";
/**
 * @fileoverview gRPC-Web generated client stub for mcuc.stark.howard
 * @enhanceable
 * @public
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HowardClient = void 0;
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
var grpcWeb = __importStar(require("grpc-web"));
var stark_api_howard_pb = __importStar(require("./howard_pb"));
var HowardClient = /** @class */ (function () {
    function HowardClient(hostname, credentials, options) {
        this.methodInfoGetStatistic = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_howard_pb.GetStatisticReply, function (request) {
            return request.serializeBinary();
        }, stark_api_howard_pb.GetStatisticReply.deserializeBinary);
        this.methodInfoGetProcessingPerformance = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_howard_pb.GetProcessingPerformanceReply, function (request) {
            return request.serializeBinary();
        }, stark_api_howard_pb.GetProcessingPerformanceReply.deserializeBinary);
        this.methodInfoGetTotalAmount = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_howard_pb.GetTotalAmountReply, function (request) {
            return request.serializeBinary();
        }, stark_api_howard_pb.GetTotalAmountReply.deserializeBinary);
        this.methodInfoGetIncomeStatement = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_howard_pb.GetIncomeStatementReply, function (request) {
            return request.serializeBinary();
        }, stark_api_howard_pb.GetIncomeStatementReply.deserializeBinary);
        this.methodInfoGetPaymentToday = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_howard_pb.GetPaymentTodayReply, function (request) {
            return request.serializeBinary();
        }, stark_api_howard_pb.GetPaymentTodayReply.deserializeBinary);
        this.methodInfoGetProfitRate = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_howard_pb.GetProfitRateReply, function (request) {
            return request.serializeBinary();
        }, stark_api_howard_pb.GetProfitRateReply.deserializeBinary);
        this.methodInfoGetAllocationTopUpRate = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_howard_pb.GetAllocationTopUpRateReply, function (request) {
            return request.serializeBinary();
        }, stark_api_howard_pb.GetAllocationTopUpRateReply.deserializeBinary);
        this.methodInfoGetAllocationWithdrawRate = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_howard_pb.GetAllocationWithdrawRateReply, function (request) {
            return request.serializeBinary();
        }, stark_api_howard_pb.GetAllocationWithdrawRateReply.deserializeBinary);
        this.methodInfoGetTopPaymentMethod = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_howard_pb.GetTopPaymentMethodReply, function (request) {
            return request.serializeBinary();
        }, stark_api_howard_pb.GetTopPaymentMethodReply.deserializeBinary);
        this.methodInfoGetTopTeller = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_howard_pb.GetTopTellerReply, function (request) {
            return request.serializeBinary();
        }, stark_api_howard_pb.GetTopTellerReply.deserializeBinary);
        this.methodInfoGetSellReportByTimeRange = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_howard_pb.GetSellReportByTimeRangeReply, function (request) {
            return request.serializeBinary();
        }, stark_api_howard_pb.GetSellReportByTimeRangeReply.deserializeBinary);
        this.methodInfoGetSellReportByMerchant = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_howard_pb.GetSellReportByMerchantReply, function (request) {
            return request.serializeBinary();
        }, stark_api_howard_pb.GetSellReportByMerchantReply.deserializeBinary);
        this.methodInfoGetSellReportByPaymentMethod = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_howard_pb.GetSellReportByPaymentMethodReply, function (request) {
            return request.serializeBinary();
        }, stark_api_howard_pb.GetSellReportByPaymentMethodReply.deserializeBinary);
        this.methodInfoGetSellReportByTeller = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_howard_pb.GetSellReportByTellerReply, function (request) {
            return request.serializeBinary();
        }, stark_api_howard_pb.GetSellReportByTellerReply.deserializeBinary);
        if (!options)
            options = {};
        if (!credentials)
            credentials = {};
        options['format'] = 'text';
        this.client_ = new grpcWeb.GrpcWebClientBase(options);
        this.hostname_ = hostname;
        this.credentials_ = credentials;
        this.options_ = options;
    }
    HowardClient.prototype.getStatistic = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.howard.Howard/GetStatistic', request, metadata || {}, this.methodInfoGetStatistic, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.howard.Howard/GetStatistic', request, metadata || {}, this.methodInfoGetStatistic);
    };
    HowardClient.prototype.getProcessingPerformance = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.howard.Howard/GetProcessingPerformance', request, metadata || {}, this.methodInfoGetProcessingPerformance, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.howard.Howard/GetProcessingPerformance', request, metadata || {}, this.methodInfoGetProcessingPerformance);
    };
    HowardClient.prototype.getTotalAmount = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.howard.Howard/GetTotalAmount', request, metadata || {}, this.methodInfoGetTotalAmount, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.howard.Howard/GetTotalAmount', request, metadata || {}, this.methodInfoGetTotalAmount);
    };
    HowardClient.prototype.getIncomeStatement = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.howard.Howard/GetIncomeStatement', request, metadata || {}, this.methodInfoGetIncomeStatement, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.howard.Howard/GetIncomeStatement', request, metadata || {}, this.methodInfoGetIncomeStatement);
    };
    HowardClient.prototype.getPaymentToday = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.howard.Howard/GetPaymentToday', request, metadata || {}, this.methodInfoGetPaymentToday, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.howard.Howard/GetPaymentToday', request, metadata || {}, this.methodInfoGetPaymentToday);
    };
    HowardClient.prototype.getProfitRate = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.howard.Howard/GetProfitRate', request, metadata || {}, this.methodInfoGetProfitRate, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.howard.Howard/GetProfitRate', request, metadata || {}, this.methodInfoGetProfitRate);
    };
    HowardClient.prototype.getAllocationTopUpRate = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.howard.Howard/GetAllocationTopUpRate', request, metadata || {}, this.methodInfoGetAllocationTopUpRate, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.howard.Howard/GetAllocationTopUpRate', request, metadata || {}, this.methodInfoGetAllocationTopUpRate);
    };
    HowardClient.prototype.getAllocationWithdrawRate = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.howard.Howard/GetAllocationWithdrawRate', request, metadata || {}, this.methodInfoGetAllocationWithdrawRate, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.howard.Howard/GetAllocationWithdrawRate', request, metadata || {}, this.methodInfoGetAllocationWithdrawRate);
    };
    HowardClient.prototype.getTopPaymentMethod = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.howard.Howard/GetTopPaymentMethod', request, metadata || {}, this.methodInfoGetTopPaymentMethod, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.howard.Howard/GetTopPaymentMethod', request, metadata || {}, this.methodInfoGetTopPaymentMethod);
    };
    HowardClient.prototype.getTopTeller = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.howard.Howard/GetTopTeller', request, metadata || {}, this.methodInfoGetTopTeller, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.howard.Howard/GetTopTeller', request, metadata || {}, this.methodInfoGetTopTeller);
    };
    HowardClient.prototype.getSellReportByTimeRange = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.howard.Howard/GetSellReportByTimeRange', request, metadata || {}, this.methodInfoGetSellReportByTimeRange, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.howard.Howard/GetSellReportByTimeRange', request, metadata || {}, this.methodInfoGetSellReportByTimeRange);
    };
    HowardClient.prototype.getSellReportByMerchant = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.howard.Howard/GetSellReportByMerchant', request, metadata || {}, this.methodInfoGetSellReportByMerchant, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.howard.Howard/GetSellReportByMerchant', request, metadata || {}, this.methodInfoGetSellReportByMerchant);
    };
    HowardClient.prototype.getSellReportByPaymentMethod = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.howard.Howard/GetSellReportByPaymentMethod', request, metadata || {}, this.methodInfoGetSellReportByPaymentMethod, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.howard.Howard/GetSellReportByPaymentMethod', request, metadata || {}, this.methodInfoGetSellReportByPaymentMethod);
    };
    HowardClient.prototype.getSellReportByTeller = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.howard.Howard/GetSellReportByTeller', request, metadata || {}, this.methodInfoGetSellReportByTeller, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.howard.Howard/GetSellReportByTeller', request, metadata || {}, this.methodInfoGetSellReportByTeller);
    };
    return HowardClient;
}());
exports.HowardClient = HowardClient;
