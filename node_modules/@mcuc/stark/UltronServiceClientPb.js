"use strict";
/**
 * @fileoverview gRPC-Web generated client stub for mcuc.stark.ultron
 * @enhanceable
 * @public
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UltronClient = void 0;
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
var grpcWeb = __importStar(require("grpc-web"));
var stark_api_ultron_pb = __importStar(require("./ultron_pb"));
var UltronClient = /** @class */ (function () {
    function UltronClient(hostname, credentials, options) {
        this.methodInfoCreateCryptoWithdraw = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_ultron_pb.CreateCryptoWithdrawReply, function (request) {
            return request.serializeBinary();
        }, stark_api_ultron_pb.CreateCryptoWithdrawReply.deserializeBinary);
        this.methodInfoCancelCryptoWithdraw = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_ultron_pb.CancelCryptoWithdrawReply, function (request) {
            return request.serializeBinary();
        }, stark_api_ultron_pb.CancelCryptoWithdrawReply.deserializeBinary);
        this.methodInfoApproveCryptoWithdraw = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_ultron_pb.ApproveCryptoWithdrawReply, function (request) {
            return request.serializeBinary();
        }, stark_api_ultron_pb.ApproveCryptoWithdrawReply.deserializeBinary);
        this.methodInfoSubmitCryptoWithdraw = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_ultron_pb.SubmitCryptoWithdrawReply, function (request) {
            return request.serializeBinary();
        }, stark_api_ultron_pb.SubmitCryptoWithdrawReply.deserializeBinary);
        this.methodInfoRejectCryptoWithdraw = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_ultron_pb.RejectCryptoWithdrawReply, function (request) {
            return request.serializeBinary();
        }, stark_api_ultron_pb.RejectCryptoWithdrawReply.deserializeBinary);
        this.methodInfoCancelCryptoTopUp = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_ultron_pb.CancelCryptoTopUpReply, function (request) {
            return request.serializeBinary();
        }, stark_api_ultron_pb.CancelCryptoTopUpReply.deserializeBinary);
        this.methodInfoApproveCryptoTopUp = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_ultron_pb.ApproveCryptoTopUpReply, function (request) {
            return request.serializeBinary();
        }, stark_api_ultron_pb.ApproveCryptoTopUpReply.deserializeBinary);
        this.methodInfoRejectCryptoTopUp = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_ultron_pb.RejectCryptoTopUpReply, function (request) {
            return request.serializeBinary();
        }, stark_api_ultron_pb.RejectCryptoTopUpReply.deserializeBinary);
        this.methodInfoGetCryptoWallet = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_ultron_pb.GetCryptoWalletReply, function (request) {
            return request.serializeBinary();
        }, stark_api_ultron_pb.GetCryptoWalletReply.deserializeBinary);
        this.methodInfoValidateCryptoWallets = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_ultron_pb.ValidateCryptoWalletsReply, function (request) {
            return request.serializeBinary();
        }, stark_api_ultron_pb.ValidateCryptoWalletsReply.deserializeBinary);
        this.methodInfoImportCryptoWallets = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_ultron_pb.ImportCryptoWalletsReply, function (request) {
            return request.serializeBinary();
        }, stark_api_ultron_pb.ImportCryptoWalletsReply.deserializeBinary);
        this.methodInfoListCryptoWallets = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_ultron_pb.ListCryptoWalletsReply, function (request) {
            return request.serializeBinary();
        }, stark_api_ultron_pb.ListCryptoWalletsReply.deserializeBinary);
        this.methodInfoValidateCryptoHotWallets = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_ultron_pb.ValidateCryptoHotWalletsReply, function (request) {
            return request.serializeBinary();
        }, stark_api_ultron_pb.ValidateCryptoHotWalletsReply.deserializeBinary);
        this.methodInfoImportCryptoHotWallets = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_ultron_pb.ImportCryptoHotWalletsReply, function (request) {
            return request.serializeBinary();
        }, stark_api_ultron_pb.ImportCryptoHotWalletsReply.deserializeBinary);
        this.methodInfoListCryptoHotWallets = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_ultron_pb.ListCryptoHotWalletsReply, function (request) {
            return request.serializeBinary();
        }, stark_api_ultron_pb.ListCryptoHotWalletsReply.deserializeBinary);
        this.methodInfoGetSystemCryptoHotWallets = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_ultron_pb.GetSystemCryptoHotWalletsReply, function (request) {
            return request.serializeBinary();
        }, stark_api_ultron_pb.GetSystemCryptoHotWalletsReply.deserializeBinary);
        this.methodInfoLoadCryptoWallets = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_ultron_pb.LoadCryptoWalletsReply, function (request) {
            return request.serializeBinary();
        }, stark_api_ultron_pb.LoadCryptoWalletsReply.deserializeBinary);
        this.methodInfoUpdateAutoTransferCryptoWithdraw = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_ultron_pb.UpdateAutoTransferCryptoWithdrawReply, function (request) {
            return request.serializeBinary();
        }, stark_api_ultron_pb.UpdateAutoTransferCryptoWithdrawReply.deserializeBinary);
        this.methodInfoGetCryptoSettings = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_ultron_pb.GetCryptoSettingsReply, function (request) {
            return request.serializeBinary();
        }, stark_api_ultron_pb.GetCryptoSettingsReply.deserializeBinary);
        this.methodInfoCallbackTransaction = new grpcWeb.AbstractClientBase.MethodInfo(stark_api_ultron_pb.CallbackTransactionReply, function (request) {
            return request.serializeBinary();
        }, stark_api_ultron_pb.CallbackTransactionReply.deserializeBinary);
        if (!options)
            options = {};
        if (!credentials)
            credentials = {};
        options['format'] = 'text';
        this.client_ = new grpcWeb.GrpcWebClientBase(options);
        this.hostname_ = hostname;
        this.credentials_ = credentials;
        this.options_ = options;
    }
    UltronClient.prototype.createCryptoWithdraw = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.ultron.Ultron/CreateCryptoWithdraw', request, metadata || {}, this.methodInfoCreateCryptoWithdraw, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.ultron.Ultron/CreateCryptoWithdraw', request, metadata || {}, this.methodInfoCreateCryptoWithdraw);
    };
    UltronClient.prototype.cancelCryptoWithdraw = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.ultron.Ultron/CancelCryptoWithdraw', request, metadata || {}, this.methodInfoCancelCryptoWithdraw, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.ultron.Ultron/CancelCryptoWithdraw', request, metadata || {}, this.methodInfoCancelCryptoWithdraw);
    };
    UltronClient.prototype.approveCryptoWithdraw = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.ultron.Ultron/ApproveCryptoWithdraw', request, metadata || {}, this.methodInfoApproveCryptoWithdraw, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.ultron.Ultron/ApproveCryptoWithdraw', request, metadata || {}, this.methodInfoApproveCryptoWithdraw);
    };
    UltronClient.prototype.submitCryptoWithdraw = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.ultron.Ultron/SubmitCryptoWithdraw', request, metadata || {}, this.methodInfoSubmitCryptoWithdraw, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.ultron.Ultron/SubmitCryptoWithdraw', request, metadata || {}, this.methodInfoSubmitCryptoWithdraw);
    };
    UltronClient.prototype.rejectCryptoWithdraw = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.ultron.Ultron/RejectCryptoWithdraw', request, metadata || {}, this.methodInfoRejectCryptoWithdraw, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.ultron.Ultron/RejectCryptoWithdraw', request, metadata || {}, this.methodInfoRejectCryptoWithdraw);
    };
    UltronClient.prototype.cancelCryptoTopUp = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.ultron.Ultron/CancelCryptoTopUp', request, metadata || {}, this.methodInfoCancelCryptoTopUp, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.ultron.Ultron/CancelCryptoTopUp', request, metadata || {}, this.methodInfoCancelCryptoTopUp);
    };
    UltronClient.prototype.approveCryptoTopUp = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.ultron.Ultron/ApproveCryptoTopUp', request, metadata || {}, this.methodInfoApproveCryptoTopUp, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.ultron.Ultron/ApproveCryptoTopUp', request, metadata || {}, this.methodInfoApproveCryptoTopUp);
    };
    UltronClient.prototype.rejectCryptoTopUp = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.ultron.Ultron/RejectCryptoTopUp', request, metadata || {}, this.methodInfoRejectCryptoTopUp, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.ultron.Ultron/RejectCryptoTopUp', request, metadata || {}, this.methodInfoRejectCryptoTopUp);
    };
    UltronClient.prototype.getCryptoWallet = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.ultron.Ultron/GetCryptoWallet', request, metadata || {}, this.methodInfoGetCryptoWallet, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.ultron.Ultron/GetCryptoWallet', request, metadata || {}, this.methodInfoGetCryptoWallet);
    };
    UltronClient.prototype.validateCryptoWallets = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.ultron.Ultron/ValidateCryptoWallets', request, metadata || {}, this.methodInfoValidateCryptoWallets, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.ultron.Ultron/ValidateCryptoWallets', request, metadata || {}, this.methodInfoValidateCryptoWallets);
    };
    UltronClient.prototype.importCryptoWallets = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.ultron.Ultron/ImportCryptoWallets', request, metadata || {}, this.methodInfoImportCryptoWallets, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.ultron.Ultron/ImportCryptoWallets', request, metadata || {}, this.methodInfoImportCryptoWallets);
    };
    UltronClient.prototype.listCryptoWallets = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.ultron.Ultron/ListCryptoWallets', request, metadata || {}, this.methodInfoListCryptoWallets, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.ultron.Ultron/ListCryptoWallets', request, metadata || {}, this.methodInfoListCryptoWallets);
    };
    UltronClient.prototype.validateCryptoHotWallets = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.ultron.Ultron/ValidateCryptoHotWallets', request, metadata || {}, this.methodInfoValidateCryptoHotWallets, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.ultron.Ultron/ValidateCryptoHotWallets', request, metadata || {}, this.methodInfoValidateCryptoHotWallets);
    };
    UltronClient.prototype.importCryptoHotWallets = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.ultron.Ultron/ImportCryptoHotWallets', request, metadata || {}, this.methodInfoImportCryptoHotWallets, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.ultron.Ultron/ImportCryptoHotWallets', request, metadata || {}, this.methodInfoImportCryptoHotWallets);
    };
    UltronClient.prototype.listCryptoHotWallets = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.ultron.Ultron/ListCryptoHotWallets', request, metadata || {}, this.methodInfoListCryptoHotWallets, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.ultron.Ultron/ListCryptoHotWallets', request, metadata || {}, this.methodInfoListCryptoHotWallets);
    };
    UltronClient.prototype.getSystemCryptoHotWallets = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.ultron.Ultron/GetSystemCryptoHotWallets', request, metadata || {}, this.methodInfoGetSystemCryptoHotWallets, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.ultron.Ultron/GetSystemCryptoHotWallets', request, metadata || {}, this.methodInfoGetSystemCryptoHotWallets);
    };
    UltronClient.prototype.loadCryptoWallets = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.ultron.Ultron/LoadCryptoWallets', request, metadata || {}, this.methodInfoLoadCryptoWallets, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.ultron.Ultron/LoadCryptoWallets', request, metadata || {}, this.methodInfoLoadCryptoWallets);
    };
    UltronClient.prototype.updateAutoTransferCryptoWithdraw = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.ultron.Ultron/UpdateAutoTransferCryptoWithdraw', request, metadata || {}, this.methodInfoUpdateAutoTransferCryptoWithdraw, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.ultron.Ultron/UpdateAutoTransferCryptoWithdraw', request, metadata || {}, this.methodInfoUpdateAutoTransferCryptoWithdraw);
    };
    UltronClient.prototype.getCryptoSettings = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.ultron.Ultron/GetCryptoSettings', request, metadata || {}, this.methodInfoGetCryptoSettings, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.ultron.Ultron/GetCryptoSettings', request, metadata || {}, this.methodInfoGetCryptoSettings);
    };
    UltronClient.prototype.callbackTransaction = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/mcuc.stark.ultron.Ultron/CallbackTransaction', request, metadata || {}, this.methodInfoCallbackTransaction, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/mcuc.stark.ultron.Ultron/CallbackTransaction', request, metadata || {}, this.methodInfoCallbackTransaction);
    };
    return UltronClient;
}());
exports.UltronClient = UltronClient;
