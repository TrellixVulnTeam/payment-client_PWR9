/**
 * @fileoverview gRPC-Web generated client stub for mcuc.stark.tony
 * @enhanceable
 * @public
 */

// GENERATED CODE -- DO NOT EDIT!


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as stark_api_tony_pb from './tony_pb';


export class TonyClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname;
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodInfoGetEWalletPaymentCode = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_tony_pb.GetEWalletPaymentCodeReply,
    (request: stark_api_tony_pb.GetEWalletPaymentCodeRequest) => {
      return request.serializeBinary();
    },
    stark_api_tony_pb.GetEWalletPaymentCodeReply.deserializeBinary
  );

  getEWalletPaymentCode(
    request: stark_api_tony_pb.GetEWalletPaymentCodeRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_tony_pb.GetEWalletPaymentCodeReply>;

  getEWalletPaymentCode(
    request: stark_api_tony_pb.GetEWalletPaymentCodeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_tony_pb.GetEWalletPaymentCodeReply) => void): grpcWeb.ClientReadableStream<stark_api_tony_pb.GetEWalletPaymentCodeReply>;

  getEWalletPaymentCode(
    request: stark_api_tony_pb.GetEWalletPaymentCodeRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_tony_pb.GetEWalletPaymentCodeReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.tony.Tony/GetEWalletPaymentCode',
        request,
        metadata || {},
        this.methodInfoGetEWalletPaymentCode,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.tony.Tony/GetEWalletPaymentCode',
    request,
    metadata || {},
    this.methodInfoGetEWalletPaymentCode);
  }

  methodInfoCancelEWalletTopUp = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_tony_pb.CancelEWalletTopUpReply,
    (request: stark_api_tony_pb.CancelEWalletTopUpRequest) => {
      return request.serializeBinary();
    },
    stark_api_tony_pb.CancelEWalletTopUpReply.deserializeBinary
  );

  cancelEWalletTopUp(
    request: stark_api_tony_pb.CancelEWalletTopUpRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_tony_pb.CancelEWalletTopUpReply>;

  cancelEWalletTopUp(
    request: stark_api_tony_pb.CancelEWalletTopUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_tony_pb.CancelEWalletTopUpReply) => void): grpcWeb.ClientReadableStream<stark_api_tony_pb.CancelEWalletTopUpReply>;

  cancelEWalletTopUp(
    request: stark_api_tony_pb.CancelEWalletTopUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_tony_pb.CancelEWalletTopUpReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.tony.Tony/CancelEWalletTopUp',
        request,
        metadata || {},
        this.methodInfoCancelEWalletTopUp,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.tony.Tony/CancelEWalletTopUp',
    request,
    metadata || {},
    this.methodInfoCancelEWalletTopUp);
  }

  methodInfoCreateEWalletTopUp = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_tony_pb.CreateEWalletTopUpReply,
    (request: stark_api_tony_pb.CreateEWalletTopUpRequest) => {
      return request.serializeBinary();
    },
    stark_api_tony_pb.CreateEWalletTopUpReply.deserializeBinary
  );

  createEWalletTopUp(
    request: stark_api_tony_pb.CreateEWalletTopUpRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_tony_pb.CreateEWalletTopUpReply>;

  createEWalletTopUp(
    request: stark_api_tony_pb.CreateEWalletTopUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_tony_pb.CreateEWalletTopUpReply) => void): grpcWeb.ClientReadableStream<stark_api_tony_pb.CreateEWalletTopUpReply>;

  createEWalletTopUp(
    request: stark_api_tony_pb.CreateEWalletTopUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_tony_pb.CreateEWalletTopUpReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.tony.Tony/CreateEWalletTopUp',
        request,
        metadata || {},
        this.methodInfoCreateEWalletTopUp,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.tony.Tony/CreateEWalletTopUp',
    request,
    metadata || {},
    this.methodInfoCreateEWalletTopUp);
  }

  methodInfoApproveEWalletTopUp = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_tony_pb.ApproveEWalletTopUpReply,
    (request: stark_api_tony_pb.ApproveEWalletTopUpRequest) => {
      return request.serializeBinary();
    },
    stark_api_tony_pb.ApproveEWalletTopUpReply.deserializeBinary
  );

  approveEWalletTopUp(
    request: stark_api_tony_pb.ApproveEWalletTopUpRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_tony_pb.ApproveEWalletTopUpReply>;

  approveEWalletTopUp(
    request: stark_api_tony_pb.ApproveEWalletTopUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_tony_pb.ApproveEWalletTopUpReply) => void): grpcWeb.ClientReadableStream<stark_api_tony_pb.ApproveEWalletTopUpReply>;

  approveEWalletTopUp(
    request: stark_api_tony_pb.ApproveEWalletTopUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_tony_pb.ApproveEWalletTopUpReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.tony.Tony/ApproveEWalletTopUp',
        request,
        metadata || {},
        this.methodInfoApproveEWalletTopUp,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.tony.Tony/ApproveEWalletTopUp',
    request,
    metadata || {},
    this.methodInfoApproveEWalletTopUp);
  }

  methodInfoRejectEWalletTopUp = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_tony_pb.RejectEWalletTopUpReply,
    (request: stark_api_tony_pb.RejectEWalletTopUpRequest) => {
      return request.serializeBinary();
    },
    stark_api_tony_pb.RejectEWalletTopUpReply.deserializeBinary
  );

  rejectEWalletTopUp(
    request: stark_api_tony_pb.RejectEWalletTopUpRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_tony_pb.RejectEWalletTopUpReply>;

  rejectEWalletTopUp(
    request: stark_api_tony_pb.RejectEWalletTopUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_tony_pb.RejectEWalletTopUpReply) => void): grpcWeb.ClientReadableStream<stark_api_tony_pb.RejectEWalletTopUpReply>;

  rejectEWalletTopUp(
    request: stark_api_tony_pb.RejectEWalletTopUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_tony_pb.RejectEWalletTopUpReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.tony.Tony/RejectEWalletTopUp',
        request,
        metadata || {},
        this.methodInfoRejectEWalletTopUp,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.tony.Tony/RejectEWalletTopUp',
    request,
    metadata || {},
    this.methodInfoRejectEWalletTopUp);
  }

  methodInfoGetSystemEWallets = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_tony_pb.GetSystemEWalletsReply,
    (request: stark_api_tony_pb.GetSystemEWalletsRequest) => {
      return request.serializeBinary();
    },
    stark_api_tony_pb.GetSystemEWalletsReply.deserializeBinary
  );

  getSystemEWallets(
    request: stark_api_tony_pb.GetSystemEWalletsRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_tony_pb.GetSystemEWalletsReply>;

  getSystemEWallets(
    request: stark_api_tony_pb.GetSystemEWalletsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_tony_pb.GetSystemEWalletsReply) => void): grpcWeb.ClientReadableStream<stark_api_tony_pb.GetSystemEWalletsReply>;

  getSystemEWallets(
    request: stark_api_tony_pb.GetSystemEWalletsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_tony_pb.GetSystemEWalletsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.tony.Tony/GetSystemEWallets',
        request,
        metadata || {},
        this.methodInfoGetSystemEWallets,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.tony.Tony/GetSystemEWallets',
    request,
    metadata || {},
    this.methodInfoGetSystemEWallets);
  }

  methodInfoCreateSystemEWallet = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_tony_pb.CreateSystemEWalletReply,
    (request: stark_api_tony_pb.CreateSystemEWalletRequest) => {
      return request.serializeBinary();
    },
    stark_api_tony_pb.CreateSystemEWalletReply.deserializeBinary
  );

  createSystemEWallet(
    request: stark_api_tony_pb.CreateSystemEWalletRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_tony_pb.CreateSystemEWalletReply>;

  createSystemEWallet(
    request: stark_api_tony_pb.CreateSystemEWalletRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_tony_pb.CreateSystemEWalletReply) => void): grpcWeb.ClientReadableStream<stark_api_tony_pb.CreateSystemEWalletReply>;

  createSystemEWallet(
    request: stark_api_tony_pb.CreateSystemEWalletRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_tony_pb.CreateSystemEWalletReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.tony.Tony/CreateSystemEWallet',
        request,
        metadata || {},
        this.methodInfoCreateSystemEWallet,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.tony.Tony/CreateSystemEWallet',
    request,
    metadata || {},
    this.methodInfoCreateSystemEWallet);
  }

  methodInfoUpdateSystemEWalletStatus = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_tony_pb.UpdateSystemEWalletStatusReply,
    (request: stark_api_tony_pb.UpdateSystemEWalletStatusRequest) => {
      return request.serializeBinary();
    },
    stark_api_tony_pb.UpdateSystemEWalletStatusReply.deserializeBinary
  );

  updateSystemEWalletStatus(
    request: stark_api_tony_pb.UpdateSystemEWalletStatusRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_tony_pb.UpdateSystemEWalletStatusReply>;

  updateSystemEWalletStatus(
    request: stark_api_tony_pb.UpdateSystemEWalletStatusRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_tony_pb.UpdateSystemEWalletStatusReply) => void): grpcWeb.ClientReadableStream<stark_api_tony_pb.UpdateSystemEWalletStatusReply>;

  updateSystemEWalletStatus(
    request: stark_api_tony_pb.UpdateSystemEWalletStatusRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_tony_pb.UpdateSystemEWalletStatusReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.tony.Tony/UpdateSystemEWalletStatus',
        request,
        metadata || {},
        this.methodInfoUpdateSystemEWalletStatus,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.tony.Tony/UpdateSystemEWalletStatus',
    request,
    metadata || {},
    this.methodInfoUpdateSystemEWalletStatus);
  }

  methodInfoListSystemEWallets = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_tony_pb.ListSystemEWalletsReply,
    (request: stark_api_tony_pb.ListSystemEWalletsRequest) => {
      return request.serializeBinary();
    },
    stark_api_tony_pb.ListSystemEWalletsReply.deserializeBinary
  );

  listSystemEWallets(
    request: stark_api_tony_pb.ListSystemEWalletsRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_tony_pb.ListSystemEWalletsReply>;

  listSystemEWallets(
    request: stark_api_tony_pb.ListSystemEWalletsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_tony_pb.ListSystemEWalletsReply) => void): grpcWeb.ClientReadableStream<stark_api_tony_pb.ListSystemEWalletsReply>;

  listSystemEWallets(
    request: stark_api_tony_pb.ListSystemEWalletsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_tony_pb.ListSystemEWalletsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.tony.Tony/ListSystemEWallets',
        request,
        metadata || {},
        this.methodInfoListSystemEWallets,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.tony.Tony/ListSystemEWallets',
    request,
    metadata || {},
    this.methodInfoListSystemEWallets);
  }

  methodInfoValidateSystemEWallets = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_tony_pb.ValidateSystemEWalletsReply,
    (request: stark_api_tony_pb.ValidateSystemEWalletsRequest) => {
      return request.serializeBinary();
    },
    stark_api_tony_pb.ValidateSystemEWalletsReply.deserializeBinary
  );

  validateSystemEWallets(
    request: stark_api_tony_pb.ValidateSystemEWalletsRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_tony_pb.ValidateSystemEWalletsReply>;

  validateSystemEWallets(
    request: stark_api_tony_pb.ValidateSystemEWalletsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_tony_pb.ValidateSystemEWalletsReply) => void): grpcWeb.ClientReadableStream<stark_api_tony_pb.ValidateSystemEWalletsReply>;

  validateSystemEWallets(
    request: stark_api_tony_pb.ValidateSystemEWalletsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_tony_pb.ValidateSystemEWalletsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.tony.Tony/ValidateSystemEWallets',
        request,
        metadata || {},
        this.methodInfoValidateSystemEWallets,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.tony.Tony/ValidateSystemEWallets',
    request,
    metadata || {},
    this.methodInfoValidateSystemEWallets);
  }

  methodInfoImportSystemEWallets = new grpcWeb.AbstractClientBase.MethodInfo(
    stark_api_tony_pb.ImportSystemEWalletsReply,
    (request: stark_api_tony_pb.ImportSystemEWalletsRequest) => {
      return request.serializeBinary();
    },
    stark_api_tony_pb.ImportSystemEWalletsReply.deserializeBinary
  );

  importSystemEWallets(
    request: stark_api_tony_pb.ImportSystemEWalletsRequest,
    metadata: grpcWeb.Metadata | null): Promise<stark_api_tony_pb.ImportSystemEWalletsReply>;

  importSystemEWallets(
    request: stark_api_tony_pb.ImportSystemEWalletsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: stark_api_tony_pb.ImportSystemEWalletsReply) => void): grpcWeb.ClientReadableStream<stark_api_tony_pb.ImportSystemEWalletsReply>;

  importSystemEWallets(
    request: stark_api_tony_pb.ImportSystemEWalletsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: stark_api_tony_pb.ImportSystemEWalletsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.stark.tony.Tony/ImportSystemEWallets',
        request,
        metadata || {},
        this.methodInfoImportSystemEWallets,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.stark.tony.Tony/ImportSystemEWallets',
    request,
    metadata || {},
    this.methodInfoImportSystemEWallets);
  }

}

