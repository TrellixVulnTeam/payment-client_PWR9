/**
 * @fileoverview gRPC-Web generated client stub for mcuc.stark.howard
 * @enhanceable
 * @public
 */
import * as grpcWeb from 'grpc-web';
import * as stark_api_howard_pb from './howard_pb';
export declare class HowardClient {
    client_: grpcWeb.AbstractClientBase;
    hostname_: string;
    credentials_: null | {
        [index: string]: string;
    };
    options_: null | {
        [index: string]: any;
    };
    constructor(hostname: string, credentials?: null | {
        [index: string]: string;
    }, options?: null | {
        [index: string]: any;
    });
    methodInfoGetStatistic: any;
    getStatistic(request: stark_api_howard_pb.GetStatisticRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_howard_pb.GetStatisticReply>;
    getStatistic(request: stark_api_howard_pb.GetStatisticRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_howard_pb.GetStatisticReply) => void): grpcWeb.ClientReadableStream<stark_api_howard_pb.GetStatisticReply>;
    methodInfoGetProcessingPerformance: any;
    getProcessingPerformance(request: stark_api_howard_pb.GetProcessingPerformanceRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_howard_pb.GetProcessingPerformanceReply>;
    getProcessingPerformance(request: stark_api_howard_pb.GetProcessingPerformanceRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_howard_pb.GetProcessingPerformanceReply) => void): grpcWeb.ClientReadableStream<stark_api_howard_pb.GetProcessingPerformanceReply>;
    methodInfoGetTotalAmount: any;
    getTotalAmount(request: stark_api_howard_pb.GetTotalAmountRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_howard_pb.GetTotalAmountReply>;
    getTotalAmount(request: stark_api_howard_pb.GetTotalAmountRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_howard_pb.GetTotalAmountReply) => void): grpcWeb.ClientReadableStream<stark_api_howard_pb.GetTotalAmountReply>;
    methodInfoGetIncomeStatement: any;
    getIncomeStatement(request: stark_api_howard_pb.GetReportRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_howard_pb.GetIncomeStatementReply>;
    getIncomeStatement(request: stark_api_howard_pb.GetReportRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_howard_pb.GetIncomeStatementReply) => void): grpcWeb.ClientReadableStream<stark_api_howard_pb.GetIncomeStatementReply>;
    methodInfoGetPaymentToday: any;
    getPaymentToday(request: stark_api_howard_pb.GetReportRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_howard_pb.GetPaymentTodayReply>;
    getPaymentToday(request: stark_api_howard_pb.GetReportRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_howard_pb.GetPaymentTodayReply) => void): grpcWeb.ClientReadableStream<stark_api_howard_pb.GetPaymentTodayReply>;
    methodInfoGetProfitRate: any;
    getProfitRate(request: stark_api_howard_pb.GetReportRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_howard_pb.GetProfitRateReply>;
    getProfitRate(request: stark_api_howard_pb.GetReportRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_howard_pb.GetProfitRateReply) => void): grpcWeb.ClientReadableStream<stark_api_howard_pb.GetProfitRateReply>;
    methodInfoGetAllocationTopUpRate: any;
    getAllocationTopUpRate(request: stark_api_howard_pb.GetReportRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_howard_pb.GetAllocationTopUpRateReply>;
    getAllocationTopUpRate(request: stark_api_howard_pb.GetReportRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_howard_pb.GetAllocationTopUpRateReply) => void): grpcWeb.ClientReadableStream<stark_api_howard_pb.GetAllocationTopUpRateReply>;
    methodInfoGetAllocationWithdrawRate: any;
    getAllocationWithdrawRate(request: stark_api_howard_pb.GetReportRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_howard_pb.GetAllocationWithdrawRateReply>;
    getAllocationWithdrawRate(request: stark_api_howard_pb.GetReportRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_howard_pb.GetAllocationWithdrawRateReply) => void): grpcWeb.ClientReadableStream<stark_api_howard_pb.GetAllocationWithdrawRateReply>;
    methodInfoGetTopPaymentMethod: any;
    getTopPaymentMethod(request: stark_api_howard_pb.GetReportRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_howard_pb.GetTopPaymentMethodReply>;
    getTopPaymentMethod(request: stark_api_howard_pb.GetReportRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_howard_pb.GetTopPaymentMethodReply) => void): grpcWeb.ClientReadableStream<stark_api_howard_pb.GetTopPaymentMethodReply>;
    methodInfoGetTopTeller: any;
    getTopTeller(request: stark_api_howard_pb.GetReportRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_howard_pb.GetTopTellerReply>;
    getTopTeller(request: stark_api_howard_pb.GetReportRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_howard_pb.GetTopTellerReply) => void): grpcWeb.ClientReadableStream<stark_api_howard_pb.GetTopTellerReply>;
    methodInfoGetSellReportByTimeRange: any;
    getSellReportByTimeRange(request: stark_api_howard_pb.GetSellReportByTimeRangeRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_howard_pb.GetSellReportByTimeRangeReply>;
    getSellReportByTimeRange(request: stark_api_howard_pb.GetSellReportByTimeRangeRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_howard_pb.GetSellReportByTimeRangeReply) => void): grpcWeb.ClientReadableStream<stark_api_howard_pb.GetSellReportByTimeRangeReply>;
    methodInfoGetSellReportByMerchant: any;
    getSellReportByMerchant(request: stark_api_howard_pb.GetSellReportByMerchantRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_howard_pb.GetSellReportByMerchantReply>;
    getSellReportByMerchant(request: stark_api_howard_pb.GetSellReportByMerchantRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_howard_pb.GetSellReportByMerchantReply) => void): grpcWeb.ClientReadableStream<stark_api_howard_pb.GetSellReportByMerchantReply>;
    methodInfoGetSellReportByPaymentMethod: any;
    getSellReportByPaymentMethod(request: stark_api_howard_pb.GetSellReportByPaymentMethodRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_howard_pb.GetSellReportByPaymentMethodReply>;
    getSellReportByPaymentMethod(request: stark_api_howard_pb.GetSellReportByPaymentMethodRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_howard_pb.GetSellReportByPaymentMethodReply) => void): grpcWeb.ClientReadableStream<stark_api_howard_pb.GetSellReportByPaymentMethodReply>;
    methodInfoGetSellReportByTeller: any;
    getSellReportByTeller(request: stark_api_howard_pb.GetSellReportByTellerRequest, metadata: grpcWeb.Metadata | null): Promise<stark_api_howard_pb.GetSellReportByTellerReply>;
    getSellReportByTeller(request: stark_api_howard_pb.GetSellReportByTellerRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: stark_api_howard_pb.GetSellReportByTellerReply) => void): grpcWeb.ClientReadableStream<stark_api_howard_pb.GetSellReportByTellerReply>;
}
