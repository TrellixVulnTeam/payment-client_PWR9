import * as jspb from 'google-protobuf'



export class CreateCryptoWithdrawRequest extends jspb.Message {
  getCryptoWalletName(): CryptoWalletName;
  setCryptoWalletName(value: CryptoWalletName): CreateCryptoWithdrawRequest;

  getAddress(): string;
  setAddress(value: string): CreateCryptoWithdrawRequest;

  getCryptoType(): CryptoType;
  setCryptoType(value: CryptoType): CreateCryptoWithdrawRequest;

  getCryptoNetworkType(): CryptoNetworkType;
  setCryptoNetworkType(value: CryptoNetworkType): CreateCryptoWithdrawRequest;

  getAmount(): number;
  setAmount(value: number): CreateCryptoWithdrawRequest;

  getAmountReference(): number;
  setAmountReference(value: number): CreateCryptoWithdrawRequest;

  getMerchantUserId(): number;
  setMerchantUserId(value: number): CreateCryptoWithdrawRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateCryptoWithdrawRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateCryptoWithdrawRequest): CreateCryptoWithdrawRequest.AsObject;
  static serializeBinaryToWriter(message: CreateCryptoWithdrawRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateCryptoWithdrawRequest;
  static deserializeBinaryFromReader(message: CreateCryptoWithdrawRequest, reader: jspb.BinaryReader): CreateCryptoWithdrawRequest;
}

export namespace CreateCryptoWithdrawRequest {
  export type AsObject = {
    cryptoWalletName: CryptoWalletName,
    address: string,
    cryptoType: CryptoType,
    cryptoNetworkType: CryptoNetworkType,
    amount: number,
    amountReference: number,
    merchantUserId: number,
  }
}

export class CreateCryptoWithdrawReply extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): CreateCryptoWithdrawReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateCryptoWithdrawReply.AsObject;
  static toObject(includeInstance: boolean, msg: CreateCryptoWithdrawReply): CreateCryptoWithdrawReply.AsObject;
  static serializeBinaryToWriter(message: CreateCryptoWithdrawReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateCryptoWithdrawReply;
  static deserializeBinaryFromReader(message: CreateCryptoWithdrawReply, reader: jspb.BinaryReader): CreateCryptoWithdrawReply;
}

export namespace CreateCryptoWithdrawReply {
  export type AsObject = {
    paymentId: number,
  }
}

export class CancelCryptoWithdrawRequest extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): CancelCryptoWithdrawRequest;

  getNote(): string;
  setNote(value: string): CancelCryptoWithdrawRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CancelCryptoWithdrawRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CancelCryptoWithdrawRequest): CancelCryptoWithdrawRequest.AsObject;
  static serializeBinaryToWriter(message: CancelCryptoWithdrawRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CancelCryptoWithdrawRequest;
  static deserializeBinaryFromReader(message: CancelCryptoWithdrawRequest, reader: jspb.BinaryReader): CancelCryptoWithdrawRequest;
}

export namespace CancelCryptoWithdrawRequest {
  export type AsObject = {
    paymentId: number,
    note: string,
  }
}

export class CancelCryptoWithdrawReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CancelCryptoWithdrawReply.AsObject;
  static toObject(includeInstance: boolean, msg: CancelCryptoWithdrawReply): CancelCryptoWithdrawReply.AsObject;
  static serializeBinaryToWriter(message: CancelCryptoWithdrawReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CancelCryptoWithdrawReply;
  static deserializeBinaryFromReader(message: CancelCryptoWithdrawReply, reader: jspb.BinaryReader): CancelCryptoWithdrawReply;
}

export namespace CancelCryptoWithdrawReply {
  export type AsObject = {
  }
}

export class CancelCryptoTopUpRequest extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): CancelCryptoTopUpRequest;

  getNote(): string;
  setNote(value: string): CancelCryptoTopUpRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CancelCryptoTopUpRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CancelCryptoTopUpRequest): CancelCryptoTopUpRequest.AsObject;
  static serializeBinaryToWriter(message: CancelCryptoTopUpRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CancelCryptoTopUpRequest;
  static deserializeBinaryFromReader(message: CancelCryptoTopUpRequest, reader: jspb.BinaryReader): CancelCryptoTopUpRequest;
}

export namespace CancelCryptoTopUpRequest {
  export type AsObject = {
    paymentId: number,
    note: string,
  }
}

export class CancelCryptoTopUpReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CancelCryptoTopUpReply.AsObject;
  static toObject(includeInstance: boolean, msg: CancelCryptoTopUpReply): CancelCryptoTopUpReply.AsObject;
  static serializeBinaryToWriter(message: CancelCryptoTopUpReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CancelCryptoTopUpReply;
  static deserializeBinaryFromReader(message: CancelCryptoTopUpReply, reader: jspb.BinaryReader): CancelCryptoTopUpReply;
}

export namespace CancelCryptoTopUpReply {
  export type AsObject = {
  }
}

export class ApproveCryptoWithdrawRequest extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): ApproveCryptoWithdrawRequest;

  getNote(): string;
  setNote(value: string): ApproveCryptoWithdrawRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ApproveCryptoWithdrawRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ApproveCryptoWithdrawRequest): ApproveCryptoWithdrawRequest.AsObject;
  static serializeBinaryToWriter(message: ApproveCryptoWithdrawRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ApproveCryptoWithdrawRequest;
  static deserializeBinaryFromReader(message: ApproveCryptoWithdrawRequest, reader: jspb.BinaryReader): ApproveCryptoWithdrawRequest;
}

export namespace ApproveCryptoWithdrawRequest {
  export type AsObject = {
    paymentId: number,
    note: string,
  }
}

export class ApproveCryptoWithdrawReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ApproveCryptoWithdrawReply.AsObject;
  static toObject(includeInstance: boolean, msg: ApproveCryptoWithdrawReply): ApproveCryptoWithdrawReply.AsObject;
  static serializeBinaryToWriter(message: ApproveCryptoWithdrawReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ApproveCryptoWithdrawReply;
  static deserializeBinaryFromReader(message: ApproveCryptoWithdrawReply, reader: jspb.BinaryReader): ApproveCryptoWithdrawReply;
}

export namespace ApproveCryptoWithdrawReply {
  export type AsObject = {
  }
}

export class SubmitCryptoWithdrawRequest extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): SubmitCryptoWithdrawRequest;

  getSenderAddress(): string;
  setSenderAddress(value: string): SubmitCryptoWithdrawRequest;

  getAmount(): number;
  setAmount(value: number): SubmitCryptoWithdrawRequest;

  getFee(): number;
  setFee(value: number): SubmitCryptoWithdrawRequest;

  getTxHash(): string;
  setTxHash(value: string): SubmitCryptoWithdrawRequest;

  getImageUrl(): string;
  setImageUrl(value: string): SubmitCryptoWithdrawRequest;

  getNote(): string;
  setNote(value: string): SubmitCryptoWithdrawRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubmitCryptoWithdrawRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SubmitCryptoWithdrawRequest): SubmitCryptoWithdrawRequest.AsObject;
  static serializeBinaryToWriter(message: SubmitCryptoWithdrawRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubmitCryptoWithdrawRequest;
  static deserializeBinaryFromReader(message: SubmitCryptoWithdrawRequest, reader: jspb.BinaryReader): SubmitCryptoWithdrawRequest;
}

export namespace SubmitCryptoWithdrawRequest {
  export type AsObject = {
    paymentId: number,
    senderAddress: string,
    amount: number,
    fee: number,
    txHash: string,
    imageUrl: string,
    note: string,
  }
}

export class SubmitCryptoWithdrawReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubmitCryptoWithdrawReply.AsObject;
  static toObject(includeInstance: boolean, msg: SubmitCryptoWithdrawReply): SubmitCryptoWithdrawReply.AsObject;
  static serializeBinaryToWriter(message: SubmitCryptoWithdrawReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubmitCryptoWithdrawReply;
  static deserializeBinaryFromReader(message: SubmitCryptoWithdrawReply, reader: jspb.BinaryReader): SubmitCryptoWithdrawReply;
}

export namespace SubmitCryptoWithdrawReply {
  export type AsObject = {
  }
}

export class RejectCryptoWithdrawRequest extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): RejectCryptoWithdrawRequest;

  getNote(): string;
  setNote(value: string): RejectCryptoWithdrawRequest;

  getIsMerchantCall(): boolean;
  setIsMerchantCall(value: boolean): RejectCryptoWithdrawRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RejectCryptoWithdrawRequest.AsObject;
  static toObject(includeInstance: boolean, msg: RejectCryptoWithdrawRequest): RejectCryptoWithdrawRequest.AsObject;
  static serializeBinaryToWriter(message: RejectCryptoWithdrawRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RejectCryptoWithdrawRequest;
  static deserializeBinaryFromReader(message: RejectCryptoWithdrawRequest, reader: jspb.BinaryReader): RejectCryptoWithdrawRequest;
}

export namespace RejectCryptoWithdrawRequest {
  export type AsObject = {
    paymentId: number,
    note: string,
    isMerchantCall: boolean,
  }
}

export class RejectCryptoWithdrawReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RejectCryptoWithdrawReply.AsObject;
  static toObject(includeInstance: boolean, msg: RejectCryptoWithdrawReply): RejectCryptoWithdrawReply.AsObject;
  static serializeBinaryToWriter(message: RejectCryptoWithdrawReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RejectCryptoWithdrawReply;
  static deserializeBinaryFromReader(message: RejectCryptoWithdrawReply, reader: jspb.BinaryReader): RejectCryptoWithdrawReply;
}

export namespace RejectCryptoWithdrawReply {
  export type AsObject = {
  }
}

export class ApproveCryptoTopUpRequest extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): ApproveCryptoTopUpRequest;

  getNote(): string;
  setNote(value: string): ApproveCryptoTopUpRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ApproveCryptoTopUpRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ApproveCryptoTopUpRequest): ApproveCryptoTopUpRequest.AsObject;
  static serializeBinaryToWriter(message: ApproveCryptoTopUpRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ApproveCryptoTopUpRequest;
  static deserializeBinaryFromReader(message: ApproveCryptoTopUpRequest, reader: jspb.BinaryReader): ApproveCryptoTopUpRequest;
}

export namespace ApproveCryptoTopUpRequest {
  export type AsObject = {
    paymentId: number,
    note: string,
  }
}

export class ApproveCryptoTopUpReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ApproveCryptoTopUpReply.AsObject;
  static toObject(includeInstance: boolean, msg: ApproveCryptoTopUpReply): ApproveCryptoTopUpReply.AsObject;
  static serializeBinaryToWriter(message: ApproveCryptoTopUpReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ApproveCryptoTopUpReply;
  static deserializeBinaryFromReader(message: ApproveCryptoTopUpReply, reader: jspb.BinaryReader): ApproveCryptoTopUpReply;
}

export namespace ApproveCryptoTopUpReply {
  export type AsObject = {
  }
}

export class RejectCryptoTopUpRequest extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): RejectCryptoTopUpRequest;

  getNote(): string;
  setNote(value: string): RejectCryptoTopUpRequest;

  getIsMerchantCall(): boolean;
  setIsMerchantCall(value: boolean): RejectCryptoTopUpRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RejectCryptoTopUpRequest.AsObject;
  static toObject(includeInstance: boolean, msg: RejectCryptoTopUpRequest): RejectCryptoTopUpRequest.AsObject;
  static serializeBinaryToWriter(message: RejectCryptoTopUpRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RejectCryptoTopUpRequest;
  static deserializeBinaryFromReader(message: RejectCryptoTopUpRequest, reader: jspb.BinaryReader): RejectCryptoTopUpRequest;
}

export namespace RejectCryptoTopUpRequest {
  export type AsObject = {
    paymentId: number,
    note: string,
    isMerchantCall: boolean,
  }
}

export class RejectCryptoTopUpReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RejectCryptoTopUpReply.AsObject;
  static toObject(includeInstance: boolean, msg: RejectCryptoTopUpReply): RejectCryptoTopUpReply.AsObject;
  static serializeBinaryToWriter(message: RejectCryptoTopUpReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RejectCryptoTopUpReply;
  static deserializeBinaryFromReader(message: RejectCryptoTopUpReply, reader: jspb.BinaryReader): RejectCryptoTopUpReply;
}

export namespace RejectCryptoTopUpReply {
  export type AsObject = {
  }
}

export class GetCryptoWalletRequest extends jspb.Message {
  getCryptoType(): CryptoType;
  setCryptoType(value: CryptoType): GetCryptoWalletRequest;

  getCryptoNetworkType(): CryptoNetworkType;
  setCryptoNetworkType(value: CryptoNetworkType): GetCryptoWalletRequest;

  getMerchantUserId(): number;
  setMerchantUserId(value: number): GetCryptoWalletRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetCryptoWalletRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetCryptoWalletRequest): GetCryptoWalletRequest.AsObject;
  static serializeBinaryToWriter(message: GetCryptoWalletRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetCryptoWalletRequest;
  static deserializeBinaryFromReader(message: GetCryptoWalletRequest, reader: jspb.BinaryReader): GetCryptoWalletRequest;
}

export namespace GetCryptoWalletRequest {
  export type AsObject = {
    cryptoType: CryptoType,
    cryptoNetworkType: CryptoNetworkType,
    merchantUserId: number,
  }
}

export class GetCryptoWalletReply extends jspb.Message {
  getAddress(): string;
  setAddress(value: string): GetCryptoWalletReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetCryptoWalletReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetCryptoWalletReply): GetCryptoWalletReply.AsObject;
  static serializeBinaryToWriter(message: GetCryptoWalletReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetCryptoWalletReply;
  static deserializeBinaryFromReader(message: GetCryptoWalletReply, reader: jspb.BinaryReader): GetCryptoWalletReply;
}

export namespace GetCryptoWalletReply {
  export type AsObject = {
    address: string,
  }
}

export class LoadCryptoWalletsRequest extends jspb.Message {
  getCryptoType(): CryptoType;
  setCryptoType(value: CryptoType): LoadCryptoWalletsRequest;

  getCryptoNetworkType(): CryptoNetworkType;
  setCryptoNetworkType(value: CryptoNetworkType): LoadCryptoWalletsRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LoadCryptoWalletsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: LoadCryptoWalletsRequest): LoadCryptoWalletsRequest.AsObject;
  static serializeBinaryToWriter(message: LoadCryptoWalletsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LoadCryptoWalletsRequest;
  static deserializeBinaryFromReader(message: LoadCryptoWalletsRequest, reader: jspb.BinaryReader): LoadCryptoWalletsRequest;
}

export namespace LoadCryptoWalletsRequest {
  export type AsObject = {
    cryptoType: CryptoType,
    cryptoNetworkType: CryptoNetworkType,
  }
}

export class LoadCryptoWalletsReply extends jspb.Message {
  getData(): string;
  setData(value: string): LoadCryptoWalletsReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LoadCryptoWalletsReply.AsObject;
  static toObject(includeInstance: boolean, msg: LoadCryptoWalletsReply): LoadCryptoWalletsReply.AsObject;
  static serializeBinaryToWriter(message: LoadCryptoWalletsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LoadCryptoWalletsReply;
  static deserializeBinaryFromReader(message: LoadCryptoWalletsReply, reader: jspb.BinaryReader): LoadCryptoWalletsReply;
}

export namespace LoadCryptoWalletsReply {
  export type AsObject = {
    data: string,
  }
}

export class ValidateCryptoWalletsRequest extends jspb.Message {
  getRecordsList(): Array<CryptoWallet>;
  setRecordsList(value: Array<CryptoWallet>): ValidateCryptoWalletsRequest;
  clearRecordsList(): ValidateCryptoWalletsRequest;
  addRecords(value?: CryptoWallet, index?: number): CryptoWallet;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ValidateCryptoWalletsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ValidateCryptoWalletsRequest): ValidateCryptoWalletsRequest.AsObject;
  static serializeBinaryToWriter(message: ValidateCryptoWalletsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ValidateCryptoWalletsRequest;
  static deserializeBinaryFromReader(message: ValidateCryptoWalletsRequest, reader: jspb.BinaryReader): ValidateCryptoWalletsRequest;
}

export namespace ValidateCryptoWalletsRequest {
  export type AsObject = {
    recordsList: Array<CryptoWallet.AsObject>,
  }
}

export class ValidateCryptoWalletsReply extends jspb.Message {
  getValidRecordsList(): Array<CryptoWallet>;
  setValidRecordsList(value: Array<CryptoWallet>): ValidateCryptoWalletsReply;
  clearValidRecordsList(): ValidateCryptoWalletsReply;
  addValidRecords(value?: CryptoWallet, index?: number): CryptoWallet;

  getDuplicatedRecordsList(): Array<CryptoWallet>;
  setDuplicatedRecordsList(value: Array<CryptoWallet>): ValidateCryptoWalletsReply;
  clearDuplicatedRecordsList(): ValidateCryptoWalletsReply;
  addDuplicatedRecords(value?: CryptoWallet, index?: number): CryptoWallet;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ValidateCryptoWalletsReply.AsObject;
  static toObject(includeInstance: boolean, msg: ValidateCryptoWalletsReply): ValidateCryptoWalletsReply.AsObject;
  static serializeBinaryToWriter(message: ValidateCryptoWalletsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ValidateCryptoWalletsReply;
  static deserializeBinaryFromReader(message: ValidateCryptoWalletsReply, reader: jspb.BinaryReader): ValidateCryptoWalletsReply;
}

export namespace ValidateCryptoWalletsReply {
  export type AsObject = {
    validRecordsList: Array<CryptoWallet.AsObject>,
    duplicatedRecordsList: Array<CryptoWallet.AsObject>,
  }
}

export class ImportCryptoWalletsRequest extends jspb.Message {
  getWalletsList(): Array<CryptoWallet>;
  setWalletsList(value: Array<CryptoWallet>): ImportCryptoWalletsRequest;
  clearWalletsList(): ImportCryptoWalletsRequest;
  addWallets(value?: CryptoWallet, index?: number): CryptoWallet;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ImportCryptoWalletsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ImportCryptoWalletsRequest): ImportCryptoWalletsRequest.AsObject;
  static serializeBinaryToWriter(message: ImportCryptoWalletsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ImportCryptoWalletsRequest;
  static deserializeBinaryFromReader(message: ImportCryptoWalletsRequest, reader: jspb.BinaryReader): ImportCryptoWalletsRequest;
}

export namespace ImportCryptoWalletsRequest {
  export type AsObject = {
    walletsList: Array<CryptoWallet.AsObject>,
  }
}

export class ImportCryptoWalletsReply extends jspb.Message {
  getWalletsList(): Array<CryptoWallet>;
  setWalletsList(value: Array<CryptoWallet>): ImportCryptoWalletsReply;
  clearWalletsList(): ImportCryptoWalletsReply;
  addWallets(value?: CryptoWallet, index?: number): CryptoWallet;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ImportCryptoWalletsReply.AsObject;
  static toObject(includeInstance: boolean, msg: ImportCryptoWalletsReply): ImportCryptoWalletsReply.AsObject;
  static serializeBinaryToWriter(message: ImportCryptoWalletsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ImportCryptoWalletsReply;
  static deserializeBinaryFromReader(message: ImportCryptoWalletsReply, reader: jspb.BinaryReader): ImportCryptoWalletsReply;
}

export namespace ImportCryptoWalletsReply {
  export type AsObject = {
    walletsList: Array<CryptoWallet.AsObject>,
  }
}

export class ListCryptoWalletsRequest extends jspb.Message {
  getPage(): number;
  setPage(value: number): ListCryptoWalletsRequest;

  getSize(): number;
  setSize(value: number): ListCryptoWalletsRequest;

  getAddressesList(): Array<string>;
  setAddressesList(value: Array<string>): ListCryptoWalletsRequest;
  clearAddressesList(): ListCryptoWalletsRequest;
  addAddresses(value: string, index?: number): ListCryptoWalletsRequest;

  getCryptoTypesList(): Array<CryptoType>;
  setCryptoTypesList(value: Array<CryptoType>): ListCryptoWalletsRequest;
  clearCryptoTypesList(): ListCryptoWalletsRequest;
  addCryptoTypes(value: CryptoType, index?: number): ListCryptoWalletsRequest;

  getCryptoNetworkTypesList(): Array<CryptoNetworkType>;
  setCryptoNetworkTypesList(value: Array<CryptoNetworkType>): ListCryptoWalletsRequest;
  clearCryptoNetworkTypesList(): ListCryptoWalletsRequest;
  addCryptoNetworkTypes(value: CryptoNetworkType, index?: number): ListCryptoWalletsRequest;

  getStatusesList(): Array<CryptoWalletStatus>;
  setStatusesList(value: Array<CryptoWalletStatus>): ListCryptoWalletsRequest;
  clearStatusesList(): ListCryptoWalletsRequest;
  addStatuses(value: CryptoWalletStatus, index?: number): ListCryptoWalletsRequest;

  getMerchantIdsList(): Array<number>;
  setMerchantIdsList(value: Array<number>): ListCryptoWalletsRequest;
  clearMerchantIdsList(): ListCryptoWalletsRequest;
  addMerchantIds(value: number, index?: number): ListCryptoWalletsRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListCryptoWalletsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListCryptoWalletsRequest): ListCryptoWalletsRequest.AsObject;
  static serializeBinaryToWriter(message: ListCryptoWalletsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListCryptoWalletsRequest;
  static deserializeBinaryFromReader(message: ListCryptoWalletsRequest, reader: jspb.BinaryReader): ListCryptoWalletsRequest;
}

export namespace ListCryptoWalletsRequest {
  export type AsObject = {
    page: number,
    size: number,
    addressesList: Array<string>,
    cryptoTypesList: Array<CryptoType>,
    cryptoNetworkTypesList: Array<CryptoNetworkType>,
    statusesList: Array<CryptoWalletStatus>,
    merchantIdsList: Array<number>,
  }
}

export class ListCryptoWalletsReply extends jspb.Message {
  getRecordsList(): Array<CryptoWallet>;
  setRecordsList(value: Array<CryptoWallet>): ListCryptoWalletsReply;
  clearRecordsList(): ListCryptoWalletsReply;
  addRecords(value?: CryptoWallet, index?: number): CryptoWallet;

  getTotal(): number;
  setTotal(value: number): ListCryptoWalletsReply;

  getCurrentPage(): number;
  setCurrentPage(value: number): ListCryptoWalletsReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListCryptoWalletsReply.AsObject;
  static toObject(includeInstance: boolean, msg: ListCryptoWalletsReply): ListCryptoWalletsReply.AsObject;
  static serializeBinaryToWriter(message: ListCryptoWalletsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListCryptoWalletsReply;
  static deserializeBinaryFromReader(message: ListCryptoWalletsReply, reader: jspb.BinaryReader): ListCryptoWalletsReply;
}

export namespace ListCryptoWalletsReply {
  export type AsObject = {
    recordsList: Array<CryptoWallet.AsObject>,
    total: number,
    currentPage: number,
  }
}

export class ValidateCryptoHotWalletsRequest extends jspb.Message {
  getRecordsList(): Array<SystemCryptoHotWallet>;
  setRecordsList(value: Array<SystemCryptoHotWallet>): ValidateCryptoHotWalletsRequest;
  clearRecordsList(): ValidateCryptoHotWalletsRequest;
  addRecords(value?: SystemCryptoHotWallet, index?: number): SystemCryptoHotWallet;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ValidateCryptoHotWalletsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ValidateCryptoHotWalletsRequest): ValidateCryptoHotWalletsRequest.AsObject;
  static serializeBinaryToWriter(message: ValidateCryptoHotWalletsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ValidateCryptoHotWalletsRequest;
  static deserializeBinaryFromReader(message: ValidateCryptoHotWalletsRequest, reader: jspb.BinaryReader): ValidateCryptoHotWalletsRequest;
}

export namespace ValidateCryptoHotWalletsRequest {
  export type AsObject = {
    recordsList: Array<SystemCryptoHotWallet.AsObject>,
  }
}

export class ValidateCryptoHotWalletsReply extends jspb.Message {
  getValidRecordsList(): Array<SystemCryptoHotWallet>;
  setValidRecordsList(value: Array<SystemCryptoHotWallet>): ValidateCryptoHotWalletsReply;
  clearValidRecordsList(): ValidateCryptoHotWalletsReply;
  addValidRecords(value?: SystemCryptoHotWallet, index?: number): SystemCryptoHotWallet;

  getDuplicatedRecordsList(): Array<SystemCryptoHotWallet>;
  setDuplicatedRecordsList(value: Array<SystemCryptoHotWallet>): ValidateCryptoHotWalletsReply;
  clearDuplicatedRecordsList(): ValidateCryptoHotWalletsReply;
  addDuplicatedRecords(value?: SystemCryptoHotWallet, index?: number): SystemCryptoHotWallet;

  getDuplicatedIdRecordsList(): Array<SystemCryptoHotWallet>;
  setDuplicatedIdRecordsList(value: Array<SystemCryptoHotWallet>): ValidateCryptoHotWalletsReply;
  clearDuplicatedIdRecordsList(): ValidateCryptoHotWalletsReply;
  addDuplicatedIdRecords(value?: SystemCryptoHotWallet, index?: number): SystemCryptoHotWallet;

  getInvalidRecordsList(): Array<SystemCryptoHotWallet>;
  setInvalidRecordsList(value: Array<SystemCryptoHotWallet>): ValidateCryptoHotWalletsReply;
  clearInvalidRecordsList(): ValidateCryptoHotWalletsReply;
  addInvalidRecords(value?: SystemCryptoHotWallet, index?: number): SystemCryptoHotWallet;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ValidateCryptoHotWalletsReply.AsObject;
  static toObject(includeInstance: boolean, msg: ValidateCryptoHotWalletsReply): ValidateCryptoHotWalletsReply.AsObject;
  static serializeBinaryToWriter(message: ValidateCryptoHotWalletsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ValidateCryptoHotWalletsReply;
  static deserializeBinaryFromReader(message: ValidateCryptoHotWalletsReply, reader: jspb.BinaryReader): ValidateCryptoHotWalletsReply;
}

export namespace ValidateCryptoHotWalletsReply {
  export type AsObject = {
    validRecordsList: Array<SystemCryptoHotWallet.AsObject>,
    duplicatedRecordsList: Array<SystemCryptoHotWallet.AsObject>,
    duplicatedIdRecordsList: Array<SystemCryptoHotWallet.AsObject>,
    invalidRecordsList: Array<SystemCryptoHotWallet.AsObject>,
  }
}

export class ImportCryptoHotWalletsRequest extends jspb.Message {
  getRecordsList(): Array<SystemCryptoHotWallet>;
  setRecordsList(value: Array<SystemCryptoHotWallet>): ImportCryptoHotWalletsRequest;
  clearRecordsList(): ImportCryptoHotWalletsRequest;
  addRecords(value?: SystemCryptoHotWallet, index?: number): SystemCryptoHotWallet;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ImportCryptoHotWalletsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ImportCryptoHotWalletsRequest): ImportCryptoHotWalletsRequest.AsObject;
  static serializeBinaryToWriter(message: ImportCryptoHotWalletsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ImportCryptoHotWalletsRequest;
  static deserializeBinaryFromReader(message: ImportCryptoHotWalletsRequest, reader: jspb.BinaryReader): ImportCryptoHotWalletsRequest;
}

export namespace ImportCryptoHotWalletsRequest {
  export type AsObject = {
    recordsList: Array<SystemCryptoHotWallet.AsObject>,
  }
}

export class ImportCryptoHotWalletsReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ImportCryptoHotWalletsReply.AsObject;
  static toObject(includeInstance: boolean, msg: ImportCryptoHotWalletsReply): ImportCryptoHotWalletsReply.AsObject;
  static serializeBinaryToWriter(message: ImportCryptoHotWalletsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ImportCryptoHotWalletsReply;
  static deserializeBinaryFromReader(message: ImportCryptoHotWalletsReply, reader: jspb.BinaryReader): ImportCryptoHotWalletsReply;
}

export namespace ImportCryptoHotWalletsReply {
  export type AsObject = {
  }
}

export class ListCryptoHotWalletsRequest extends jspb.Message {
  getPage(): number;
  setPage(value: number): ListCryptoHotWalletsRequest;

  getSize(): number;
  setSize(value: number): ListCryptoHotWalletsRequest;

  getAddressesList(): Array<string>;
  setAddressesList(value: Array<string>): ListCryptoHotWalletsRequest;
  clearAddressesList(): ListCryptoHotWalletsRequest;
  addAddresses(value: string, index?: number): ListCryptoHotWalletsRequest;

  getCryptoTypesList(): Array<CryptoType>;
  setCryptoTypesList(value: Array<CryptoType>): ListCryptoHotWalletsRequest;
  clearCryptoTypesList(): ListCryptoHotWalletsRequest;
  addCryptoTypes(value: CryptoType, index?: number): ListCryptoHotWalletsRequest;

  getCryptoNetworkTypesList(): Array<CryptoNetworkType>;
  setCryptoNetworkTypesList(value: Array<CryptoNetworkType>): ListCryptoHotWalletsRequest;
  clearCryptoNetworkTypesList(): ListCryptoHotWalletsRequest;
  addCryptoNetworkTypes(value: CryptoNetworkType, index?: number): ListCryptoHotWalletsRequest;

  getStatusesList(): Array<CryptoWalletStatus>;
  setStatusesList(value: Array<CryptoWalletStatus>): ListCryptoHotWalletsRequest;
  clearStatusesList(): ListCryptoHotWalletsRequest;
  addStatuses(value: CryptoWalletStatus, index?: number): ListCryptoHotWalletsRequest;

  getMerchantIdsList(): Array<number>;
  setMerchantIdsList(value: Array<number>): ListCryptoHotWalletsRequest;
  clearMerchantIdsList(): ListCryptoHotWalletsRequest;
  addMerchantIds(value: number, index?: number): ListCryptoHotWalletsRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListCryptoHotWalletsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListCryptoHotWalletsRequest): ListCryptoHotWalletsRequest.AsObject;
  static serializeBinaryToWriter(message: ListCryptoHotWalletsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListCryptoHotWalletsRequest;
  static deserializeBinaryFromReader(message: ListCryptoHotWalletsRequest, reader: jspb.BinaryReader): ListCryptoHotWalletsRequest;
}

export namespace ListCryptoHotWalletsRequest {
  export type AsObject = {
    page: number,
    size: number,
    addressesList: Array<string>,
    cryptoTypesList: Array<CryptoType>,
    cryptoNetworkTypesList: Array<CryptoNetworkType>,
    statusesList: Array<CryptoWalletStatus>,
    merchantIdsList: Array<number>,
  }
}

export class ListCryptoHotWalletsReply extends jspb.Message {
  getRecordsList(): Array<SystemCryptoHotWallet>;
  setRecordsList(value: Array<SystemCryptoHotWallet>): ListCryptoHotWalletsReply;
  clearRecordsList(): ListCryptoHotWalletsReply;
  addRecords(value?: SystemCryptoHotWallet, index?: number): SystemCryptoHotWallet;

  getTotal(): number;
  setTotal(value: number): ListCryptoHotWalletsReply;

  getCurrentPage(): number;
  setCurrentPage(value: number): ListCryptoHotWalletsReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListCryptoHotWalletsReply.AsObject;
  static toObject(includeInstance: boolean, msg: ListCryptoHotWalletsReply): ListCryptoHotWalletsReply.AsObject;
  static serializeBinaryToWriter(message: ListCryptoHotWalletsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListCryptoHotWalletsReply;
  static deserializeBinaryFromReader(message: ListCryptoHotWalletsReply, reader: jspb.BinaryReader): ListCryptoHotWalletsReply;
}

export namespace ListCryptoHotWalletsReply {
  export type AsObject = {
    recordsList: Array<SystemCryptoHotWallet.AsObject>,
    total: number,
    currentPage: number,
  }
}

export class GetSystemCryptoHotWalletsRequest extends jspb.Message {
  getCryptoType(): CryptoType;
  setCryptoType(value: CryptoType): GetSystemCryptoHotWalletsRequest;

  getCryptoNetworkType(): CryptoNetworkType;
  setCryptoNetworkType(value: CryptoNetworkType): GetSystemCryptoHotWalletsRequest;

  getMerchantId(): number;
  setMerchantId(value: number): GetSystemCryptoHotWalletsRequest;

  getAmount(): number;
  setAmount(value: number): GetSystemCryptoHotWalletsRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetSystemCryptoHotWalletsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetSystemCryptoHotWalletsRequest): GetSystemCryptoHotWalletsRequest.AsObject;
  static serializeBinaryToWriter(message: GetSystemCryptoHotWalletsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetSystemCryptoHotWalletsRequest;
  static deserializeBinaryFromReader(message: GetSystemCryptoHotWalletsRequest, reader: jspb.BinaryReader): GetSystemCryptoHotWalletsRequest;
}

export namespace GetSystemCryptoHotWalletsRequest {
  export type AsObject = {
    cryptoType: CryptoType,
    cryptoNetworkType: CryptoNetworkType,
    merchantId: number,
    amount: number,
  }
}

export class GetSystemCryptoHotWalletsReply extends jspb.Message {
  getRecordsList(): Array<SystemCryptoHotWallet>;
  setRecordsList(value: Array<SystemCryptoHotWallet>): GetSystemCryptoHotWalletsReply;
  clearRecordsList(): GetSystemCryptoHotWalletsReply;
  addRecords(value?: SystemCryptoHotWallet, index?: number): SystemCryptoHotWallet;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetSystemCryptoHotWalletsReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetSystemCryptoHotWalletsReply): GetSystemCryptoHotWalletsReply.AsObject;
  static serializeBinaryToWriter(message: GetSystemCryptoHotWalletsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetSystemCryptoHotWalletsReply;
  static deserializeBinaryFromReader(message: GetSystemCryptoHotWalletsReply, reader: jspb.BinaryReader): GetSystemCryptoHotWalletsReply;
}

export namespace GetSystemCryptoHotWalletsReply {
  export type AsObject = {
    recordsList: Array<SystemCryptoHotWallet.AsObject>,
  }
}

export class SystemCryptoHotWallet extends jspb.Message {
  getId(): number;
  setId(value: number): SystemCryptoHotWallet;

  getAddress(): string;
  setAddress(value: string): SystemCryptoHotWallet;

  getMerchantId(): number;
  setMerchantId(value: number): SystemCryptoHotWallet;

  getCryptoType(): CryptoType;
  setCryptoType(value: CryptoType): SystemCryptoHotWallet;

  getCryptoNetworkType(): CryptoNetworkType;
  setCryptoNetworkType(value: CryptoNetworkType): SystemCryptoHotWallet;

  getTotalBalance(): number;
  setTotalBalance(value: number): SystemCryptoHotWallet;

  getBalance(): number;
  setBalance(value: number): SystemCryptoHotWallet;

  getStatus(): CryptoHotWalletStatus;
  setStatus(value: CryptoHotWalletStatus): SystemCryptoHotWallet;

  getErrorCode(): string;
  setErrorCode(value: string): SystemCryptoHotWallet;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SystemCryptoHotWallet.AsObject;
  static toObject(includeInstance: boolean, msg: SystemCryptoHotWallet): SystemCryptoHotWallet.AsObject;
  static serializeBinaryToWriter(message: SystemCryptoHotWallet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SystemCryptoHotWallet;
  static deserializeBinaryFromReader(message: SystemCryptoHotWallet, reader: jspb.BinaryReader): SystemCryptoHotWallet;
}

export namespace SystemCryptoHotWallet {
  export type AsObject = {
    id: number,
    address: string,
    merchantId: number,
    cryptoType: CryptoType,
    cryptoNetworkType: CryptoNetworkType,
    totalBalance: number,
    balance: number,
    status: CryptoHotWalletStatus,
    errorCode: string,
  }
}

export class CallbackTransactionRequest extends jspb.Message {
  getStoreId(): string;
  setStoreId(value: string): CallbackTransactionRequest;

  getAppTransId(): string;
  setAppTransId(value: string): CallbackTransactionRequest;

  getTransId(): string;
  setTransId(value: string): CallbackTransactionRequest;

  getSender(): string;
  setSender(value: string): CallbackTransactionRequest;

  getRecipient(): string;
  setRecipient(value: string): CallbackTransactionRequest;

  getCurrency(): string;
  setCurrency(value: string): CallbackTransactionRequest;

  getTransactionFee(): number;
  setTransactionFee(value: number): CallbackTransactionRequest;

  getTxHash(): string;
  setTxHash(value: string): CallbackTransactionRequest;

  getAmount(): number;
  setAmount(value: number): CallbackTransactionRequest;

  getReceivedAmount(): number;
  setReceivedAmount(value: number): CallbackTransactionRequest;

  getType(): string;
  setType(value: string): CallbackTransactionRequest;

  getState(): string;
  setState(value: string): CallbackTransactionRequest;

  getMessage(): string;
  setMessage(value: string): CallbackTransactionRequest;

  getBcFee(): number;
  setBcFee(value: number): CallbackTransactionRequest;

  getBcFeeCurrency(): string;
  setBcFeeCurrency(value: string): CallbackTransactionRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CallbackTransactionRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CallbackTransactionRequest): CallbackTransactionRequest.AsObject;
  static serializeBinaryToWriter(message: CallbackTransactionRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CallbackTransactionRequest;
  static deserializeBinaryFromReader(message: CallbackTransactionRequest, reader: jspb.BinaryReader): CallbackTransactionRequest;
}

export namespace CallbackTransactionRequest {
  export type AsObject = {
    storeId: string,
    appTransId: string,
    transId: string,
    sender: string,
    recipient: string,
    currency: string,
    transactionFee: number,
    txHash: string,
    amount: number,
    receivedAmount: number,
    type: string,
    state: string,
    message: string,
    bcFee: number,
    bcFeeCurrency: string,
  }
}

export class CallbackTransactionReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CallbackTransactionReply.AsObject;
  static toObject(includeInstance: boolean, msg: CallbackTransactionReply): CallbackTransactionReply.AsObject;
  static serializeBinaryToWriter(message: CallbackTransactionReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CallbackTransactionReply;
  static deserializeBinaryFromReader(message: CallbackTransactionReply, reader: jspb.BinaryReader): CallbackTransactionReply;
}

export namespace CallbackTransactionReply {
  export type AsObject = {
  }
}

export class CryptoWallet extends jspb.Message {
  getId(): number;
  setId(value: number): CryptoWallet;

  getAddress(): string;
  setAddress(value: string): CryptoWallet;

  getMerchantId(): number;
  setMerchantId(value: number): CryptoWallet;

  getCryptoType(): CryptoType;
  setCryptoType(value: CryptoType): CryptoWallet;

  getCryptoNetworkType(): CryptoNetworkType;
  setCryptoNetworkType(value: CryptoNetworkType): CryptoWallet;

  getStatus(): CryptoWalletStatus;
  setStatus(value: CryptoWalletStatus): CryptoWallet;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CryptoWallet.AsObject;
  static toObject(includeInstance: boolean, msg: CryptoWallet): CryptoWallet.AsObject;
  static serializeBinaryToWriter(message: CryptoWallet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CryptoWallet;
  static deserializeBinaryFromReader(message: CryptoWallet, reader: jspb.BinaryReader): CryptoWallet;
}

export namespace CryptoWallet {
  export type AsObject = {
    id: number,
    address: string,
    merchantId: number,
    cryptoType: CryptoType,
    cryptoNetworkType: CryptoNetworkType,
    status: CryptoWalletStatus,
  }
}

export class CryptoPaymentDetail extends jspb.Message {
  getCryptoType(): CryptoType;
  setCryptoType(value: CryptoType): CryptoPaymentDetail;

  getCryptoNetworkType(): CryptoNetworkType;
  setCryptoNetworkType(value: CryptoNetworkType): CryptoPaymentDetail;

  getCryptoWalletName(): CryptoWalletName;
  setCryptoWalletName(value: CryptoWalletName): CryptoPaymentDetail;

  getReceiverAddress(): string;
  setReceiverAddress(value: string): CryptoPaymentDetail;

  getSenderAddress(): string;
  setSenderAddress(value: string): CryptoPaymentDetail;

  getAmount(): number;
  setAmount(value: number): CryptoPaymentDetail;

  getReceivedAmount(): number;
  setReceivedAmount(value: number): CryptoPaymentDetail;

  getTxHash(): string;
  setTxHash(value: string): CryptoPaymentDetail;

  getFee(): number;
  setFee(value: number): CryptoPaymentDetail;

  getImageUrl(): string;
  setImageUrl(value: string): CryptoPaymentDetail;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CryptoPaymentDetail.AsObject;
  static toObject(includeInstance: boolean, msg: CryptoPaymentDetail): CryptoPaymentDetail.AsObject;
  static serializeBinaryToWriter(message: CryptoPaymentDetail, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CryptoPaymentDetail;
  static deserializeBinaryFromReader(message: CryptoPaymentDetail, reader: jspb.BinaryReader): CryptoPaymentDetail;
}

export namespace CryptoPaymentDetail {
  export type AsObject = {
    cryptoType: CryptoType,
    cryptoNetworkType: CryptoNetworkType,
    cryptoWalletName: CryptoWalletName,
    receiverAddress: string,
    senderAddress: string,
    amount: number,
    receivedAmount: number,
    txHash: string,
    fee: number,
    imageUrl: string,
  }
}

export class UpdateAutoTransferCryptoWithdrawRequest extends jspb.Message {
  getEnabled(): boolean;
  setEnabled(value: boolean): UpdateAutoTransferCryptoWithdrawRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateAutoTransferCryptoWithdrawRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateAutoTransferCryptoWithdrawRequest): UpdateAutoTransferCryptoWithdrawRequest.AsObject;
  static serializeBinaryToWriter(message: UpdateAutoTransferCryptoWithdrawRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateAutoTransferCryptoWithdrawRequest;
  static deserializeBinaryFromReader(message: UpdateAutoTransferCryptoWithdrawRequest, reader: jspb.BinaryReader): UpdateAutoTransferCryptoWithdrawRequest;
}

export namespace UpdateAutoTransferCryptoWithdrawRequest {
  export type AsObject = {
    enabled: boolean,
  }
}

export class UpdateAutoTransferCryptoWithdrawReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateAutoTransferCryptoWithdrawReply.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateAutoTransferCryptoWithdrawReply): UpdateAutoTransferCryptoWithdrawReply.AsObject;
  static serializeBinaryToWriter(message: UpdateAutoTransferCryptoWithdrawReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateAutoTransferCryptoWithdrawReply;
  static deserializeBinaryFromReader(message: UpdateAutoTransferCryptoWithdrawReply, reader: jspb.BinaryReader): UpdateAutoTransferCryptoWithdrawReply;
}

export namespace UpdateAutoTransferCryptoWithdrawReply {
  export type AsObject = {
  }
}

export class GetCryptoSettingsRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetCryptoSettingsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetCryptoSettingsRequest): GetCryptoSettingsRequest.AsObject;
  static serializeBinaryToWriter(message: GetCryptoSettingsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetCryptoSettingsRequest;
  static deserializeBinaryFromReader(message: GetCryptoSettingsRequest, reader: jspb.BinaryReader): GetCryptoSettingsRequest;
}

export namespace GetCryptoSettingsRequest {
  export type AsObject = {
  }
}

export class GetCryptoSettingsReply extends jspb.Message {
  getAutoTransferWithdrawCrypto(): boolean;
  setAutoTransferWithdrawCrypto(value: boolean): GetCryptoSettingsReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetCryptoSettingsReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetCryptoSettingsReply): GetCryptoSettingsReply.AsObject;
  static serializeBinaryToWriter(message: GetCryptoSettingsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetCryptoSettingsReply;
  static deserializeBinaryFromReader(message: GetCryptoSettingsReply, reader: jspb.BinaryReader): GetCryptoSettingsReply;
}

export namespace GetCryptoSettingsReply {
  export type AsObject = {
    autoTransferWithdrawCrypto: boolean,
  }
}

export enum CryptoType { 
  CRYPTO_TYPE_UNSPECIFIED = 0,
  USDT = 1,
}
export enum CryptoNetworkType { 
  CRYPTO_NETWORK_TYPE_UNSPECIFIED = 0,
  ERC20 = 1,
  BEP20 = 2,
  TRC20 = 3,
}
export enum CryptoWalletStatus { 
  CRYPTO_NETWORK_STATUS_UNSPECIFIED = 0,
  AVAILABLE = 1,
  USED = 2,
  BANNED = 3,
}
export enum CryptoHotWalletStatus { 
  CRYPTO_HOT_WALLET_STATUS_UNSPECIFIED = 0,
  CRYPTO_HOT_WALLET_STATUS_ACTIVE = 1,
  CRYPTO_HOT_WALLET_STATUS_IN_ACTIVE = 2,
}
export enum CryptoWalletName { 
  CRYPTO_WALLET_NAME_UNSPECIFIED = 0,
  UMO = 1,
}
