import * as jspb from 'google-protobuf'

import * as google_protobuf_timestamp_pb from 'google-protobuf/google/protobuf/timestamp_pb';
import * as validate_validate_pb from '@greyhole/validate/validate_pb';


export class GetEWalletPaymentCodeRequest extends jspb.Message {
  getEWalletName(): EWalletName;
  setEWalletName(value: EWalletName): GetEWalletPaymentCodeRequest;

  getMerchantUserId(): number;
  setMerchantUserId(value: number): GetEWalletPaymentCodeRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetEWalletPaymentCodeRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetEWalletPaymentCodeRequest): GetEWalletPaymentCodeRequest.AsObject;
  static serializeBinaryToWriter(message: GetEWalletPaymentCodeRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetEWalletPaymentCodeRequest;
  static deserializeBinaryFromReader(message: GetEWalletPaymentCodeRequest, reader: jspb.BinaryReader): GetEWalletPaymentCodeRequest;
}

export namespace GetEWalletPaymentCodeRequest {
  export type AsObject = {
    eWalletName: EWalletName,
    merchantUserId: number,
  }
}

export class GetEWalletPaymentCodeReply extends jspb.Message {
  getCode(): string;
  setCode(value: string): GetEWalletPaymentCodeReply;

  getEWalletName(): EWalletName;
  setEWalletName(value: EWalletName): GetEWalletPaymentCodeReply;

  getAccountPhoneNumber(): string;
  setAccountPhoneNumber(value: string): GetEWalletPaymentCodeReply;

  getAccountName(): string;
  setAccountName(value: string): GetEWalletPaymentCodeReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetEWalletPaymentCodeReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetEWalletPaymentCodeReply): GetEWalletPaymentCodeReply.AsObject;
  static serializeBinaryToWriter(message: GetEWalletPaymentCodeReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetEWalletPaymentCodeReply;
  static deserializeBinaryFromReader(message: GetEWalletPaymentCodeReply, reader: jspb.BinaryReader): GetEWalletPaymentCodeReply;
}

export namespace GetEWalletPaymentCodeReply {
  export type AsObject = {
    code: string,
    eWalletName: EWalletName,
    accountPhoneNumber: string,
    accountName: string,
  }
}

export class CancelEWalletTopUpRequest extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): CancelEWalletTopUpRequest;

  getNote(): string;
  setNote(value: string): CancelEWalletTopUpRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CancelEWalletTopUpRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CancelEWalletTopUpRequest): CancelEWalletTopUpRequest.AsObject;
  static serializeBinaryToWriter(message: CancelEWalletTopUpRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CancelEWalletTopUpRequest;
  static deserializeBinaryFromReader(message: CancelEWalletTopUpRequest, reader: jspb.BinaryReader): CancelEWalletTopUpRequest;
}

export namespace CancelEWalletTopUpRequest {
  export type AsObject = {
    paymentId: number,
    note: string,
  }
}

export class CancelEWalletTopUpReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CancelEWalletTopUpReply.AsObject;
  static toObject(includeInstance: boolean, msg: CancelEWalletTopUpReply): CancelEWalletTopUpReply.AsObject;
  static serializeBinaryToWriter(message: CancelEWalletTopUpReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CancelEWalletTopUpReply;
  static deserializeBinaryFromReader(message: CancelEWalletTopUpReply, reader: jspb.BinaryReader): CancelEWalletTopUpReply;
}

export namespace CancelEWalletTopUpReply {
  export type AsObject = {
  }
}

export class CreateEWalletTopUpRequest extends jspb.Message {
  getAmount(): number;
  setAmount(value: number): CreateEWalletTopUpRequest;

  getPaymentCode(): string;
  setPaymentCode(value: string): CreateEWalletTopUpRequest;

  getMerchantUserAccountPhoneNumber(): string;
  setMerchantUserAccountPhoneNumber(value: string): CreateEWalletTopUpRequest;

  getMerchantUserAccountName(): string;
  setMerchantUserAccountName(value: string): CreateEWalletTopUpRequest;

  getSystemAccountPhoneNumber(): string;
  setSystemAccountPhoneNumber(value: string): CreateEWalletTopUpRequest;

  getSystemAccountName(): string;
  setSystemAccountName(value: string): CreateEWalletTopUpRequest;

  getNote(): string;
  setNote(value: string): CreateEWalletTopUpRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateEWalletTopUpRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateEWalletTopUpRequest): CreateEWalletTopUpRequest.AsObject;
  static serializeBinaryToWriter(message: CreateEWalletTopUpRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateEWalletTopUpRequest;
  static deserializeBinaryFromReader(message: CreateEWalletTopUpRequest, reader: jspb.BinaryReader): CreateEWalletTopUpRequest;
}

export namespace CreateEWalletTopUpRequest {
  export type AsObject = {
    amount: number,
    paymentCode: string,
    merchantUserAccountPhoneNumber: string,
    merchantUserAccountName: string,
    systemAccountPhoneNumber: string,
    systemAccountName: string,
    note: string,
  }
}

export class CreateEWalletTopUpReply extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): CreateEWalletTopUpReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateEWalletTopUpReply.AsObject;
  static toObject(includeInstance: boolean, msg: CreateEWalletTopUpReply): CreateEWalletTopUpReply.AsObject;
  static serializeBinaryToWriter(message: CreateEWalletTopUpReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateEWalletTopUpReply;
  static deserializeBinaryFromReader(message: CreateEWalletTopUpReply, reader: jspb.BinaryReader): CreateEWalletTopUpReply;
}

export namespace CreateEWalletTopUpReply {
  export type AsObject = {
    paymentId: number,
  }
}

export class ApproveEWalletTopUpRequest extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): ApproveEWalletTopUpRequest;

  getImageUrl(): string;
  setImageUrl(value: string): ApproveEWalletTopUpRequest;

  getTxId(): string;
  setTxId(value: string): ApproveEWalletTopUpRequest;

  getNote(): string;
  setNote(value: string): ApproveEWalletTopUpRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ApproveEWalletTopUpRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ApproveEWalletTopUpRequest): ApproveEWalletTopUpRequest.AsObject;
  static serializeBinaryToWriter(message: ApproveEWalletTopUpRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ApproveEWalletTopUpRequest;
  static deserializeBinaryFromReader(message: ApproveEWalletTopUpRequest, reader: jspb.BinaryReader): ApproveEWalletTopUpRequest;
}

export namespace ApproveEWalletTopUpRequest {
  export type AsObject = {
    paymentId: number,
    imageUrl: string,
    txId: string,
    note: string,
  }
}

export class ApproveEWalletTopUpReply extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): ApproveEWalletTopUpReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ApproveEWalletTopUpReply.AsObject;
  static toObject(includeInstance: boolean, msg: ApproveEWalletTopUpReply): ApproveEWalletTopUpReply.AsObject;
  static serializeBinaryToWriter(message: ApproveEWalletTopUpReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ApproveEWalletTopUpReply;
  static deserializeBinaryFromReader(message: ApproveEWalletTopUpReply, reader: jspb.BinaryReader): ApproveEWalletTopUpReply;
}

export namespace ApproveEWalletTopUpReply {
  export type AsObject = {
    paymentId: number,
  }
}

export class RejectEWalletTopUpRequest extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): RejectEWalletTopUpRequest;

  getNote(): string;
  setNote(value: string): RejectEWalletTopUpRequest;

  getIsMerchantCall(): boolean;
  setIsMerchantCall(value: boolean): RejectEWalletTopUpRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RejectEWalletTopUpRequest.AsObject;
  static toObject(includeInstance: boolean, msg: RejectEWalletTopUpRequest): RejectEWalletTopUpRequest.AsObject;
  static serializeBinaryToWriter(message: RejectEWalletTopUpRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RejectEWalletTopUpRequest;
  static deserializeBinaryFromReader(message: RejectEWalletTopUpRequest, reader: jspb.BinaryReader): RejectEWalletTopUpRequest;
}

export namespace RejectEWalletTopUpRequest {
  export type AsObject = {
    paymentId: number,
    note: string,
    isMerchantCall: boolean,
  }
}

export class RejectEWalletTopUpReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RejectEWalletTopUpReply.AsObject;
  static toObject(includeInstance: boolean, msg: RejectEWalletTopUpReply): RejectEWalletTopUpReply.AsObject;
  static serializeBinaryToWriter(message: RejectEWalletTopUpReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RejectEWalletTopUpReply;
  static deserializeBinaryFromReader(message: RejectEWalletTopUpReply, reader: jspb.BinaryReader): RejectEWalletTopUpReply;
}

export namespace RejectEWalletTopUpReply {
  export type AsObject = {
  }
}

export class CreateSystemEWalletRequest extends jspb.Message {
  getAccountId(): number;
  setAccountId(value: number): CreateSystemEWalletRequest;

  getAccountWalletName(): EWalletName;
  setAccountWalletName(value: EWalletName): CreateSystemEWalletRequest;

  getAccountPhoneNumber(): string;
  setAccountPhoneNumber(value: string): CreateSystemEWalletRequest;

  getAccountName(): string;
  setAccountName(value: string): CreateSystemEWalletRequest;

  getBalance(): number;
  setBalance(value: number): CreateSystemEWalletRequest;

  getDailyBalance(): number;
  setDailyBalance(value: number): CreateSystemEWalletRequest;

  getDailyBalanceLimit(): number;
  setDailyBalanceLimit(value: number): CreateSystemEWalletRequest;

  getDailyUsedAmount(): number;
  setDailyUsedAmount(value: number): CreateSystemEWalletRequest;

  getMerchantId(): number;
  setMerchantId(value: number): CreateSystemEWalletRequest;

  getErrorCode(): string;
  setErrorCode(value: string): CreateSystemEWalletRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateSystemEWalletRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateSystemEWalletRequest): CreateSystemEWalletRequest.AsObject;
  static serializeBinaryToWriter(message: CreateSystemEWalletRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateSystemEWalletRequest;
  static deserializeBinaryFromReader(message: CreateSystemEWalletRequest, reader: jspb.BinaryReader): CreateSystemEWalletRequest;
}

export namespace CreateSystemEWalletRequest {
  export type AsObject = {
    accountId: number,
    accountWalletName: EWalletName,
    accountPhoneNumber: string,
    accountName: string,
    balance: number,
    dailyBalance: number,
    dailyBalanceLimit: number,
    dailyUsedAmount: number,
    merchantId: number,
    errorCode: string,
  }
}

export class CreateSystemEWalletReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateSystemEWalletReply.AsObject;
  static toObject(includeInstance: boolean, msg: CreateSystemEWalletReply): CreateSystemEWalletReply.AsObject;
  static serializeBinaryToWriter(message: CreateSystemEWalletReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateSystemEWalletReply;
  static deserializeBinaryFromReader(message: CreateSystemEWalletReply, reader: jspb.BinaryReader): CreateSystemEWalletReply;
}

export namespace CreateSystemEWalletReply {
  export type AsObject = {
  }
}

export class UpdateSystemEWalletStatusRequest extends jspb.Message {
  getId(): number;
  setId(value: number): UpdateSystemEWalletStatusRequest;

  getStatus(): EWalletStatus;
  setStatus(value: EWalletStatus): UpdateSystemEWalletStatusRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateSystemEWalletStatusRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateSystemEWalletStatusRequest): UpdateSystemEWalletStatusRequest.AsObject;
  static serializeBinaryToWriter(message: UpdateSystemEWalletStatusRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateSystemEWalletStatusRequest;
  static deserializeBinaryFromReader(message: UpdateSystemEWalletStatusRequest, reader: jspb.BinaryReader): UpdateSystemEWalletStatusRequest;
}

export namespace UpdateSystemEWalletStatusRequest {
  export type AsObject = {
    id: number,
    status: EWalletStatus,
  }
}

export class UpdateSystemEWalletStatusReply extends jspb.Message {
  getEWallet(): SystemEWallet | undefined;
  setEWallet(value?: SystemEWallet): UpdateSystemEWalletStatusReply;
  hasEWallet(): boolean;
  clearEWallet(): UpdateSystemEWalletStatusReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateSystemEWalletStatusReply.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateSystemEWalletStatusReply): UpdateSystemEWalletStatusReply.AsObject;
  static serializeBinaryToWriter(message: UpdateSystemEWalletStatusReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateSystemEWalletStatusReply;
  static deserializeBinaryFromReader(message: UpdateSystemEWalletStatusReply, reader: jspb.BinaryReader): UpdateSystemEWalletStatusReply;
}

export namespace UpdateSystemEWalletStatusReply {
  export type AsObject = {
    eWallet?: SystemEWallet.AsObject,
  }
}

export class ListSystemEWalletsRequest extends jspb.Message {
  getPage(): number;
  setPage(value: number): ListSystemEWalletsRequest;

  getSize(): number;
  setSize(value: number): ListSystemEWalletsRequest;

  getIdsList(): Array<number>;
  setIdsList(value: Array<number>): ListSystemEWalletsRequest;
  clearIdsList(): ListSystemEWalletsRequest;
  addIds(value: number, index?: number): ListSystemEWalletsRequest;

  getMerchantIdsList(): Array<number>;
  setMerchantIdsList(value: Array<number>): ListSystemEWalletsRequest;
  clearMerchantIdsList(): ListSystemEWalletsRequest;
  addMerchantIds(value: number, index?: number): ListSystemEWalletsRequest;

  getStatusesList(): Array<EWalletStatus>;
  setStatusesList(value: Array<EWalletStatus>): ListSystemEWalletsRequest;
  clearStatusesList(): ListSystemEWalletsRequest;
  addStatuses(value: EWalletStatus, index?: number): ListSystemEWalletsRequest;

  getEWalletNamesList(): Array<EWalletName>;
  setEWalletNamesList(value: Array<EWalletName>): ListSystemEWalletsRequest;
  clearEWalletNamesList(): ListSystemEWalletsRequest;
  addEWalletNames(value: EWalletName, index?: number): ListSystemEWalletsRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListSystemEWalletsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListSystemEWalletsRequest): ListSystemEWalletsRequest.AsObject;
  static serializeBinaryToWriter(message: ListSystemEWalletsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListSystemEWalletsRequest;
  static deserializeBinaryFromReader(message: ListSystemEWalletsRequest, reader: jspb.BinaryReader): ListSystemEWalletsRequest;
}

export namespace ListSystemEWalletsRequest {
  export type AsObject = {
    page: number,
    size: number,
    idsList: Array<number>,
    merchantIdsList: Array<number>,
    statusesList: Array<EWalletStatus>,
    eWalletNamesList: Array<EWalletName>,
  }
}

export class ListSystemEWalletsReply extends jspb.Message {
  getRecordsList(): Array<SystemEWallet>;
  setRecordsList(value: Array<SystemEWallet>): ListSystemEWalletsReply;
  clearRecordsList(): ListSystemEWalletsReply;
  addRecords(value?: SystemEWallet, index?: number): SystemEWallet;

  getTotal(): number;
  setTotal(value: number): ListSystemEWalletsReply;

  getCurrentPage(): number;
  setCurrentPage(value: number): ListSystemEWalletsReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListSystemEWalletsReply.AsObject;
  static toObject(includeInstance: boolean, msg: ListSystemEWalletsReply): ListSystemEWalletsReply.AsObject;
  static serializeBinaryToWriter(message: ListSystemEWalletsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListSystemEWalletsReply;
  static deserializeBinaryFromReader(message: ListSystemEWalletsReply, reader: jspb.BinaryReader): ListSystemEWalletsReply;
}

export namespace ListSystemEWalletsReply {
  export type AsObject = {
    recordsList: Array<SystemEWallet.AsObject>,
    total: number,
    currentPage: number,
  }
}

export class ValidateSystemEWalletsRequest extends jspb.Message {
  getRecordsList(): Array<CreateSystemEWalletRequest>;
  setRecordsList(value: Array<CreateSystemEWalletRequest>): ValidateSystemEWalletsRequest;
  clearRecordsList(): ValidateSystemEWalletsRequest;
  addRecords(value?: CreateSystemEWalletRequest, index?: number): CreateSystemEWalletRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ValidateSystemEWalletsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ValidateSystemEWalletsRequest): ValidateSystemEWalletsRequest.AsObject;
  static serializeBinaryToWriter(message: ValidateSystemEWalletsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ValidateSystemEWalletsRequest;
  static deserializeBinaryFromReader(message: ValidateSystemEWalletsRequest, reader: jspb.BinaryReader): ValidateSystemEWalletsRequest;
}

export namespace ValidateSystemEWalletsRequest {
  export type AsObject = {
    recordsList: Array<CreateSystemEWalletRequest.AsObject>,
  }
}

export class ValidateSystemEWalletsReply extends jspb.Message {
  getValidRecordsList(): Array<CreateSystemEWalletRequest>;
  setValidRecordsList(value: Array<CreateSystemEWalletRequest>): ValidateSystemEWalletsReply;
  clearValidRecordsList(): ValidateSystemEWalletsReply;
  addValidRecords(value?: CreateSystemEWalletRequest, index?: number): CreateSystemEWalletRequest;

  getDuplicatedRecordsList(): Array<CreateSystemEWalletRequest>;
  setDuplicatedRecordsList(value: Array<CreateSystemEWalletRequest>): ValidateSystemEWalletsReply;
  clearDuplicatedRecordsList(): ValidateSystemEWalletsReply;
  addDuplicatedRecords(value?: CreateSystemEWalletRequest, index?: number): CreateSystemEWalletRequest;

  getInvalidRecordsList(): Array<CreateSystemEWalletRequest>;
  setInvalidRecordsList(value: Array<CreateSystemEWalletRequest>): ValidateSystemEWalletsReply;
  clearInvalidRecordsList(): ValidateSystemEWalletsReply;
  addInvalidRecords(value?: CreateSystemEWalletRequest, index?: number): CreateSystemEWalletRequest;

  getDuplicatedIdRecordsList(): Array<CreateSystemEWalletRequest>;
  setDuplicatedIdRecordsList(value: Array<CreateSystemEWalletRequest>): ValidateSystemEWalletsReply;
  clearDuplicatedIdRecordsList(): ValidateSystemEWalletsReply;
  addDuplicatedIdRecords(value?: CreateSystemEWalletRequest, index?: number): CreateSystemEWalletRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ValidateSystemEWalletsReply.AsObject;
  static toObject(includeInstance: boolean, msg: ValidateSystemEWalletsReply): ValidateSystemEWalletsReply.AsObject;
  static serializeBinaryToWriter(message: ValidateSystemEWalletsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ValidateSystemEWalletsReply;
  static deserializeBinaryFromReader(message: ValidateSystemEWalletsReply, reader: jspb.BinaryReader): ValidateSystemEWalletsReply;
}

export namespace ValidateSystemEWalletsReply {
  export type AsObject = {
    validRecordsList: Array<CreateSystemEWalletRequest.AsObject>,
    duplicatedRecordsList: Array<CreateSystemEWalletRequest.AsObject>,
    invalidRecordsList: Array<CreateSystemEWalletRequest.AsObject>,
    duplicatedIdRecordsList: Array<CreateSystemEWalletRequest.AsObject>,
  }
}

export class ImportSystemEWalletsRequest extends jspb.Message {
  getRecordsList(): Array<CreateSystemEWalletRequest>;
  setRecordsList(value: Array<CreateSystemEWalletRequest>): ImportSystemEWalletsRequest;
  clearRecordsList(): ImportSystemEWalletsRequest;
  addRecords(value?: CreateSystemEWalletRequest, index?: number): CreateSystemEWalletRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ImportSystemEWalletsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ImportSystemEWalletsRequest): ImportSystemEWalletsRequest.AsObject;
  static serializeBinaryToWriter(message: ImportSystemEWalletsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ImportSystemEWalletsRequest;
  static deserializeBinaryFromReader(message: ImportSystemEWalletsRequest, reader: jspb.BinaryReader): ImportSystemEWalletsRequest;
}

export namespace ImportSystemEWalletsRequest {
  export type AsObject = {
    recordsList: Array<CreateSystemEWalletRequest.AsObject>,
  }
}

export class ImportSystemEWalletsReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ImportSystemEWalletsReply.AsObject;
  static toObject(includeInstance: boolean, msg: ImportSystemEWalletsReply): ImportSystemEWalletsReply.AsObject;
  static serializeBinaryToWriter(message: ImportSystemEWalletsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ImportSystemEWalletsReply;
  static deserializeBinaryFromReader(message: ImportSystemEWalletsReply, reader: jspb.BinaryReader): ImportSystemEWalletsReply;
}

export namespace ImportSystemEWalletsReply {
  export type AsObject = {
  }
}

export class GetSystemEWalletsRequest extends jspb.Message {
  getEWalletName(): EWalletName;
  setEWalletName(value: EWalletName): GetSystemEWalletsRequest;

  getMerchantId(): number;
  setMerchantId(value: number): GetSystemEWalletsRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetSystemEWalletsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetSystemEWalletsRequest): GetSystemEWalletsRequest.AsObject;
  static serializeBinaryToWriter(message: GetSystemEWalletsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetSystemEWalletsRequest;
  static deserializeBinaryFromReader(message: GetSystemEWalletsRequest, reader: jspb.BinaryReader): GetSystemEWalletsRequest;
}

export namespace GetSystemEWalletsRequest {
  export type AsObject = {
    eWalletName: EWalletName,
    merchantId: number,
  }
}

export class GetSystemEWalletsReply extends jspb.Message {
  getSystemEWalletsList(): Array<SystemEWallet>;
  setSystemEWalletsList(value: Array<SystemEWallet>): GetSystemEWalletsReply;
  clearSystemEWalletsList(): GetSystemEWalletsReply;
  addSystemEWallets(value?: SystemEWallet, index?: number): SystemEWallet;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetSystemEWalletsReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetSystemEWalletsReply): GetSystemEWalletsReply.AsObject;
  static serializeBinaryToWriter(message: GetSystemEWalletsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetSystemEWalletsReply;
  static deserializeBinaryFromReader(message: GetSystemEWalletsReply, reader: jspb.BinaryReader): GetSystemEWalletsReply;
}

export namespace GetSystemEWalletsReply {
  export type AsObject = {
    systemEWalletsList: Array<SystemEWallet.AsObject>,
  }
}

export class EWalletPaymentDetail extends jspb.Message {
  getPaymentCode(): string;
  setPaymentCode(value: string): EWalletPaymentDetail;

  getEWalletName(): EWalletName;
  setEWalletName(value: EWalletName): EWalletPaymentDetail;

  getMerchantUserAccountPhoneNumber(): string;
  setMerchantUserAccountPhoneNumber(value: string): EWalletPaymentDetail;

  getMerchantUserAccountName(): string;
  setMerchantUserAccountName(value: string): EWalletPaymentDetail;

  getSystemAccountPhoneNumber(): string;
  setSystemAccountPhoneNumber(value: string): EWalletPaymentDetail;

  getSystemAccountName(): string;
  setSystemAccountName(value: string): EWalletPaymentDetail;

  getAmount(): number;
  setAmount(value: number): EWalletPaymentDetail;

  getFee(): number;
  setFee(value: number): EWalletPaymentDetail;

  getMerchantUserId(): number;
  setMerchantUserId(value: number): EWalletPaymentDetail;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EWalletPaymentDetail.AsObject;
  static toObject(includeInstance: boolean, msg: EWalletPaymentDetail): EWalletPaymentDetail.AsObject;
  static serializeBinaryToWriter(message: EWalletPaymentDetail, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EWalletPaymentDetail;
  static deserializeBinaryFromReader(message: EWalletPaymentDetail, reader: jspb.BinaryReader): EWalletPaymentDetail;
}

export namespace EWalletPaymentDetail {
  export type AsObject = {
    paymentCode: string,
    eWalletName: EWalletName,
    merchantUserAccountPhoneNumber: string,
    merchantUserAccountName: string,
    systemAccountPhoneNumber: string,
    systemAccountName: string,
    amount: number,
    fee: number,
    merchantUserId: number,
  }
}

export class SystemEWallet extends jspb.Message {
  getId(): number;
  setId(value: number): SystemEWallet;

  getCreatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setCreatedAt(value?: google_protobuf_timestamp_pb.Timestamp): SystemEWallet;
  hasCreatedAt(): boolean;
  clearCreatedAt(): SystemEWallet;

  getUpdatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setUpdatedAt(value?: google_protobuf_timestamp_pb.Timestamp): SystemEWallet;
  hasUpdatedAt(): boolean;
  clearUpdatedAt(): SystemEWallet;

  getCreatedBy(): string;
  setCreatedBy(value: string): SystemEWallet;

  getUpdatedBy(): string;
  setUpdatedBy(value: string): SystemEWallet;

  getEWalletName(): EWalletName;
  setEWalletName(value: EWalletName): SystemEWallet;

  getStatus(): EWalletStatus;
  setStatus(value: EWalletStatus): SystemEWallet;

  getMerchantId(): number;
  setMerchantId(value: number): SystemEWallet;

  getAccountPhoneNumber(): string;
  setAccountPhoneNumber(value: string): SystemEWallet;

  getAccountName(): string;
  setAccountName(value: string): SystemEWallet;

  getBalance(): number;
  setBalance(value: number): SystemEWallet;

  getDailyBalance(): number;
  setDailyBalance(value: number): SystemEWallet;

  getDailyBalanceLimit(): number;
  setDailyBalanceLimit(value: number): SystemEWallet;

  getDailyUsedAmount(): number;
  setDailyUsedAmount(value: number): SystemEWallet;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SystemEWallet.AsObject;
  static toObject(includeInstance: boolean, msg: SystemEWallet): SystemEWallet.AsObject;
  static serializeBinaryToWriter(message: SystemEWallet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SystemEWallet;
  static deserializeBinaryFromReader(message: SystemEWallet, reader: jspb.BinaryReader): SystemEWallet;
}

export namespace SystemEWallet {
  export type AsObject = {
    id: number,
    createdAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    updatedAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    createdBy: string,
    updatedBy: string,
    eWalletName: EWalletName,
    status: EWalletStatus,
    merchantId: number,
    accountPhoneNumber: string,
    accountName: string,
    balance: number,
    dailyBalance: number,
    dailyBalanceLimit: number,
    dailyUsedAmount: number,
  }
}

export enum EWalletName { 
  EWALLET_NAME_UNSPECIFIED = 0,
  MOMO = 1,
  ZALOPAY = 2,
}
export enum EWalletStatus { 
  EWALLET_STATUS_UNSPECIFIED = 0,
  EWALLET_ACTIVE = 1,
  EWALLET_IN_ACTIVE = 2,
}
