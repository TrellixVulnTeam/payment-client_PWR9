import * as jspb from 'google-protobuf'

import * as google_protobuf_timestamp_pb from 'google-protobuf/google/protobuf/timestamp_pb';
import * as validate_validate_pb from '@greyhole/validate/validate_pb';


export class GetBankPaymentCodeRequest extends jspb.Message {
  getBankName(): BankName;
  setBankName(value: BankName): GetBankPaymentCodeRequest;

  getMerchantUserId(): number;
  setMerchantUserId(value: number): GetBankPaymentCodeRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetBankPaymentCodeRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetBankPaymentCodeRequest): GetBankPaymentCodeRequest.AsObject;
  static serializeBinaryToWriter(message: GetBankPaymentCodeRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetBankPaymentCodeRequest;
  static deserializeBinaryFromReader(message: GetBankPaymentCodeRequest, reader: jspb.BinaryReader): GetBankPaymentCodeRequest;
}

export namespace GetBankPaymentCodeRequest {
  export type AsObject = {
    bankName: BankName,
    merchantUserId: number,
  }
}

export class GetBankPaymentCodeReply extends jspb.Message {
  getCode(): string;
  setCode(value: string): GetBankPaymentCodeReply;

  getAccountNumber(): string;
  setAccountNumber(value: string): GetBankPaymentCodeReply;

  getAccountName(): string;
  setAccountName(value: string): GetBankPaymentCodeReply;

  getBranch(): string;
  setBranch(value: string): GetBankPaymentCodeReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetBankPaymentCodeReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetBankPaymentCodeReply): GetBankPaymentCodeReply.AsObject;
  static serializeBinaryToWriter(message: GetBankPaymentCodeReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetBankPaymentCodeReply;
  static deserializeBinaryFromReader(message: GetBankPaymentCodeReply, reader: jspb.BinaryReader): GetBankPaymentCodeReply;
}

export namespace GetBankPaymentCodeReply {
  export type AsObject = {
    code: string,
    accountNumber: string,
    accountName: string,
    branch: string,
  }
}

export class CreateBankingWithdrawRequest extends jspb.Message {
  getAmount(): number;
  setAmount(value: number): CreateBankingWithdrawRequest;

  getMerchantUserId(): number;
  setMerchantUserId(value: number): CreateBankingWithdrawRequest;

  getMerchantUserAccountNumber(): string;
  setMerchantUserAccountNumber(value: string): CreateBankingWithdrawRequest;

  getMerchantUserAccountName(): string;
  setMerchantUserAccountName(value: string): CreateBankingWithdrawRequest;

  getBankName(): BankName;
  setBankName(value: BankName): CreateBankingWithdrawRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateBankingWithdrawRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateBankingWithdrawRequest): CreateBankingWithdrawRequest.AsObject;
  static serializeBinaryToWriter(message: CreateBankingWithdrawRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateBankingWithdrawRequest;
  static deserializeBinaryFromReader(message: CreateBankingWithdrawRequest, reader: jspb.BinaryReader): CreateBankingWithdrawRequest;
}

export namespace CreateBankingWithdrawRequest {
  export type AsObject = {
    amount: number,
    merchantUserId: number,
    merchantUserAccountNumber: string,
    merchantUserAccountName: string,
    bankName: BankName,
  }
}

export class CreateBankingWithdrawReply extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): CreateBankingWithdrawReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateBankingWithdrawReply.AsObject;
  static toObject(includeInstance: boolean, msg: CreateBankingWithdrawReply): CreateBankingWithdrawReply.AsObject;
  static serializeBinaryToWriter(message: CreateBankingWithdrawReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateBankingWithdrawReply;
  static deserializeBinaryFromReader(message: CreateBankingWithdrawReply, reader: jspb.BinaryReader): CreateBankingWithdrawReply;
}

export namespace CreateBankingWithdrawReply {
  export type AsObject = {
    paymentId: number,
  }
}

export class CreateBankingTopUpRequest extends jspb.Message {
  getAmount(): number;
  setAmount(value: number): CreateBankingTopUpRequest;

  getPaymentCode(): string;
  setPaymentCode(value: string): CreateBankingTopUpRequest;

  getMerchantUserAccountNumber(): string;
  setMerchantUserAccountNumber(value: string): CreateBankingTopUpRequest;

  getMerchantUserAccountName(): string;
  setMerchantUserAccountName(value: string): CreateBankingTopUpRequest;

  getSystemAccountNumber(): string;
  setSystemAccountNumber(value: string): CreateBankingTopUpRequest;

  getSystemAccountName(): string;
  setSystemAccountName(value: string): CreateBankingTopUpRequest;

  getNote(): string;
  setNote(value: string): CreateBankingTopUpRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateBankingTopUpRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateBankingTopUpRequest): CreateBankingTopUpRequest.AsObject;
  static serializeBinaryToWriter(message: CreateBankingTopUpRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateBankingTopUpRequest;
  static deserializeBinaryFromReader(message: CreateBankingTopUpRequest, reader: jspb.BinaryReader): CreateBankingTopUpRequest;
}

export namespace CreateBankingTopUpRequest {
  export type AsObject = {
    amount: number,
    paymentCode: string,
    merchantUserAccountNumber: string,
    merchantUserAccountName: string,
    systemAccountNumber: string,
    systemAccountName: string,
    note: string,
  }
}

export class CreateBankingTopUpReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateBankingTopUpReply.AsObject;
  static toObject(includeInstance: boolean, msg: CreateBankingTopUpReply): CreateBankingTopUpReply.AsObject;
  static serializeBinaryToWriter(message: CreateBankingTopUpReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateBankingTopUpReply;
  static deserializeBinaryFromReader(message: CreateBankingTopUpReply, reader: jspb.BinaryReader): CreateBankingTopUpReply;
}

export namespace CreateBankingTopUpReply {
  export type AsObject = {
  }
}

export class ApproveBankingTopUpRequest extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): ApproveBankingTopUpRequest;

  getImageUrl(): string;
  setImageUrl(value: string): ApproveBankingTopUpRequest;

  getTxId(): string;
  setTxId(value: string): ApproveBankingTopUpRequest;

  getNote(): string;
  setNote(value: string): ApproveBankingTopUpRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ApproveBankingTopUpRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ApproveBankingTopUpRequest): ApproveBankingTopUpRequest.AsObject;
  static serializeBinaryToWriter(message: ApproveBankingTopUpRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ApproveBankingTopUpRequest;
  static deserializeBinaryFromReader(message: ApproveBankingTopUpRequest, reader: jspb.BinaryReader): ApproveBankingTopUpRequest;
}

export namespace ApproveBankingTopUpRequest {
  export type AsObject = {
    paymentId: number,
    imageUrl: string,
    txId: string,
    note: string,
  }
}

export class ApproveBankingTopUpReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ApproveBankingTopUpReply.AsObject;
  static toObject(includeInstance: boolean, msg: ApproveBankingTopUpReply): ApproveBankingTopUpReply.AsObject;
  static serializeBinaryToWriter(message: ApproveBankingTopUpReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ApproveBankingTopUpReply;
  static deserializeBinaryFromReader(message: ApproveBankingTopUpReply, reader: jspb.BinaryReader): ApproveBankingTopUpReply;
}

export namespace ApproveBankingTopUpReply {
  export type AsObject = {
  }
}

export class RejectBankingTopUpRequest extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): RejectBankingTopUpRequest;

  getNote(): string;
  setNote(value: string): RejectBankingTopUpRequest;

  getIsMerchantCall(): boolean;
  setIsMerchantCall(value: boolean): RejectBankingTopUpRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RejectBankingTopUpRequest.AsObject;
  static toObject(includeInstance: boolean, msg: RejectBankingTopUpRequest): RejectBankingTopUpRequest.AsObject;
  static serializeBinaryToWriter(message: RejectBankingTopUpRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RejectBankingTopUpRequest;
  static deserializeBinaryFromReader(message: RejectBankingTopUpRequest, reader: jspb.BinaryReader): RejectBankingTopUpRequest;
}

export namespace RejectBankingTopUpRequest {
  export type AsObject = {
    paymentId: number,
    note: string,
    isMerchantCall: boolean,
  }
}

export class RejectBankingTopUpReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RejectBankingTopUpReply.AsObject;
  static toObject(includeInstance: boolean, msg: RejectBankingTopUpReply): RejectBankingTopUpReply.AsObject;
  static serializeBinaryToWriter(message: RejectBankingTopUpReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RejectBankingTopUpReply;
  static deserializeBinaryFromReader(message: RejectBankingTopUpReply, reader: jspb.BinaryReader): RejectBankingTopUpReply;
}

export namespace RejectBankingTopUpReply {
  export type AsObject = {
  }
}

export class ApproveBankingWithdrawRequest extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): ApproveBankingWithdrawRequest;

  getNote(): string;
  setNote(value: string): ApproveBankingWithdrawRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ApproveBankingWithdrawRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ApproveBankingWithdrawRequest): ApproveBankingWithdrawRequest.AsObject;
  static serializeBinaryToWriter(message: ApproveBankingWithdrawRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ApproveBankingWithdrawRequest;
  static deserializeBinaryFromReader(message: ApproveBankingWithdrawRequest, reader: jspb.BinaryReader): ApproveBankingWithdrawRequest;
}

export namespace ApproveBankingWithdrawRequest {
  export type AsObject = {
    paymentId: number,
    note: string,
  }
}

export class ApproveBankingWithdrawReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ApproveBankingWithdrawReply.AsObject;
  static toObject(includeInstance: boolean, msg: ApproveBankingWithdrawReply): ApproveBankingWithdrawReply.AsObject;
  static serializeBinaryToWriter(message: ApproveBankingWithdrawReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ApproveBankingWithdrawReply;
  static deserializeBinaryFromReader(message: ApproveBankingWithdrawReply, reader: jspb.BinaryReader): ApproveBankingWithdrawReply;
}

export namespace ApproveBankingWithdrawReply {
  export type AsObject = {
  }
}

export class SubmitBankingWithdrawRequest extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): SubmitBankingWithdrawRequest;

  getBankName(): BankName;
  setBankName(value: BankName): SubmitBankingWithdrawRequest;

  getAccountNumber(): string;
  setAccountNumber(value: string): SubmitBankingWithdrawRequest;

  getAccountName(): string;
  setAccountName(value: string): SubmitBankingWithdrawRequest;

  getAmount(): number;
  setAmount(value: number): SubmitBankingWithdrawRequest;

  getFee(): number;
  setFee(value: number): SubmitBankingWithdrawRequest;

  getImageUrl(): string;
  setImageUrl(value: string): SubmitBankingWithdrawRequest;

  getTxId(): string;
  setTxId(value: string): SubmitBankingWithdrawRequest;

  getNote(): string;
  setNote(value: string): SubmitBankingWithdrawRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubmitBankingWithdrawRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SubmitBankingWithdrawRequest): SubmitBankingWithdrawRequest.AsObject;
  static serializeBinaryToWriter(message: SubmitBankingWithdrawRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubmitBankingWithdrawRequest;
  static deserializeBinaryFromReader(message: SubmitBankingWithdrawRequest, reader: jspb.BinaryReader): SubmitBankingWithdrawRequest;
}

export namespace SubmitBankingWithdrawRequest {
  export type AsObject = {
    paymentId: number,
    bankName: BankName,
    accountNumber: string,
    accountName: string,
    amount: number,
    fee: number,
    imageUrl: string,
    txId: string,
    note: string,
  }
}

export class SubmitBankingWithdrawReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubmitBankingWithdrawReply.AsObject;
  static toObject(includeInstance: boolean, msg: SubmitBankingWithdrawReply): SubmitBankingWithdrawReply.AsObject;
  static serializeBinaryToWriter(message: SubmitBankingWithdrawReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubmitBankingWithdrawReply;
  static deserializeBinaryFromReader(message: SubmitBankingWithdrawReply, reader: jspb.BinaryReader): SubmitBankingWithdrawReply;
}

export namespace SubmitBankingWithdrawReply {
  export type AsObject = {
  }
}

export class GetIsMerchantUserBankAccountVerifiedRequest extends jspb.Message {
  getAccountNumber(): string;
  setAccountNumber(value: string): GetIsMerchantUserBankAccountVerifiedRequest;

  getAccountName(): string;
  setAccountName(value: string): GetIsMerchantUserBankAccountVerifiedRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetIsMerchantUserBankAccountVerifiedRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetIsMerchantUserBankAccountVerifiedRequest): GetIsMerchantUserBankAccountVerifiedRequest.AsObject;
  static serializeBinaryToWriter(message: GetIsMerchantUserBankAccountVerifiedRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetIsMerchantUserBankAccountVerifiedRequest;
  static deserializeBinaryFromReader(message: GetIsMerchantUserBankAccountVerifiedRequest, reader: jspb.BinaryReader): GetIsMerchantUserBankAccountVerifiedRequest;
}

export namespace GetIsMerchantUserBankAccountVerifiedRequest {
  export type AsObject = {
    accountNumber: string,
    accountName: string,
  }
}

export class GetIsMerchantUserBankAccountVerifiedReply extends jspb.Message {
  getVerified(): boolean;
  setVerified(value: boolean): GetIsMerchantUserBankAccountVerifiedReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetIsMerchantUserBankAccountVerifiedReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetIsMerchantUserBankAccountVerifiedReply): GetIsMerchantUserBankAccountVerifiedReply.AsObject;
  static serializeBinaryToWriter(message: GetIsMerchantUserBankAccountVerifiedReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetIsMerchantUserBankAccountVerifiedReply;
  static deserializeBinaryFromReader(message: GetIsMerchantUserBankAccountVerifiedReply, reader: jspb.BinaryReader): GetIsMerchantUserBankAccountVerifiedReply;
}

export namespace GetIsMerchantUserBankAccountVerifiedReply {
  export type AsObject = {
    verified: boolean,
  }
}

export class RejectBankingWithdrawRequest extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): RejectBankingWithdrawRequest;

  getNote(): string;
  setNote(value: string): RejectBankingWithdrawRequest;

  getIsMerchantCall(): boolean;
  setIsMerchantCall(value: boolean): RejectBankingWithdrawRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RejectBankingWithdrawRequest.AsObject;
  static toObject(includeInstance: boolean, msg: RejectBankingWithdrawRequest): RejectBankingWithdrawRequest.AsObject;
  static serializeBinaryToWriter(message: RejectBankingWithdrawRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RejectBankingWithdrawRequest;
  static deserializeBinaryFromReader(message: RejectBankingWithdrawRequest, reader: jspb.BinaryReader): RejectBankingWithdrawRequest;
}

export namespace RejectBankingWithdrawRequest {
  export type AsObject = {
    paymentId: number,
    note: string,
    isMerchantCall: boolean,
  }
}

export class RejectBankingWithdrawReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RejectBankingWithdrawReply.AsObject;
  static toObject(includeInstance: boolean, msg: RejectBankingWithdrawReply): RejectBankingWithdrawReply.AsObject;
  static serializeBinaryToWriter(message: RejectBankingWithdrawReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RejectBankingWithdrawReply;
  static deserializeBinaryFromReader(message: RejectBankingWithdrawReply, reader: jspb.BinaryReader): RejectBankingWithdrawReply;
}

export namespace RejectBankingWithdrawReply {
  export type AsObject = {
  }
}

export class CancelBankingWithdrawRequest extends jspb.Message {
  getPaymentId(): number;
  setPaymentId(value: number): CancelBankingWithdrawRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CancelBankingWithdrawRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CancelBankingWithdrawRequest): CancelBankingWithdrawRequest.AsObject;
  static serializeBinaryToWriter(message: CancelBankingWithdrawRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CancelBankingWithdrawRequest;
  static deserializeBinaryFromReader(message: CancelBankingWithdrawRequest, reader: jspb.BinaryReader): CancelBankingWithdrawRequest;
}

export namespace CancelBankingWithdrawRequest {
  export type AsObject = {
    paymentId: number,
  }
}

export class CancelBankingWithdrawReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CancelBankingWithdrawReply.AsObject;
  static toObject(includeInstance: boolean, msg: CancelBankingWithdrawReply): CancelBankingWithdrawReply.AsObject;
  static serializeBinaryToWriter(message: CancelBankingWithdrawReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CancelBankingWithdrawReply;
  static deserializeBinaryFromReader(message: CancelBankingWithdrawReply, reader: jspb.BinaryReader): CancelBankingWithdrawReply;
}

export namespace CancelBankingWithdrawReply {
  export type AsObject = {
  }
}

export class ListSystemBankAccountsRequest extends jspb.Message {
  getMerchantIdsList(): Array<number>;
  setMerchantIdsList(value: Array<number>): ListSystemBankAccountsRequest;
  clearMerchantIdsList(): ListSystemBankAccountsRequest;
  addMerchantIds(value: number, index?: number): ListSystemBankAccountsRequest;

  getStatuesList(): Array<BankStatus>;
  setStatuesList(value: Array<BankStatus>): ListSystemBankAccountsRequest;
  clearStatuesList(): ListSystemBankAccountsRequest;
  addStatues(value: BankStatus, index?: number): ListSystemBankAccountsRequest;

  getBankNamesList(): Array<BankName>;
  setBankNamesList(value: Array<BankName>): ListSystemBankAccountsRequest;
  clearBankNamesList(): ListSystemBankAccountsRequest;
  addBankNames(value: BankName, index?: number): ListSystemBankAccountsRequest;

  getIdsList(): Array<number>;
  setIdsList(value: Array<number>): ListSystemBankAccountsRequest;
  clearIdsList(): ListSystemBankAccountsRequest;
  addIds(value: number, index?: number): ListSystemBankAccountsRequest;

  getPage(): number;
  setPage(value: number): ListSystemBankAccountsRequest;

  getSize(): number;
  setSize(value: number): ListSystemBankAccountsRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListSystemBankAccountsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListSystemBankAccountsRequest): ListSystemBankAccountsRequest.AsObject;
  static serializeBinaryToWriter(message: ListSystemBankAccountsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListSystemBankAccountsRequest;
  static deserializeBinaryFromReader(message: ListSystemBankAccountsRequest, reader: jspb.BinaryReader): ListSystemBankAccountsRequest;
}

export namespace ListSystemBankAccountsRequest {
  export type AsObject = {
    merchantIdsList: Array<number>,
    statuesList: Array<BankStatus>,
    bankNamesList: Array<BankName>,
    idsList: Array<number>,
    page: number,
    size: number,
  }
}

export class ListSystemBankAccountsReply extends jspb.Message {
  getTotal(): number;
  setTotal(value: number): ListSystemBankAccountsReply;

  getCurrentPage(): number;
  setCurrentPage(value: number): ListSystemBankAccountsReply;

  getRecordsList(): Array<SystemBank>;
  setRecordsList(value: Array<SystemBank>): ListSystemBankAccountsReply;
  clearRecordsList(): ListSystemBankAccountsReply;
  addRecords(value?: SystemBank, index?: number): SystemBank;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListSystemBankAccountsReply.AsObject;
  static toObject(includeInstance: boolean, msg: ListSystemBankAccountsReply): ListSystemBankAccountsReply.AsObject;
  static serializeBinaryToWriter(message: ListSystemBankAccountsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListSystemBankAccountsReply;
  static deserializeBinaryFromReader(message: ListSystemBankAccountsReply, reader: jspb.BinaryReader): ListSystemBankAccountsReply;
}

export namespace ListSystemBankAccountsReply {
  export type AsObject = {
    total: number,
    currentPage: number,
    recordsList: Array<SystemBank.AsObject>,
  }
}

export class CreateSystemBankAccountRequest extends jspb.Message {
  getAccountId(): number;
  setAccountId(value: number): CreateSystemBankAccountRequest;

  getBankName(): string;
  setBankName(value: string): CreateSystemBankAccountRequest;

  getMerchantId(): number;
  setMerchantId(value: number): CreateSystemBankAccountRequest;

  getAccountNumber(): string;
  setAccountNumber(value: string): CreateSystemBankAccountRequest;

  getAccountName(): string;
  setAccountName(value: string): CreateSystemBankAccountRequest;

  getBranch(): string;
  setBranch(value: string): CreateSystemBankAccountRequest;

  getBalance(): number;
  setBalance(value: number): CreateSystemBankAccountRequest;

  getDailyBalanceLimit(): number;
  setDailyBalanceLimit(value: number): CreateSystemBankAccountRequest;

  getErrorCode(): string;
  setErrorCode(value: string): CreateSystemBankAccountRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateSystemBankAccountRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateSystemBankAccountRequest): CreateSystemBankAccountRequest.AsObject;
  static serializeBinaryToWriter(message: CreateSystemBankAccountRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateSystemBankAccountRequest;
  static deserializeBinaryFromReader(message: CreateSystemBankAccountRequest, reader: jspb.BinaryReader): CreateSystemBankAccountRequest;
}

export namespace CreateSystemBankAccountRequest {
  export type AsObject = {
    accountId: number,
    bankName: string,
    merchantId: number,
    accountNumber: string,
    accountName: string,
    branch: string,
    balance: number,
    dailyBalanceLimit: number,
    errorCode: string,
  }
}

export class CreateSystemBankAccountReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateSystemBankAccountReply.AsObject;
  static toObject(includeInstance: boolean, msg: CreateSystemBankAccountReply): CreateSystemBankAccountReply.AsObject;
  static serializeBinaryToWriter(message: CreateSystemBankAccountReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateSystemBankAccountReply;
  static deserializeBinaryFromReader(message: CreateSystemBankAccountReply, reader: jspb.BinaryReader): CreateSystemBankAccountReply;
}

export namespace CreateSystemBankAccountReply {
  export type AsObject = {
  }
}

export class VerifyMerchantUserBankAccountRequest extends jspb.Message {
  getBankName(): BankName;
  setBankName(value: BankName): VerifyMerchantUserBankAccountRequest;

  getAccountNumber(): string;
  setAccountNumber(value: string): VerifyMerchantUserBankAccountRequest;

  getAccountName(): string;
  setAccountName(value: string): VerifyMerchantUserBankAccountRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VerifyMerchantUserBankAccountRequest.AsObject;
  static toObject(includeInstance: boolean, msg: VerifyMerchantUserBankAccountRequest): VerifyMerchantUserBankAccountRequest.AsObject;
  static serializeBinaryToWriter(message: VerifyMerchantUserBankAccountRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VerifyMerchantUserBankAccountRequest;
  static deserializeBinaryFromReader(message: VerifyMerchantUserBankAccountRequest, reader: jspb.BinaryReader): VerifyMerchantUserBankAccountRequest;
}

export namespace VerifyMerchantUserBankAccountRequest {
  export type AsObject = {
    bankName: BankName,
    accountNumber: string,
    accountName: string,
  }
}

export class VerifyMerchantUserBankAccountReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VerifyMerchantUserBankAccountReply.AsObject;
  static toObject(includeInstance: boolean, msg: VerifyMerchantUserBankAccountReply): VerifyMerchantUserBankAccountReply.AsObject;
  static serializeBinaryToWriter(message: VerifyMerchantUserBankAccountReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VerifyMerchantUserBankAccountReply;
  static deserializeBinaryFromReader(message: VerifyMerchantUserBankAccountReply, reader: jspb.BinaryReader): VerifyMerchantUserBankAccountReply;
}

export namespace VerifyMerchantUserBankAccountReply {
  export type AsObject = {
  }
}

export class ImportSystemBankAccountRequest extends jspb.Message {
  getRecordsList(): Array<CreateSystemBankAccountRequest>;
  setRecordsList(value: Array<CreateSystemBankAccountRequest>): ImportSystemBankAccountRequest;
  clearRecordsList(): ImportSystemBankAccountRequest;
  addRecords(value?: CreateSystemBankAccountRequest, index?: number): CreateSystemBankAccountRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ImportSystemBankAccountRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ImportSystemBankAccountRequest): ImportSystemBankAccountRequest.AsObject;
  static serializeBinaryToWriter(message: ImportSystemBankAccountRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ImportSystemBankAccountRequest;
  static deserializeBinaryFromReader(message: ImportSystemBankAccountRequest, reader: jspb.BinaryReader): ImportSystemBankAccountRequest;
}

export namespace ImportSystemBankAccountRequest {
  export type AsObject = {
    recordsList: Array<CreateSystemBankAccountRequest.AsObject>,
  }
}

export class ImportSystemBankAccountReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ImportSystemBankAccountReply.AsObject;
  static toObject(includeInstance: boolean, msg: ImportSystemBankAccountReply): ImportSystemBankAccountReply.AsObject;
  static serializeBinaryToWriter(message: ImportSystemBankAccountReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ImportSystemBankAccountReply;
  static deserializeBinaryFromReader(message: ImportSystemBankAccountReply, reader: jspb.BinaryReader): ImportSystemBankAccountReply;
}

export namespace ImportSystemBankAccountReply {
  export type AsObject = {
  }
}

export class ValidateImportSystemBankAccountRequest extends jspb.Message {
  getRecordsList(): Array<CreateSystemBankAccountRequest>;
  setRecordsList(value: Array<CreateSystemBankAccountRequest>): ValidateImportSystemBankAccountRequest;
  clearRecordsList(): ValidateImportSystemBankAccountRequest;
  addRecords(value?: CreateSystemBankAccountRequest, index?: number): CreateSystemBankAccountRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ValidateImportSystemBankAccountRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ValidateImportSystemBankAccountRequest): ValidateImportSystemBankAccountRequest.AsObject;
  static serializeBinaryToWriter(message: ValidateImportSystemBankAccountRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ValidateImportSystemBankAccountRequest;
  static deserializeBinaryFromReader(message: ValidateImportSystemBankAccountRequest, reader: jspb.BinaryReader): ValidateImportSystemBankAccountRequest;
}

export namespace ValidateImportSystemBankAccountRequest {
  export type AsObject = {
    recordsList: Array<CreateSystemBankAccountRequest.AsObject>,
  }
}

export class ValidateImportSystemBankAccountReply extends jspb.Message {
  getDuplicatedRecordsList(): Array<CreateSystemBankAccountRequest>;
  setDuplicatedRecordsList(value: Array<CreateSystemBankAccountRequest>): ValidateImportSystemBankAccountReply;
  clearDuplicatedRecordsList(): ValidateImportSystemBankAccountReply;
  addDuplicatedRecords(value?: CreateSystemBankAccountRequest, index?: number): CreateSystemBankAccountRequest;

  getValidRecordsList(): Array<CreateSystemBankAccountRequest>;
  setValidRecordsList(value: Array<CreateSystemBankAccountRequest>): ValidateImportSystemBankAccountReply;
  clearValidRecordsList(): ValidateImportSystemBankAccountReply;
  addValidRecords(value?: CreateSystemBankAccountRequest, index?: number): CreateSystemBankAccountRequest;

  getDuplicatedAccountIdRecordsList(): Array<CreateSystemBankAccountRequest>;
  setDuplicatedAccountIdRecordsList(value: Array<CreateSystemBankAccountRequest>): ValidateImportSystemBankAccountReply;
  clearDuplicatedAccountIdRecordsList(): ValidateImportSystemBankAccountReply;
  addDuplicatedAccountIdRecords(value?: CreateSystemBankAccountRequest, index?: number): CreateSystemBankAccountRequest;

  getInvalidRecordsList(): Array<CreateSystemBankAccountRequest>;
  setInvalidRecordsList(value: Array<CreateSystemBankAccountRequest>): ValidateImportSystemBankAccountReply;
  clearInvalidRecordsList(): ValidateImportSystemBankAccountReply;
  addInvalidRecords(value?: CreateSystemBankAccountRequest, index?: number): CreateSystemBankAccountRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ValidateImportSystemBankAccountReply.AsObject;
  static toObject(includeInstance: boolean, msg: ValidateImportSystemBankAccountReply): ValidateImportSystemBankAccountReply.AsObject;
  static serializeBinaryToWriter(message: ValidateImportSystemBankAccountReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ValidateImportSystemBankAccountReply;
  static deserializeBinaryFromReader(message: ValidateImportSystemBankAccountReply, reader: jspb.BinaryReader): ValidateImportSystemBankAccountReply;
}

export namespace ValidateImportSystemBankAccountReply {
  export type AsObject = {
    duplicatedRecordsList: Array<CreateSystemBankAccountRequest.AsObject>,
    validRecordsList: Array<CreateSystemBankAccountRequest.AsObject>,
    duplicatedAccountIdRecordsList: Array<CreateSystemBankAccountRequest.AsObject>,
    invalidRecordsList: Array<CreateSystemBankAccountRequest.AsObject>,
  }
}

export class UpdateSystemBankAccountStatusRequest extends jspb.Message {
  getId(): number;
  setId(value: number): UpdateSystemBankAccountStatusRequest;

  getStatus(): BankStatus;
  setStatus(value: BankStatus): UpdateSystemBankAccountStatusRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateSystemBankAccountStatusRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateSystemBankAccountStatusRequest): UpdateSystemBankAccountStatusRequest.AsObject;
  static serializeBinaryToWriter(message: UpdateSystemBankAccountStatusRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateSystemBankAccountStatusRequest;
  static deserializeBinaryFromReader(message: UpdateSystemBankAccountStatusRequest, reader: jspb.BinaryReader): UpdateSystemBankAccountStatusRequest;
}

export namespace UpdateSystemBankAccountStatusRequest {
  export type AsObject = {
    id: number,
    status: BankStatus,
  }
}

export class UpdateSystemBankAccountStatusReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateSystemBankAccountStatusReply.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateSystemBankAccountStatusReply): UpdateSystemBankAccountStatusReply.AsObject;
  static serializeBinaryToWriter(message: UpdateSystemBankAccountStatusReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateSystemBankAccountStatusReply;
  static deserializeBinaryFromReader(message: UpdateSystemBankAccountStatusReply, reader: jspb.BinaryReader): UpdateSystemBankAccountStatusReply;
}

export namespace UpdateSystemBankAccountStatusReply {
  export type AsObject = {
  }
}

export class ListSystemBankAccountByPaymentInfoRequest extends jspb.Message {
  getMerchantId(): number;
  setMerchantId(value: number): ListSystemBankAccountByPaymentInfoRequest;

  getBankName(): BankName;
  setBankName(value: BankName): ListSystemBankAccountByPaymentInfoRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListSystemBankAccountByPaymentInfoRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListSystemBankAccountByPaymentInfoRequest): ListSystemBankAccountByPaymentInfoRequest.AsObject;
  static serializeBinaryToWriter(message: ListSystemBankAccountByPaymentInfoRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListSystemBankAccountByPaymentInfoRequest;
  static deserializeBinaryFromReader(message: ListSystemBankAccountByPaymentInfoRequest, reader: jspb.BinaryReader): ListSystemBankAccountByPaymentInfoRequest;
}

export namespace ListSystemBankAccountByPaymentInfoRequest {
  export type AsObject = {
    merchantId: number,
    bankName: BankName,
  }
}

export class ListSystemBankAccountByPaymentInfoReply extends jspb.Message {
  getRecordsList(): Array<SystemBank>;
  setRecordsList(value: Array<SystemBank>): ListSystemBankAccountByPaymentInfoReply;
  clearRecordsList(): ListSystemBankAccountByPaymentInfoReply;
  addRecords(value?: SystemBank, index?: number): SystemBank;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListSystemBankAccountByPaymentInfoReply.AsObject;
  static toObject(includeInstance: boolean, msg: ListSystemBankAccountByPaymentInfoReply): ListSystemBankAccountByPaymentInfoReply.AsObject;
  static serializeBinaryToWriter(message: ListSystemBankAccountByPaymentInfoReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListSystemBankAccountByPaymentInfoReply;
  static deserializeBinaryFromReader(message: ListSystemBankAccountByPaymentInfoReply, reader: jspb.BinaryReader): ListSystemBankAccountByPaymentInfoReply;
}

export namespace ListSystemBankAccountByPaymentInfoReply {
  export type AsObject = {
    recordsList: Array<SystemBank.AsObject>,
  }
}

export class SystemBank extends jspb.Message {
  getId(): number;
  setId(value: number): SystemBank;

  getBankName(): BankName;
  setBankName(value: BankName): SystemBank;

  getStatus(): BankStatus;
  setStatus(value: BankStatus): SystemBank;

  getMerchantId(): number;
  setMerchantId(value: number): SystemBank;

  getAccountNumber(): string;
  setAccountNumber(value: string): SystemBank;

  getAccountName(): string;
  setAccountName(value: string): SystemBank;

  getBranch(): string;
  setBranch(value: string): SystemBank;

  getBalance(): number;
  setBalance(value: number): SystemBank;

  getDailyBalanceLimit(): number;
  setDailyBalanceLimit(value: number): SystemBank;

  getDailyUsedAmount(): number;
  setDailyUsedAmount(value: number): SystemBank;

  getDailyBalance(): number;
  setDailyBalance(value: number): SystemBank;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SystemBank.AsObject;
  static toObject(includeInstance: boolean, msg: SystemBank): SystemBank.AsObject;
  static serializeBinaryToWriter(message: SystemBank, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SystemBank;
  static deserializeBinaryFromReader(message: SystemBank, reader: jspb.BinaryReader): SystemBank;
}

export namespace SystemBank {
  export type AsObject = {
    id: number,
    bankName: BankName,
    status: BankStatus,
    merchantId: number,
    accountNumber: string,
    accountName: string,
    branch: string,
    balance: number,
    dailyBalanceLimit: number,
    dailyUsedAmount: number,
    dailyBalance: number,
  }
}

export class ConductBankPayment extends jspb.Message {
  getBankName(): BankName;
  setBankName(value: BankName): ConductBankPayment;

  getAccountNumber(): string;
  setAccountNumber(value: string): ConductBankPayment;

  getAccountName(): string;
  setAccountName(value: string): ConductBankPayment;

  getAmount(): number;
  setAmount(value: number): ConductBankPayment;

  getFee(): number;
  setFee(value: number): ConductBankPayment;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConductBankPayment.AsObject;
  static toObject(includeInstance: boolean, msg: ConductBankPayment): ConductBankPayment.AsObject;
  static serializeBinaryToWriter(message: ConductBankPayment, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConductBankPayment;
  static deserializeBinaryFromReader(message: ConductBankPayment, reader: jspb.BinaryReader): ConductBankPayment;
}

export namespace ConductBankPayment {
  export type AsObject = {
    bankName: BankName,
    accountNumber: string,
    accountName: string,
    amount: number,
    fee: number,
  }
}

export class BankingPaymentDetail extends jspb.Message {
  getId(): number;
  setId(value: number): BankingPaymentDetail;

  getMerchantUserBankName(): BankName;
  setMerchantUserBankName(value: BankName): BankingPaymentDetail;

  getMerchantUserAccountNumber(): string;
  setMerchantUserAccountNumber(value: string): BankingPaymentDetail;

  getMerchantUserAccountName(): string;
  setMerchantUserAccountName(value: string): BankingPaymentDetail;

  getSystemBankName(): BankName;
  setSystemBankName(value: BankName): BankingPaymentDetail;

  getSystemAccountNumber(): string;
  setSystemAccountNumber(value: string): BankingPaymentDetail;

  getSystemAccountName(): string;
  setSystemAccountName(value: string): BankingPaymentDetail;

  getAmount(): number;
  setAmount(value: number): BankingPaymentDetail;

  getImageUrl(): string;
  setImageUrl(value: string): BankingPaymentDetail;

  getTxId(): string;
  setTxId(value: string): BankingPaymentDetail;

  getPaymentCode(): string;
  setPaymentCode(value: string): BankingPaymentDetail;

  getFee(): number;
  setFee(value: number): BankingPaymentDetail;

  getMerchantUserId(): number;
  setMerchantUserId(value: number): BankingPaymentDetail;

  getCreatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setCreatedAt(value?: google_protobuf_timestamp_pb.Timestamp): BankingPaymentDetail;
  hasCreatedAt(): boolean;
  clearCreatedAt(): BankingPaymentDetail;

  getUpdatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setUpdatedAt(value?: google_protobuf_timestamp_pb.Timestamp): BankingPaymentDetail;
  hasUpdatedAt(): boolean;
  clearUpdatedAt(): BankingPaymentDetail;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BankingPaymentDetail.AsObject;
  static toObject(includeInstance: boolean, msg: BankingPaymentDetail): BankingPaymentDetail.AsObject;
  static serializeBinaryToWriter(message: BankingPaymentDetail, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BankingPaymentDetail;
  static deserializeBinaryFromReader(message: BankingPaymentDetail, reader: jspb.BinaryReader): BankingPaymentDetail;
}

export namespace BankingPaymentDetail {
  export type AsObject = {
    id: number,
    merchantUserBankName: BankName,
    merchantUserAccountNumber: string,
    merchantUserAccountName: string,
    systemBankName: BankName,
    systemAccountNumber: string,
    systemAccountName: string,
    amount: number,
    imageUrl: string,
    txId: string,
    paymentCode: string,
    fee: number,
    merchantUserId: number,
    createdAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    updatedAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
  }
}

export enum BankName { 
  BANK_UNSPECIFIED = 0,
  VIETCOMBANK = 1,
  SACOMBANK = 2,
  ACB = 3,
  VIETINBANK = 4,
  BIDV = 5,
}
export enum BankStatus { 
  BANK_STATUS_UNSPECIFIED = 0,
  BANK_STATUS_ACTIVE = 1,
  BANK_STATUS_IN_ACTIVE = 2,
}
