/**
 * @fileoverview gRPC-Web generated client stub for mcuc.groot
 * @enhanceable
 * @public
 */

// GENERATED CODE -- DO NOT EDIT!


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as groot_api_groot_pb from './groot_pb';


export class GrootClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname;
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodInfoGetCard = new grpcWeb.AbstractClientBase.MethodInfo(
    groot_api_groot_pb.Card,
    (request: groot_api_groot_pb.GetCardRequest) => {
      return request.serializeBinary();
    },
    groot_api_groot_pb.Card.deserializeBinary
  );

  getCard(
    request: groot_api_groot_pb.GetCardRequest,
    metadata: grpcWeb.Metadata | null): Promise<groot_api_groot_pb.Card>;

  getCard(
    request: groot_api_groot_pb.GetCardRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: groot_api_groot_pb.Card) => void): grpcWeb.ClientReadableStream<groot_api_groot_pb.Card>;

  getCard(
    request: groot_api_groot_pb.GetCardRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: groot_api_groot_pb.Card) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.groot.Groot/GetCard',
        request,
        metadata || {},
        this.methodInfoGetCard,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.groot.Groot/GetCard',
    request,
    metadata || {},
    this.methodInfoGetCard);
  }

  methodInfoChargeCard = new grpcWeb.AbstractClientBase.MethodInfo(
    groot_api_groot_pb.ChargeCardReply,
    (request: groot_api_groot_pb.ChargeCardRequest) => {
      return request.serializeBinary();
    },
    groot_api_groot_pb.ChargeCardReply.deserializeBinary
  );

  chargeCard(
    request: groot_api_groot_pb.ChargeCardRequest,
    metadata: grpcWeb.Metadata | null): Promise<groot_api_groot_pb.ChargeCardReply>;

  chargeCard(
    request: groot_api_groot_pb.ChargeCardRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: groot_api_groot_pb.ChargeCardReply) => void): grpcWeb.ClientReadableStream<groot_api_groot_pb.ChargeCardReply>;

  chargeCard(
    request: groot_api_groot_pb.ChargeCardRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: groot_api_groot_pb.ChargeCardReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.groot.Groot/ChargeCard',
        request,
        metadata || {},
        this.methodInfoChargeCard,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.groot.Groot/ChargeCard',
    request,
    metadata || {},
    this.methodInfoChargeCard);
  }

  methodInfoGetTxIDByCard = new grpcWeb.AbstractClientBase.MethodInfo(
    groot_api_groot_pb.GetTxIDByCardReply,
    (request: groot_api_groot_pb.GetTxIDByCardRequest) => {
      return request.serializeBinary();
    },
    groot_api_groot_pb.GetTxIDByCardReply.deserializeBinary
  );

  getTxIDByCard(
    request: groot_api_groot_pb.GetTxIDByCardRequest,
    metadata: grpcWeb.Metadata | null): Promise<groot_api_groot_pb.GetTxIDByCardReply>;

  getTxIDByCard(
    request: groot_api_groot_pb.GetTxIDByCardRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: groot_api_groot_pb.GetTxIDByCardReply) => void): grpcWeb.ClientReadableStream<groot_api_groot_pb.GetTxIDByCardReply>;

  getTxIDByCard(
    request: groot_api_groot_pb.GetTxIDByCardRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: groot_api_groot_pb.GetTxIDByCardReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/mcuc.groot.Groot/GetTxIDByCard',
        request,
        metadata || {},
        this.methodInfoGetTxIDByCard,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/mcuc.groot.Groot/GetTxIDByCard',
    request,
    metadata || {},
    this.methodInfoGetTxIDByCard);
  }

}

