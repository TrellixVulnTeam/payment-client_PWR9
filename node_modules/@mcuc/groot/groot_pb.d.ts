import * as jspb from 'google-protobuf'



export class GetCardRequest extends jspb.Message {
  getTelcoName(): TelcoName;
  setTelcoName(value: TelcoName): GetCardRequest;

  getAmount(): number;
  setAmount(value: number): GetCardRequest;

  getProvidersList(): Array<string>;
  setProvidersList(value: Array<string>): GetCardRequest;
  clearProvidersList(): GetCardRequest;
  addProviders(value: string, index?: number): GetCardRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetCardRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetCardRequest): GetCardRequest.AsObject;
  static serializeBinaryToWriter(message: GetCardRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetCardRequest;
  static deserializeBinaryFromReader(message: GetCardRequest, reader: jspb.BinaryReader): GetCardRequest;
}

export namespace GetCardRequest {
  export type AsObject = {
    telcoName: TelcoName,
    amount: number,
    providersList: Array<string>,
  }
}

export class ChargeCardRequest extends jspb.Message {
  getCard(): Card | undefined;
  setCard(value?: Card): ChargeCardRequest;
  hasCard(): boolean;
  clearCard(): ChargeCardRequest;

  getPaymentId(): string;
  setPaymentId(value: string): ChargeCardRequest;

  getProvidersList(): Array<string>;
  setProvidersList(value: Array<string>): ChargeCardRequest;
  clearProvidersList(): ChargeCardRequest;
  addProviders(value: string, index?: number): ChargeCardRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChargeCardRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ChargeCardRequest): ChargeCardRequest.AsObject;
  static serializeBinaryToWriter(message: ChargeCardRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChargeCardRequest;
  static deserializeBinaryFromReader(message: ChargeCardRequest, reader: jspb.BinaryReader): ChargeCardRequest;
}

export namespace ChargeCardRequest {
  export type AsObject = {
    card?: Card.AsObject,
    paymentId: string,
    providersList: Array<string>,
  }
}

export class GetTxIDByCardRequest extends jspb.Message {
  getCard(): Card | undefined;
  setCard(value?: Card): GetTxIDByCardRequest;
  hasCard(): boolean;
  clearCard(): GetTxIDByCardRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetTxIDByCardRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetTxIDByCardRequest): GetTxIDByCardRequest.AsObject;
  static serializeBinaryToWriter(message: GetTxIDByCardRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetTxIDByCardRequest;
  static deserializeBinaryFromReader(message: GetTxIDByCardRequest, reader: jspb.BinaryReader): GetTxIDByCardRequest;
}

export namespace GetTxIDByCardRequest {
  export type AsObject = {
    card?: Card.AsObject,
  }
}

export class GetTxIDByCardReply extends jspb.Message {
  getTxId(): string;
  setTxId(value: string): GetTxIDByCardReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetTxIDByCardReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetTxIDByCardReply): GetTxIDByCardReply.AsObject;
  static serializeBinaryToWriter(message: GetTxIDByCardReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetTxIDByCardReply;
  static deserializeBinaryFromReader(message: GetTxIDByCardReply, reader: jspb.BinaryReader): GetTxIDByCardReply;
}

export namespace GetTxIDByCardReply {
  export type AsObject = {
    txId: string,
  }
}

export class ChargeCardReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChargeCardReply.AsObject;
  static toObject(includeInstance: boolean, msg: ChargeCardReply): ChargeCardReply.AsObject;
  static serializeBinaryToWriter(message: ChargeCardReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChargeCardReply;
  static deserializeBinaryFromReader(message: ChargeCardReply, reader: jspb.BinaryReader): ChargeCardReply;
}

export namespace ChargeCardReply {
  export type AsObject = {
  }
}

export class Card extends jspb.Message {
  getCode(): string;
  setCode(value: string): Card;

  getSerial(): string;
  setSerial(value: string): Card;

  getTelcoName(): TelcoName;
  setTelcoName(value: TelcoName): Card;

  getAmount(): number;
  setAmount(value: number): Card;

  getPrice(): number;
  setPrice(value: number): Card;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Card.AsObject;
  static toObject(includeInstance: boolean, msg: Card): Card.AsObject;
  static serializeBinaryToWriter(message: Card, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Card;
  static deserializeBinaryFromReader(message: Card, reader: jspb.BinaryReader): Card;
}

export namespace Card {
  export type AsObject = {
    code: string,
    serial: string,
    telcoName: TelcoName,
    amount: number,
    price: number,
  }
}

export class Provider extends jspb.Message {
  getId(): number;
  setId(value: number): Provider;

  getName(): string;
  setName(value: string): Provider;

  getKey(): string;
  setKey(value: string): Provider;

  getProviderType(): ProviderType;
  setProviderType(value: ProviderType): Provider;

  getPriority(): number;
  setPriority(value: number): Provider;

  getEnabled(): boolean;
  setEnabled(value: boolean): Provider;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Provider.AsObject;
  static toObject(includeInstance: boolean, msg: Provider): Provider.AsObject;
  static serializeBinaryToWriter(message: Provider, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Provider;
  static deserializeBinaryFromReader(message: Provider, reader: jspb.BinaryReader): Provider;
}

export namespace Provider {
  export type AsObject = {
    id: number,
    name: string,
    key: string,
    providerType: ProviderType,
    priority: number,
    enabled: boolean,
  }
}

export enum ProviderType { 
  PROVIDER_TYPE_UNSPECIFIED = 0,
  TOPUP = 1,
  WITHDRAW = 2,
}
export enum TelcoName { 
  BRANCH_UNSPECIFIED = 0,
  VIETTEL = 1,
  MOBIPHONE = 2,
  VINAPHONE = 3,
  VIETNAMMOBILE = 4,
}
