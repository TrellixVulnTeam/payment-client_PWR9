import * as jspb from 'google-protobuf'

import * as validate_validate_pb from '@greyhole/validate/validate_pb';
import * as google_protobuf_timestamp_pb from 'google-protobuf/google/protobuf/timestamp_pb';


export class CreateMerchantRequest extends jspb.Message {
  getName(): string;
  setName(value: string): CreateMerchantRequest;

  getLogoPath(): string;
  setLogoPath(value: string): CreateMerchantRequest;

  getWebhookUrl(): string;
  setWebhookUrl(value: string): CreateMerchantRequest;

  getEmailContact(): string;
  setEmailContact(value: string): CreateMerchantRequest;

  getSlackWebhookUrl(): string;
  setSlackWebhookUrl(value: string): CreateMerchantRequest;

  getSafetyLimit(): number;
  setSafetyLimit(value: number): CreateMerchantRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateMerchantRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateMerchantRequest): CreateMerchantRequest.AsObject;
  static serializeBinaryToWriter(message: CreateMerchantRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateMerchantRequest;
  static deserializeBinaryFromReader(message: CreateMerchantRequest, reader: jspb.BinaryReader): CreateMerchantRequest;
}

export namespace CreateMerchantRequest {
  export type AsObject = {
    name: string,
    logoPath: string,
    webhookUrl: string,
    emailContact: string,
    slackWebhookUrl: string,
    safetyLimit: number,
  }
}

export class CreateMerchantReply extends jspb.Message {
  getMerchant(): Merchant | undefined;
  setMerchant(value?: Merchant): CreateMerchantReply;
  hasMerchant(): boolean;
  clearMerchant(): CreateMerchantReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateMerchantReply.AsObject;
  static toObject(includeInstance: boolean, msg: CreateMerchantReply): CreateMerchantReply.AsObject;
  static serializeBinaryToWriter(message: CreateMerchantReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateMerchantReply;
  static deserializeBinaryFromReader(message: CreateMerchantReply, reader: jspb.BinaryReader): CreateMerchantReply;
}

export namespace CreateMerchantReply {
  export type AsObject = {
    merchant?: Merchant.AsObject,
  }
}

export class UpdateMerchantRequest extends jspb.Message {
  getId(): number;
  setId(value: number): UpdateMerchantRequest;

  getName(): string;
  setName(value: string): UpdateMerchantRequest;

  getLogoPath(): string;
  setLogoPath(value: string): UpdateMerchantRequest;

  getWebhookUrl(): string;
  setWebhookUrl(value: string): UpdateMerchantRequest;

  getEmailContact(): string;
  setEmailContact(value: string): UpdateMerchantRequest;

  getSlackWebhookUrl(): string;
  setSlackWebhookUrl(value: string): UpdateMerchantRequest;

  getSafetyLimit(): number;
  setSafetyLimit(value: number): UpdateMerchantRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateMerchantRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateMerchantRequest): UpdateMerchantRequest.AsObject;
  static serializeBinaryToWriter(message: UpdateMerchantRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateMerchantRequest;
  static deserializeBinaryFromReader(message: UpdateMerchantRequest, reader: jspb.BinaryReader): UpdateMerchantRequest;
}

export namespace UpdateMerchantRequest {
  export type AsObject = {
    id: number,
    name: string,
    logoPath: string,
    webhookUrl: string,
    emailContact: string,
    slackWebhookUrl: string,
    safetyLimit: number,
  }
}

export class UpdateMerchantReply extends jspb.Message {
  getMerchant(): Merchant | undefined;
  setMerchant(value?: Merchant): UpdateMerchantReply;
  hasMerchant(): boolean;
  clearMerchant(): UpdateMerchantReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateMerchantReply.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateMerchantReply): UpdateMerchantReply.AsObject;
  static serializeBinaryToWriter(message: UpdateMerchantReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateMerchantReply;
  static deserializeBinaryFromReader(message: UpdateMerchantReply, reader: jspb.BinaryReader): UpdateMerchantReply;
}

export namespace UpdateMerchantReply {
  export type AsObject = {
    merchant?: Merchant.AsObject,
  }
}

export class ListMerchantsRequest extends jspb.Message {
  getPage(): number;
  setPage(value: number): ListMerchantsRequest;

  getSize(): number;
  setSize(value: number): ListMerchantsRequest;

  getKeyword(): string;
  setKeyword(value: string): ListMerchantsRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListMerchantsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListMerchantsRequest): ListMerchantsRequest.AsObject;
  static serializeBinaryToWriter(message: ListMerchantsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListMerchantsRequest;
  static deserializeBinaryFromReader(message: ListMerchantsRequest, reader: jspb.BinaryReader): ListMerchantsRequest;
}

export namespace ListMerchantsRequest {
  export type AsObject = {
    page: number,
    size: number,
    keyword: string,
  }
}

export class ListMerchantsReply extends jspb.Message {
  getRecordsList(): Array<Merchant>;
  setRecordsList(value: Array<Merchant>): ListMerchantsReply;
  clearRecordsList(): ListMerchantsReply;
  addRecords(value?: Merchant, index?: number): Merchant;

  getTotal(): number;
  setTotal(value: number): ListMerchantsReply;

  getCurrentPage(): number;
  setCurrentPage(value: number): ListMerchantsReply;

  getCurrentSize(): number;
  setCurrentSize(value: number): ListMerchantsReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListMerchantsReply.AsObject;
  static toObject(includeInstance: boolean, msg: ListMerchantsReply): ListMerchantsReply.AsObject;
  static serializeBinaryToWriter(message: ListMerchantsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListMerchantsReply;
  static deserializeBinaryFromReader(message: ListMerchantsReply, reader: jspb.BinaryReader): ListMerchantsReply;
}

export namespace ListMerchantsReply {
  export type AsObject = {
    recordsList: Array<Merchant.AsObject>,
    total: number,
    currentPage: number,
    currentSize: number,
  }
}

export class GetMerchantRequest extends jspb.Message {
  getId(): number;
  setId(value: number): GetMerchantRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetMerchantRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetMerchantRequest): GetMerchantRequest.AsObject;
  static serializeBinaryToWriter(message: GetMerchantRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetMerchantRequest;
  static deserializeBinaryFromReader(message: GetMerchantRequest, reader: jspb.BinaryReader): GetMerchantRequest;
}

export namespace GetMerchantRequest {
  export type AsObject = {
    id: number,
  }
}

export class GetMerchantReply extends jspb.Message {
  getMerchant(): Merchant | undefined;
  setMerchant(value?: Merchant): GetMerchantReply;
  hasMerchant(): boolean;
  clearMerchant(): GetMerchantReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetMerchantReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetMerchantReply): GetMerchantReply.AsObject;
  static serializeBinaryToWriter(message: GetMerchantReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetMerchantReply;
  static deserializeBinaryFromReader(message: GetMerchantReply, reader: jspb.BinaryReader): GetMerchantReply;
}

export namespace GetMerchantReply {
  export type AsObject = {
    merchant?: Merchant.AsObject,
  }
}

export class Merchant extends jspb.Message {
  getId(): number;
  setId(value: number): Merchant;

  getName(): string;
  setName(value: string): Merchant;

  getLogoPath(): string;
  setLogoPath(value: string): Merchant;

  getEmailContact(): string;
  setEmailContact(value: string): Merchant;

  getWebhookUrl(): string;
  setWebhookUrl(value: string): Merchant;

  getSlackWebhookUrl(): string;
  setSlackWebhookUrl(value: string): Merchant;

  getSafetyLimit(): number;
  setSafetyLimit(value: number): Merchant;

  getCreatedBy(): string;
  setCreatedBy(value: string): Merchant;

  getUpdatedBy(): string;
  setUpdatedBy(value: string): Merchant;

  getCreatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setCreatedAt(value?: google_protobuf_timestamp_pb.Timestamp): Merchant;
  hasCreatedAt(): boolean;
  clearCreatedAt(): Merchant;

  getUpdatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setUpdatedAt(value?: google_protobuf_timestamp_pb.Timestamp): Merchant;
  hasUpdatedAt(): boolean;
  clearUpdatedAt(): Merchant;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Merchant.AsObject;
  static toObject(includeInstance: boolean, msg: Merchant): Merchant.AsObject;
  static serializeBinaryToWriter(message: Merchant, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Merchant;
  static deserializeBinaryFromReader(message: Merchant, reader: jspb.BinaryReader): Merchant;
}

export namespace Merchant {
  export type AsObject = {
    id: number,
    name: string,
    logoPath: string,
    emailContact: string,
    webhookUrl: string,
    slackWebhookUrl: string,
    safetyLimit: number,
    createdBy: string,
    updatedBy: string,
    createdAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    updatedAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
  }
}

export class MakePaymentRequest extends jspb.Message {
  getMerchantId(): number;
  setMerchantId(value: number): MakePaymentRequest;

  getAmount(): number;
  setAmount(value: number): MakePaymentRequest;

  getType(): PaymentType;
  setType(value: PaymentType): MakePaymentRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MakePaymentRequest.AsObject;
  static toObject(includeInstance: boolean, msg: MakePaymentRequest): MakePaymentRequest.AsObject;
  static serializeBinaryToWriter(message: MakePaymentRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MakePaymentRequest;
  static deserializeBinaryFromReader(message: MakePaymentRequest, reader: jspb.BinaryReader): MakePaymentRequest;
}

export namespace MakePaymentRequest {
  export type AsObject = {
    merchantId: number,
    amount: number,
    type: PaymentType,
  }
}

export class MakePaymentReply extends jspb.Message {
  getBalance(): number;
  setBalance(value: number): MakePaymentReply;

  getPayment(): Payment | undefined;
  setPayment(value?: Payment): MakePaymentReply;
  hasPayment(): boolean;
  clearPayment(): MakePaymentReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MakePaymentReply.AsObject;
  static toObject(includeInstance: boolean, msg: MakePaymentReply): MakePaymentReply.AsObject;
  static serializeBinaryToWriter(message: MakePaymentReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MakePaymentReply;
  static deserializeBinaryFromReader(message: MakePaymentReply, reader: jspb.BinaryReader): MakePaymentReply;
}

export namespace MakePaymentReply {
  export type AsObject = {
    balance: number,
    payment?: Payment.AsObject,
  }
}

export class GetMerchantBalanceRequest extends jspb.Message {
  getMerchantId(): number;
  setMerchantId(value: number): GetMerchantBalanceRequest;

  getFromDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setFromDate(value?: google_protobuf_timestamp_pb.Timestamp): GetMerchantBalanceRequest;
  hasFromDate(): boolean;
  clearFromDate(): GetMerchantBalanceRequest;

  getToDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setToDate(value?: google_protobuf_timestamp_pb.Timestamp): GetMerchantBalanceRequest;
  hasToDate(): boolean;
  clearToDate(): GetMerchantBalanceRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetMerchantBalanceRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetMerchantBalanceRequest): GetMerchantBalanceRequest.AsObject;
  static serializeBinaryToWriter(message: GetMerchantBalanceRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetMerchantBalanceRequest;
  static deserializeBinaryFromReader(message: GetMerchantBalanceRequest, reader: jspb.BinaryReader): GetMerchantBalanceRequest;
}

export namespace GetMerchantBalanceRequest {
  export type AsObject = {
    merchantId: number,
    fromDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    toDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
  }
}

export class GetMerchantBalanceReply extends jspb.Message {
  getBalance(): number;
  setBalance(value: number): GetMerchantBalanceReply;

  getTotalMoneyIn(): number;
  setTotalMoneyIn(value: number): GetMerchantBalanceReply;

  getTotalMoneyOut(): number;
  setTotalMoneyOut(value: number): GetMerchantBalanceReply;

  getReceiptVoucher(): VoucherSummary | undefined;
  setReceiptVoucher(value?: VoucherSummary): GetMerchantBalanceReply;
  hasReceiptVoucher(): boolean;
  clearReceiptVoucher(): GetMerchantBalanceReply;

  getPaymentVoucher(): VoucherSummary | undefined;
  setPaymentVoucher(value?: VoucherSummary): GetMerchantBalanceReply;
  hasPaymentVoucher(): boolean;
  clearPaymentVoucher(): GetMerchantBalanceReply;

  getBalanceForMexWithdrawProfit(): number;
  setBalanceForMexWithdrawProfit(value: number): GetMerchantBalanceReply;

  getBalanceForMexWithdrawFunds(): number;
  setBalanceForMexWithdrawFunds(value: number): GetMerchantBalanceReply;

  getProfit(): number;
  setProfit(value: number): GetMerchantBalanceReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetMerchantBalanceReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetMerchantBalanceReply): GetMerchantBalanceReply.AsObject;
  static serializeBinaryToWriter(message: GetMerchantBalanceReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetMerchantBalanceReply;
  static deserializeBinaryFromReader(message: GetMerchantBalanceReply, reader: jspb.BinaryReader): GetMerchantBalanceReply;
}

export namespace GetMerchantBalanceReply {
  export type AsObject = {
    balance: number,
    totalMoneyIn: number,
    totalMoneyOut: number,
    receiptVoucher?: VoucherSummary.AsObject,
    paymentVoucher?: VoucherSummary.AsObject,
    balanceForMexWithdrawProfit: number,
    balanceForMexWithdrawFunds: number,
    profit: number,
  }
}

export class NotifyRejectPaymentRequest extends jspb.Message {
  getMerchantId(): number;
  setMerchantId(value: number): NotifyRejectPaymentRequest;

  getReason(): string;
  setReason(value: string): NotifyRejectPaymentRequest;

  getPaymentId(): number;
  setPaymentId(value: number): NotifyRejectPaymentRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): NotifyRejectPaymentRequest.AsObject;
  static toObject(includeInstance: boolean, msg: NotifyRejectPaymentRequest): NotifyRejectPaymentRequest.AsObject;
  static serializeBinaryToWriter(message: NotifyRejectPaymentRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): NotifyRejectPaymentRequest;
  static deserializeBinaryFromReader(message: NotifyRejectPaymentRequest, reader: jspb.BinaryReader): NotifyRejectPaymentRequest;
}

export namespace NotifyRejectPaymentRequest {
  export type AsObject = {
    merchantId: number,
    reason: string,
    paymentId: number,
  }
}

export class NotifyRejectPaymentReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): NotifyRejectPaymentReply.AsObject;
  static toObject(includeInstance: boolean, msg: NotifyRejectPaymentReply): NotifyRejectPaymentReply.AsObject;
  static serializeBinaryToWriter(message: NotifyRejectPaymentReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): NotifyRejectPaymentReply;
  static deserializeBinaryFromReader(message: NotifyRejectPaymentReply, reader: jspb.BinaryReader): NotifyRejectPaymentReply;
}

export namespace NotifyRejectPaymentReply {
  export type AsObject = {
  }
}

export class CreateVoucherRequest extends jspb.Message {
  getMerchantId(): number;
  setMerchantId(value: number): CreateVoucherRequest;

  getType(): PaymentType;
  setType(value: PaymentType): CreateVoucherRequest;

  getAmount(): number;
  setAmount(value: number): CreateVoucherRequest;

  getNote(): string;
  setNote(value: string): CreateVoucherRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateVoucherRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateVoucherRequest): CreateVoucherRequest.AsObject;
  static serializeBinaryToWriter(message: CreateVoucherRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateVoucherRequest;
  static deserializeBinaryFromReader(message: CreateVoucherRequest, reader: jspb.BinaryReader): CreateVoucherRequest;
}

export namespace CreateVoucherRequest {
  export type AsObject = {
    merchantId: number,
    type: PaymentType,
    amount: number,
    note: string,
  }
}

export class CreateVoucherReply extends jspb.Message {
  getVoucher(): Voucher | undefined;
  setVoucher(value?: Voucher): CreateVoucherReply;
  hasVoucher(): boolean;
  clearVoucher(): CreateVoucherReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateVoucherReply.AsObject;
  static toObject(includeInstance: boolean, msg: CreateVoucherReply): CreateVoucherReply.AsObject;
  static serializeBinaryToWriter(message: CreateVoucherReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateVoucherReply;
  static deserializeBinaryFromReader(message: CreateVoucherReply, reader: jspb.BinaryReader): CreateVoucherReply;
}

export namespace CreateVoucherReply {
  export type AsObject = {
    voucher?: Voucher.AsObject,
  }
}

export class SubmitVoucherRequest extends jspb.Message {
  getId(): number;
  setId(value: number): SubmitVoucherRequest;

  getPayerProvider(): number;
  setPayerProvider(value: number): SubmitVoucherRequest;

  getPayerAccount(): string;
  setPayerAccount(value: string): SubmitVoucherRequest;

  getPayerName(): string;
  setPayerName(value: string): SubmitVoucherRequest;

  getPayeeProvider(): number;
  setPayeeProvider(value: number): SubmitVoucherRequest;

  getPayeeAccount(): string;
  setPayeeAccount(value: string): SubmitVoucherRequest;

  getPayeeName(): string;
  setPayeeName(value: string): SubmitVoucherRequest;

  getTxId(): string;
  setTxId(value: string): SubmitVoucherRequest;

  getHandlerNote(): string;
  setHandlerNote(value: string): SubmitVoucherRequest;

  getImageUrl(): string;
  setImageUrl(value: string): SubmitVoucherRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubmitVoucherRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SubmitVoucherRequest): SubmitVoucherRequest.AsObject;
  static serializeBinaryToWriter(message: SubmitVoucherRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubmitVoucherRequest;
  static deserializeBinaryFromReader(message: SubmitVoucherRequest, reader: jspb.BinaryReader): SubmitVoucherRequest;
}

export namespace SubmitVoucherRequest {
  export type AsObject = {
    id: number,
    payerProvider: number,
    payerAccount: string,
    payerName: string,
    payeeProvider: number,
    payeeAccount: string,
    payeeName: string,
    txId: string,
    handlerNote: string,
    imageUrl: string,
  }
}

export class SubmitVoucherReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubmitVoucherReply.AsObject;
  static toObject(includeInstance: boolean, msg: SubmitVoucherReply): SubmitVoucherReply.AsObject;
  static serializeBinaryToWriter(message: SubmitVoucherReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubmitVoucherReply;
  static deserializeBinaryFromReader(message: SubmitVoucherReply, reader: jspb.BinaryReader): SubmitVoucherReply;
}

export namespace SubmitVoucherReply {
  export type AsObject = {
  }
}

export class CancelVoucherRequest extends jspb.Message {
  getId(): number;
  setId(value: number): CancelVoucherRequest;

  getNote(): string;
  setNote(value: string): CancelVoucherRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CancelVoucherRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CancelVoucherRequest): CancelVoucherRequest.AsObject;
  static serializeBinaryToWriter(message: CancelVoucherRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CancelVoucherRequest;
  static deserializeBinaryFromReader(message: CancelVoucherRequest, reader: jspb.BinaryReader): CancelVoucherRequest;
}

export namespace CancelVoucherRequest {
  export type AsObject = {
    id: number,
    note: string,
  }
}

export class CancelVoucherReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CancelVoucherReply.AsObject;
  static toObject(includeInstance: boolean, msg: CancelVoucherReply): CancelVoucherReply.AsObject;
  static serializeBinaryToWriter(message: CancelVoucherReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CancelVoucherReply;
  static deserializeBinaryFromReader(message: CancelVoucherReply, reader: jspb.BinaryReader): CancelVoucherReply;
}

export namespace CancelVoucherReply {
  export type AsObject = {
  }
}

export class ListVouchersRequest extends jspb.Message {
  getMerchantId(): number;
  setMerchantId(value: number): ListVouchersRequest;

  getTypesList(): Array<number>;
  setTypesList(value: Array<number>): ListVouchersRequest;
  clearTypesList(): ListVouchersRequest;
  addTypes(value: number, index?: number): ListVouchersRequest;

  getId(): number;
  setId(value: number): ListVouchersRequest;

  getStatusesList(): Array<number>;
  setStatusesList(value: Array<number>): ListVouchersRequest;
  clearStatusesList(): ListVouchersRequest;
  addStatuses(value: number, index?: number): ListVouchersRequest;

  getPage(): number;
  setPage(value: number): ListVouchersRequest;

  getSize(): number;
  setSize(value: number): ListVouchersRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListVouchersRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListVouchersRequest): ListVouchersRequest.AsObject;
  static serializeBinaryToWriter(message: ListVouchersRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListVouchersRequest;
  static deserializeBinaryFromReader(message: ListVouchersRequest, reader: jspb.BinaryReader): ListVouchersRequest;
}

export namespace ListVouchersRequest {
  export type AsObject = {
    merchantId: number,
    typesList: Array<number>,
    id: number,
    statusesList: Array<number>,
    page: number,
    size: number,
  }
}

export class ListVouchersReply extends jspb.Message {
  getRecordsList(): Array<Voucher>;
  setRecordsList(value: Array<Voucher>): ListVouchersReply;
  clearRecordsList(): ListVouchersReply;
  addRecords(value?: Voucher, index?: number): Voucher;

  getTotal(): number;
  setTotal(value: number): ListVouchersReply;

  getCurrentPage(): number;
  setCurrentPage(value: number): ListVouchersReply;

  getCurrentSize(): number;
  setCurrentSize(value: number): ListVouchersReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListVouchersReply.AsObject;
  static toObject(includeInstance: boolean, msg: ListVouchersReply): ListVouchersReply.AsObject;
  static serializeBinaryToWriter(message: ListVouchersReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListVouchersReply;
  static deserializeBinaryFromReader(message: ListVouchersReply, reader: jspb.BinaryReader): ListVouchersReply;
}

export namespace ListVouchersReply {
  export type AsObject = {
    recordsList: Array<Voucher.AsObject>,
    total: number,
    currentPage: number,
    currentSize: number,
  }
}

export class GetVoucherRequest extends jspb.Message {
  getId(): number;
  setId(value: number): GetVoucherRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetVoucherRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetVoucherRequest): GetVoucherRequest.AsObject;
  static serializeBinaryToWriter(message: GetVoucherRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetVoucherRequest;
  static deserializeBinaryFromReader(message: GetVoucherRequest, reader: jspb.BinaryReader): GetVoucherRequest;
}

export namespace GetVoucherRequest {
  export type AsObject = {
    id: number,
  }
}

export class GetVoucherReply extends jspb.Message {
  getVoucher(): Voucher | undefined;
  setVoucher(value?: Voucher): GetVoucherReply;
  hasVoucher(): boolean;
  clearVoucher(): GetVoucherReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetVoucherReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetVoucherReply): GetVoucherReply.AsObject;
  static serializeBinaryToWriter(message: GetVoucherReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetVoucherReply;
  static deserializeBinaryFromReader(message: GetVoucherReply, reader: jspb.BinaryReader): GetVoucherReply;
}

export namespace GetVoucherReply {
  export type AsObject = {
    voucher?: Voucher.AsObject,
  }
}

export class ListPaymentsRequest extends jspb.Message {
  getMerchantId(): number;
  setMerchantId(value: number): ListPaymentsRequest;

  getTypesList(): Array<number>;
  setTypesList(value: Array<number>): ListPaymentsRequest;
  clearTypesList(): ListPaymentsRequest;
  addTypes(value: number, index?: number): ListPaymentsRequest;

  getId(): number;
  setId(value: number): ListPaymentsRequest;

  getFromDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setFromDate(value?: google_protobuf_timestamp_pb.Timestamp): ListPaymentsRequest;
  hasFromDate(): boolean;
  clearFromDate(): ListPaymentsRequest;

  getPage(): number;
  setPage(value: number): ListPaymentsRequest;

  getSize(): number;
  setSize(value: number): ListPaymentsRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListPaymentsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListPaymentsRequest): ListPaymentsRequest.AsObject;
  static serializeBinaryToWriter(message: ListPaymentsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListPaymentsRequest;
  static deserializeBinaryFromReader(message: ListPaymentsRequest, reader: jspb.BinaryReader): ListPaymentsRequest;
}

export namespace ListPaymentsRequest {
  export type AsObject = {
    merchantId: number,
    typesList: Array<number>,
    id: number,
    fromDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    page: number,
    size: number,
  }
}

export class ListPaymentsReply extends jspb.Message {
  getRecordsList(): Array<Payment>;
  setRecordsList(value: Array<Payment>): ListPaymentsReply;
  clearRecordsList(): ListPaymentsReply;
  addRecords(value?: Payment, index?: number): Payment;

  getTotal(): number;
  setTotal(value: number): ListPaymentsReply;

  getCurrentPage(): number;
  setCurrentPage(value: number): ListPaymentsReply;

  getCurrentSize(): number;
  setCurrentSize(value: number): ListPaymentsReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListPaymentsReply.AsObject;
  static toObject(includeInstance: boolean, msg: ListPaymentsReply): ListPaymentsReply.AsObject;
  static serializeBinaryToWriter(message: ListPaymentsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListPaymentsReply;
  static deserializeBinaryFromReader(message: ListPaymentsReply, reader: jspb.BinaryReader): ListPaymentsReply;
}

export namespace ListPaymentsReply {
  export type AsObject = {
    recordsList: Array<Payment.AsObject>,
    total: number,
    currentPage: number,
    currentSize: number,
  }
}

export class Payment extends jspb.Message {
  getId(): number;
  setId(value: number): Payment;

  getMerchantId(): number;
  setMerchantId(value: number): Payment;

  getPaymentType(): PaymentType;
  setPaymentType(value: PaymentType): Payment;

  getAmount(): number;
  setAmount(value: number): Payment;

  getCreatedBy(): string;
  setCreatedBy(value: string): Payment;

  getUpdatedBy(): string;
  setUpdatedBy(value: string): Payment;

  getCreatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setCreatedAt(value?: google_protobuf_timestamp_pb.Timestamp): Payment;
  hasCreatedAt(): boolean;
  clearCreatedAt(): Payment;

  getUpdatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setUpdatedAt(value?: google_protobuf_timestamp_pb.Timestamp): Payment;
  hasUpdatedAt(): boolean;
  clearUpdatedAt(): Payment;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Payment.AsObject;
  static toObject(includeInstance: boolean, msg: Payment): Payment.AsObject;
  static serializeBinaryToWriter(message: Payment, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Payment;
  static deserializeBinaryFromReader(message: Payment, reader: jspb.BinaryReader): Payment;
}

export namespace Payment {
  export type AsObject = {
    id: number,
    merchantId: number,
    paymentType: PaymentType,
    amount: number,
    createdBy: string,
    updatedBy: string,
    createdAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    updatedAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
  }
}

export class VoucherSummary extends jspb.Message {
  getTotal(): number;
  setTotal(value: number): VoucherSummary;

  getTotalIn30days(): number;
  setTotalIn30days(value: number): VoucherSummary;

  getPercent(): number;
  setPercent(value: number): VoucherSummary;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VoucherSummary.AsObject;
  static toObject(includeInstance: boolean, msg: VoucherSummary): VoucherSummary.AsObject;
  static serializeBinaryToWriter(message: VoucherSummary, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VoucherSummary;
  static deserializeBinaryFromReader(message: VoucherSummary, reader: jspb.BinaryReader): VoucherSummary;
}

export namespace VoucherSummary {
  export type AsObject = {
    total: number,
    totalIn30days: number,
    percent: number,
  }
}

export class Voucher extends jspb.Message {
  getId(): number;
  setId(value: number): Voucher;

  getMerchantId(): number;
  setMerchantId(value: number): Voucher;

  getPaymentId(): number;
  setPaymentId(value: number): Voucher;

  getAmount(): number;
  setAmount(value: number): Voucher;

  getType(): PaymentType;
  setType(value: PaymentType): Voucher;

  getStatus(): VoucherStatus;
  setStatus(value: VoucherStatus): Voucher;

  getImageUrl(): string;
  setImageUrl(value: string): Voucher;

  getNote(): string;
  setNote(value: string): Voucher;

  getPayeeProvider(): number;
  setPayeeProvider(value: number): Voucher;

  getPayeeAccount(): string;
  setPayeeAccount(value: string): Voucher;

  getPayeeName(): string;
  setPayeeName(value: string): Voucher;

  getPayerProvider(): number;
  setPayerProvider(value: number): Voucher;

  getPayerAccount(): string;
  setPayerAccount(value: string): Voucher;

  getPayerName(): string;
  setPayerName(value: string): Voucher;

  getTxId(): string;
  setTxId(value: string): Voucher;

  getHandledBy(): string;
  setHandledBy(value: string): Voucher;

  getHandlerNote(): string;
  setHandlerNote(value: string): Voucher;

  getCreatedBy(): string;
  setCreatedBy(value: string): Voucher;

  getUpdatedBy(): string;
  setUpdatedBy(value: string): Voucher;

  getCreatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setCreatedAt(value?: google_protobuf_timestamp_pb.Timestamp): Voucher;
  hasCreatedAt(): boolean;
  clearCreatedAt(): Voucher;

  getUpdatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setUpdatedAt(value?: google_protobuf_timestamp_pb.Timestamp): Voucher;
  hasUpdatedAt(): boolean;
  clearUpdatedAt(): Voucher;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Voucher.AsObject;
  static toObject(includeInstance: boolean, msg: Voucher): Voucher.AsObject;
  static serializeBinaryToWriter(message: Voucher, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Voucher;
  static deserializeBinaryFromReader(message: Voucher, reader: jspb.BinaryReader): Voucher;
}

export namespace Voucher {
  export type AsObject = {
    id: number,
    merchantId: number,
    paymentId: number,
    amount: number,
    type: PaymentType,
    status: VoucherStatus,
    imageUrl: string,
    note: string,
    payeeProvider: number,
    payeeAccount: string,
    payeeName: string,
    payerProvider: number,
    payerAccount: string,
    payerName: string,
    txId: string,
    handledBy: string,
    handlerNote: string,
    createdBy: string,
    updatedBy: string,
    createdAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    updatedAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
  }
}

export enum PaymentType { 
  DEPOSIT_UNSPECIFIED = 0,
  USER_TOP_UP = 1,
  USER_WITHDRAW = 2,
  MERCHANT_DEPOSIT_ADDITIONAL = 3,
  MERCHANT_DEPOSIT_COMPENSATION = 4,
  MERCHANT_WITHDRAW_PROFIT = 5,
  MERCHANT_WITHDRAW_FUNDS = 6,
}
export enum VoucherStatus { 
  STATUS_UNSPECIFIED = 0,
  PROCESSING = 1,
  COMPLETED = 2,
  CANCELED = 3,
}
export enum BankType { 
  BANK_UNSPECIFIED = 0,
  V = 1,
  S = 2,
  A = 3,
  N = 4,
  B = 5,
}
