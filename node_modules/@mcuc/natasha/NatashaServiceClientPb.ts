/**
 * @fileoverview gRPC-Web generated client stub for natasha
 * @enhanceable
 * @public
 */

// GENERATED CODE -- DO NOT EDIT!


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as natasha_api_natasha_pb from './natasha_pb';


export class NatashaClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname;
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodInfoCreateMerchant = new grpcWeb.AbstractClientBase.MethodInfo(
    natasha_api_natasha_pb.CreateMerchantReply,
    (request: natasha_api_natasha_pb.CreateMerchantRequest) => {
      return request.serializeBinary();
    },
    natasha_api_natasha_pb.CreateMerchantReply.deserializeBinary
  );

  createMerchant(
    request: natasha_api_natasha_pb.CreateMerchantRequest,
    metadata: grpcWeb.Metadata | null): Promise<natasha_api_natasha_pb.CreateMerchantReply>;

  createMerchant(
    request: natasha_api_natasha_pb.CreateMerchantRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.CreateMerchantReply) => void): grpcWeb.ClientReadableStream<natasha_api_natasha_pb.CreateMerchantReply>;

  createMerchant(
    request: natasha_api_natasha_pb.CreateMerchantRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.CreateMerchantReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/natasha.Natasha/CreateMerchant',
        request,
        metadata || {},
        this.methodInfoCreateMerchant,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/natasha.Natasha/CreateMerchant',
    request,
    metadata || {},
    this.methodInfoCreateMerchant);
  }

  methodInfoUpdateMerchant = new grpcWeb.AbstractClientBase.MethodInfo(
    natasha_api_natasha_pb.UpdateMerchantReply,
    (request: natasha_api_natasha_pb.UpdateMerchantRequest) => {
      return request.serializeBinary();
    },
    natasha_api_natasha_pb.UpdateMerchantReply.deserializeBinary
  );

  updateMerchant(
    request: natasha_api_natasha_pb.UpdateMerchantRequest,
    metadata: grpcWeb.Metadata | null): Promise<natasha_api_natasha_pb.UpdateMerchantReply>;

  updateMerchant(
    request: natasha_api_natasha_pb.UpdateMerchantRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.UpdateMerchantReply) => void): grpcWeb.ClientReadableStream<natasha_api_natasha_pb.UpdateMerchantReply>;

  updateMerchant(
    request: natasha_api_natasha_pb.UpdateMerchantRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.UpdateMerchantReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/natasha.Natasha/UpdateMerchant',
        request,
        metadata || {},
        this.methodInfoUpdateMerchant,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/natasha.Natasha/UpdateMerchant',
    request,
    metadata || {},
    this.methodInfoUpdateMerchant);
  }

  methodInfoListMerchants = new grpcWeb.AbstractClientBase.MethodInfo(
    natasha_api_natasha_pb.ListMerchantsReply,
    (request: natasha_api_natasha_pb.ListMerchantsRequest) => {
      return request.serializeBinary();
    },
    natasha_api_natasha_pb.ListMerchantsReply.deserializeBinary
  );

  listMerchants(
    request: natasha_api_natasha_pb.ListMerchantsRequest,
    metadata: grpcWeb.Metadata | null): Promise<natasha_api_natasha_pb.ListMerchantsReply>;

  listMerchants(
    request: natasha_api_natasha_pb.ListMerchantsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.ListMerchantsReply) => void): grpcWeb.ClientReadableStream<natasha_api_natasha_pb.ListMerchantsReply>;

  listMerchants(
    request: natasha_api_natasha_pb.ListMerchantsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.ListMerchantsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/natasha.Natasha/ListMerchants',
        request,
        metadata || {},
        this.methodInfoListMerchants,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/natasha.Natasha/ListMerchants',
    request,
    metadata || {},
    this.methodInfoListMerchants);
  }

  methodInfoGetMerchant = new grpcWeb.AbstractClientBase.MethodInfo(
    natasha_api_natasha_pb.GetMerchantReply,
    (request: natasha_api_natasha_pb.GetMerchantRequest) => {
      return request.serializeBinary();
    },
    natasha_api_natasha_pb.GetMerchantReply.deserializeBinary
  );

  getMerchant(
    request: natasha_api_natasha_pb.GetMerchantRequest,
    metadata: grpcWeb.Metadata | null): Promise<natasha_api_natasha_pb.GetMerchantReply>;

  getMerchant(
    request: natasha_api_natasha_pb.GetMerchantRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.GetMerchantReply) => void): grpcWeb.ClientReadableStream<natasha_api_natasha_pb.GetMerchantReply>;

  getMerchant(
    request: natasha_api_natasha_pb.GetMerchantRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.GetMerchantReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/natasha.Natasha/GetMerchant',
        request,
        metadata || {},
        this.methodInfoGetMerchant,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/natasha.Natasha/GetMerchant',
    request,
    metadata || {},
    this.methodInfoGetMerchant);
  }

}

export class BlackWidowClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname;
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodInfoMakePayment = new grpcWeb.AbstractClientBase.MethodInfo(
    natasha_api_natasha_pb.MakePaymentReply,
    (request: natasha_api_natasha_pb.MakePaymentRequest) => {
      return request.serializeBinary();
    },
    natasha_api_natasha_pb.MakePaymentReply.deserializeBinary
  );

  makePayment(
    request: natasha_api_natasha_pb.MakePaymentRequest,
    metadata: grpcWeb.Metadata | null): Promise<natasha_api_natasha_pb.MakePaymentReply>;

  makePayment(
    request: natasha_api_natasha_pb.MakePaymentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.MakePaymentReply) => void): grpcWeb.ClientReadableStream<natasha_api_natasha_pb.MakePaymentReply>;

  makePayment(
    request: natasha_api_natasha_pb.MakePaymentRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.MakePaymentReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/natasha.BlackWidow/MakePayment',
        request,
        metadata || {},
        this.methodInfoMakePayment,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/natasha.BlackWidow/MakePayment',
    request,
    metadata || {},
    this.methodInfoMakePayment);
  }

  methodInfoGetMerchantBalance = new grpcWeb.AbstractClientBase.MethodInfo(
    natasha_api_natasha_pb.GetMerchantBalanceReply,
    (request: natasha_api_natasha_pb.GetMerchantBalanceRequest) => {
      return request.serializeBinary();
    },
    natasha_api_natasha_pb.GetMerchantBalanceReply.deserializeBinary
  );

  getMerchantBalance(
    request: natasha_api_natasha_pb.GetMerchantBalanceRequest,
    metadata: grpcWeb.Metadata | null): Promise<natasha_api_natasha_pb.GetMerchantBalanceReply>;

  getMerchantBalance(
    request: natasha_api_natasha_pb.GetMerchantBalanceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.GetMerchantBalanceReply) => void): grpcWeb.ClientReadableStream<natasha_api_natasha_pb.GetMerchantBalanceReply>;

  getMerchantBalance(
    request: natasha_api_natasha_pb.GetMerchantBalanceRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.GetMerchantBalanceReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/natasha.BlackWidow/GetMerchantBalance',
        request,
        metadata || {},
        this.methodInfoGetMerchantBalance,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/natasha.BlackWidow/GetMerchantBalance',
    request,
    metadata || {},
    this.methodInfoGetMerchantBalance);
  }

  methodInfoListPayments = new grpcWeb.AbstractClientBase.MethodInfo(
    natasha_api_natasha_pb.ListPaymentsReply,
    (request: natasha_api_natasha_pb.ListPaymentsRequest) => {
      return request.serializeBinary();
    },
    natasha_api_natasha_pb.ListPaymentsReply.deserializeBinary
  );

  listPayments(
    request: natasha_api_natasha_pb.ListPaymentsRequest,
    metadata: grpcWeb.Metadata | null): Promise<natasha_api_natasha_pb.ListPaymentsReply>;

  listPayments(
    request: natasha_api_natasha_pb.ListPaymentsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.ListPaymentsReply) => void): grpcWeb.ClientReadableStream<natasha_api_natasha_pb.ListPaymentsReply>;

  listPayments(
    request: natasha_api_natasha_pb.ListPaymentsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.ListPaymentsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/natasha.BlackWidow/ListPayments',
        request,
        metadata || {},
        this.methodInfoListPayments,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/natasha.BlackWidow/ListPayments',
    request,
    metadata || {},
    this.methodInfoListPayments);
  }

  methodInfoNotifyRejectPayment = new grpcWeb.AbstractClientBase.MethodInfo(
    natasha_api_natasha_pb.NotifyRejectPaymentReply,
    (request: natasha_api_natasha_pb.NotifyRejectPaymentRequest) => {
      return request.serializeBinary();
    },
    natasha_api_natasha_pb.NotifyRejectPaymentReply.deserializeBinary
  );

  notifyRejectPayment(
    request: natasha_api_natasha_pb.NotifyRejectPaymentRequest,
    metadata: grpcWeb.Metadata | null): Promise<natasha_api_natasha_pb.NotifyRejectPaymentReply>;

  notifyRejectPayment(
    request: natasha_api_natasha_pb.NotifyRejectPaymentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.NotifyRejectPaymentReply) => void): grpcWeb.ClientReadableStream<natasha_api_natasha_pb.NotifyRejectPaymentReply>;

  notifyRejectPayment(
    request: natasha_api_natasha_pb.NotifyRejectPaymentRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.NotifyRejectPaymentReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/natasha.BlackWidow/NotifyRejectPayment',
        request,
        metadata || {},
        this.methodInfoNotifyRejectPayment,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/natasha.BlackWidow/NotifyRejectPayment',
    request,
    metadata || {},
    this.methodInfoNotifyRejectPayment);
  }

}

export class RomanoffClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname;
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodInfoListVouchers = new grpcWeb.AbstractClientBase.MethodInfo(
    natasha_api_natasha_pb.ListVouchersReply,
    (request: natasha_api_natasha_pb.ListVouchersRequest) => {
      return request.serializeBinary();
    },
    natasha_api_natasha_pb.ListVouchersReply.deserializeBinary
  );

  listVouchers(
    request: natasha_api_natasha_pb.ListVouchersRequest,
    metadata: grpcWeb.Metadata | null): Promise<natasha_api_natasha_pb.ListVouchersReply>;

  listVouchers(
    request: natasha_api_natasha_pb.ListVouchersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.ListVouchersReply) => void): grpcWeb.ClientReadableStream<natasha_api_natasha_pb.ListVouchersReply>;

  listVouchers(
    request: natasha_api_natasha_pb.ListVouchersRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.ListVouchersReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/natasha.Romanoff/ListVouchers',
        request,
        metadata || {},
        this.methodInfoListVouchers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/natasha.Romanoff/ListVouchers',
    request,
    metadata || {},
    this.methodInfoListVouchers);
  }

  methodInfoGetVoucher = new grpcWeb.AbstractClientBase.MethodInfo(
    natasha_api_natasha_pb.GetVoucherReply,
    (request: natasha_api_natasha_pb.GetVoucherRequest) => {
      return request.serializeBinary();
    },
    natasha_api_natasha_pb.GetVoucherReply.deserializeBinary
  );

  getVoucher(
    request: natasha_api_natasha_pb.GetVoucherRequest,
    metadata: grpcWeb.Metadata | null): Promise<natasha_api_natasha_pb.GetVoucherReply>;

  getVoucher(
    request: natasha_api_natasha_pb.GetVoucherRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.GetVoucherReply) => void): grpcWeb.ClientReadableStream<natasha_api_natasha_pb.GetVoucherReply>;

  getVoucher(
    request: natasha_api_natasha_pb.GetVoucherRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.GetVoucherReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/natasha.Romanoff/GetVoucher',
        request,
        metadata || {},
        this.methodInfoGetVoucher,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/natasha.Romanoff/GetVoucher',
    request,
    metadata || {},
    this.methodInfoGetVoucher);
  }

  methodInfoCreateVoucher = new grpcWeb.AbstractClientBase.MethodInfo(
    natasha_api_natasha_pb.CreateVoucherReply,
    (request: natasha_api_natasha_pb.CreateVoucherRequest) => {
      return request.serializeBinary();
    },
    natasha_api_natasha_pb.CreateVoucherReply.deserializeBinary
  );

  createVoucher(
    request: natasha_api_natasha_pb.CreateVoucherRequest,
    metadata: grpcWeb.Metadata | null): Promise<natasha_api_natasha_pb.CreateVoucherReply>;

  createVoucher(
    request: natasha_api_natasha_pb.CreateVoucherRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.CreateVoucherReply) => void): grpcWeb.ClientReadableStream<natasha_api_natasha_pb.CreateVoucherReply>;

  createVoucher(
    request: natasha_api_natasha_pb.CreateVoucherRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.CreateVoucherReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/natasha.Romanoff/CreateVoucher',
        request,
        metadata || {},
        this.methodInfoCreateVoucher,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/natasha.Romanoff/CreateVoucher',
    request,
    metadata || {},
    this.methodInfoCreateVoucher);
  }

  methodInfoSubmitVoucher = new grpcWeb.AbstractClientBase.MethodInfo(
    natasha_api_natasha_pb.SubmitVoucherReply,
    (request: natasha_api_natasha_pb.SubmitVoucherRequest) => {
      return request.serializeBinary();
    },
    natasha_api_natasha_pb.SubmitVoucherReply.deserializeBinary
  );

  submitVoucher(
    request: natasha_api_natasha_pb.SubmitVoucherRequest,
    metadata: grpcWeb.Metadata | null): Promise<natasha_api_natasha_pb.SubmitVoucherReply>;

  submitVoucher(
    request: natasha_api_natasha_pb.SubmitVoucherRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.SubmitVoucherReply) => void): grpcWeb.ClientReadableStream<natasha_api_natasha_pb.SubmitVoucherReply>;

  submitVoucher(
    request: natasha_api_natasha_pb.SubmitVoucherRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.SubmitVoucherReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/natasha.Romanoff/SubmitVoucher',
        request,
        metadata || {},
        this.methodInfoSubmitVoucher,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/natasha.Romanoff/SubmitVoucher',
    request,
    metadata || {},
    this.methodInfoSubmitVoucher);
  }

  methodInfoCancelVoucher = new grpcWeb.AbstractClientBase.MethodInfo(
    natasha_api_natasha_pb.CancelVoucherReply,
    (request: natasha_api_natasha_pb.CancelVoucherRequest) => {
      return request.serializeBinary();
    },
    natasha_api_natasha_pb.CancelVoucherReply.deserializeBinary
  );

  cancelVoucher(
    request: natasha_api_natasha_pb.CancelVoucherRequest,
    metadata: grpcWeb.Metadata | null): Promise<natasha_api_natasha_pb.CancelVoucherReply>;

  cancelVoucher(
    request: natasha_api_natasha_pb.CancelVoucherRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.CancelVoucherReply) => void): grpcWeb.ClientReadableStream<natasha_api_natasha_pb.CancelVoucherReply>;

  cancelVoucher(
    request: natasha_api_natasha_pb.CancelVoucherRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: natasha_api_natasha_pb.CancelVoucherReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/natasha.Romanoff/CancelVoucher',
        request,
        metadata || {},
        this.methodInfoCancelVoucher,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/natasha.Romanoff/CancelVoucher',
    request,
    metadata || {},
    this.methodInfoCancelVoucher);
  }

}

