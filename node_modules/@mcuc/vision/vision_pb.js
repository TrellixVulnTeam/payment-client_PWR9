// source: vision/vision.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var validate_validate_pb = require('@greyhole/validate/validate_pb.js');
goog.object.extend(proto, validate_validate_pb);
var stark_api_stark_pb = require('@mcuc/stark/stark_pb.js');
goog.object.extend(proto, stark_api_stark_pb);
goog.exportSymbol('proto.alopay.vision.AllocationDetail', null, global);
goog.exportSymbol('proto.alopay.vision.GetAllocationTopUpRateReply', null, global);
goog.exportSymbol('proto.alopay.vision.GetAllocationWithdrawRateReply', null, global);
goog.exportSymbol('proto.alopay.vision.GetIncomeStatementReply', null, global);
goog.exportSymbol('proto.alopay.vision.GetPaymentTodayReply', null, global);
goog.exportSymbol('proto.alopay.vision.GetProfitRateReply', null, global);
goog.exportSymbol('proto.alopay.vision.GetReportRequest', null, global);
goog.exportSymbol('proto.alopay.vision.GetTopPaymentMethodReply', null, global);
goog.exportSymbol('proto.alopay.vision.GetTopTellerReply', null, global);
goog.exportSymbol('proto.alopay.vision.Income', null, global);
goog.exportSymbol('proto.alopay.vision.PaymentMethodRevenue', null, global);
goog.exportSymbol('proto.alopay.vision.TellerRevenue', null, global);
goog.exportSymbol('proto.alopay.vision.TopUpCompletion', null, global);
goog.exportSymbol('proto.alopay.vision.WithdrawCompletion', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alopay.vision.GetReportRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alopay.vision.GetReportRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alopay.vision.GetReportRequest.displayName = 'proto.alopay.vision.GetReportRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alopay.vision.Income = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alopay.vision.Income, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alopay.vision.Income.displayName = 'proto.alopay.vision.Income';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alopay.vision.TopUpCompletion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alopay.vision.TopUpCompletion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alopay.vision.TopUpCompletion.displayName = 'proto.alopay.vision.TopUpCompletion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alopay.vision.WithdrawCompletion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alopay.vision.WithdrawCompletion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alopay.vision.WithdrawCompletion.displayName = 'proto.alopay.vision.WithdrawCompletion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alopay.vision.AllocationDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alopay.vision.AllocationDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alopay.vision.AllocationDetail.displayName = 'proto.alopay.vision.AllocationDetail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alopay.vision.PaymentMethodRevenue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alopay.vision.PaymentMethodRevenue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alopay.vision.PaymentMethodRevenue.displayName = 'proto.alopay.vision.PaymentMethodRevenue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alopay.vision.TellerRevenue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alopay.vision.TellerRevenue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alopay.vision.TellerRevenue.displayName = 'proto.alopay.vision.TellerRevenue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alopay.vision.GetIncomeStatementReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.alopay.vision.GetIncomeStatementReply.repeatedFields_, null);
};
goog.inherits(proto.alopay.vision.GetIncomeStatementReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alopay.vision.GetIncomeStatementReply.displayName = 'proto.alopay.vision.GetIncomeStatementReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alopay.vision.GetPaymentTodayReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alopay.vision.GetPaymentTodayReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alopay.vision.GetPaymentTodayReply.displayName = 'proto.alopay.vision.GetPaymentTodayReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alopay.vision.GetProfitRateReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.alopay.vision.GetProfitRateReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alopay.vision.GetProfitRateReply.displayName = 'proto.alopay.vision.GetProfitRateReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alopay.vision.GetAllocationTopUpRateReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.alopay.vision.GetAllocationTopUpRateReply.repeatedFields_, null);
};
goog.inherits(proto.alopay.vision.GetAllocationTopUpRateReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alopay.vision.GetAllocationTopUpRateReply.displayName = 'proto.alopay.vision.GetAllocationTopUpRateReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alopay.vision.GetAllocationWithdrawRateReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.alopay.vision.GetAllocationWithdrawRateReply.repeatedFields_, null);
};
goog.inherits(proto.alopay.vision.GetAllocationWithdrawRateReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alopay.vision.GetAllocationWithdrawRateReply.displayName = 'proto.alopay.vision.GetAllocationWithdrawRateReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alopay.vision.GetTopPaymentMethodReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.alopay.vision.GetTopPaymentMethodReply.repeatedFields_, null);
};
goog.inherits(proto.alopay.vision.GetTopPaymentMethodReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alopay.vision.GetTopPaymentMethodReply.displayName = 'proto.alopay.vision.GetTopPaymentMethodReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.alopay.vision.GetTopTellerReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.alopay.vision.GetTopTellerReply.repeatedFields_, null);
};
goog.inherits(proto.alopay.vision.GetTopTellerReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.alopay.vision.GetTopTellerReply.displayName = 'proto.alopay.vision.GetTopTellerReply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alopay.vision.GetReportRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.alopay.vision.GetReportRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alopay.vision.GetReportRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.GetReportRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromDate: (f = msg.getFromDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    toDate: (f = msg.getToDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    merchantId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alopay.vision.GetReportRequest}
 */
proto.alopay.vision.GetReportRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alopay.vision.GetReportRequest;
  return proto.alopay.vision.GetReportRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alopay.vision.GetReportRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alopay.vision.GetReportRequest}
 */
proto.alopay.vision.GetReportRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFromDate(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setToDate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMerchantId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alopay.vision.GetReportRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alopay.vision.GetReportRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alopay.vision.GetReportRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.GetReportRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromDate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getToDate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMerchantId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp from_date = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.alopay.vision.GetReportRequest.prototype.getFromDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.alopay.vision.GetReportRequest} returns this
*/
proto.alopay.vision.GetReportRequest.prototype.setFromDate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.alopay.vision.GetReportRequest} returns this
 */
proto.alopay.vision.GetReportRequest.prototype.clearFromDate = function() {
  return this.setFromDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.alopay.vision.GetReportRequest.prototype.hasFromDate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp to_date = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.alopay.vision.GetReportRequest.prototype.getToDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.alopay.vision.GetReportRequest} returns this
*/
proto.alopay.vision.GetReportRequest.prototype.setToDate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.alopay.vision.GetReportRequest} returns this
 */
proto.alopay.vision.GetReportRequest.prototype.clearToDate = function() {
  return this.setToDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.alopay.vision.GetReportRequest.prototype.hasToDate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 merchant_id = 3;
 * @return {number}
 */
proto.alopay.vision.GetReportRequest.prototype.getMerchantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.alopay.vision.GetReportRequest} returns this
 */
proto.alopay.vision.GetReportRequest.prototype.setMerchantId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alopay.vision.Income.prototype.toObject = function(opt_includeInstance) {
  return proto.alopay.vision.Income.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alopay.vision.Income} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.Income.toObject = function(includeInstance, msg) {
  var f, obj = {
    date: (f = msg.getDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alopay.vision.Income}
 */
proto.alopay.vision.Income.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alopay.vision.Income;
  return proto.alopay.vision.Income.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alopay.vision.Income} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alopay.vision.Income}
 */
proto.alopay.vision.Income.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alopay.vision.Income.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alopay.vision.Income.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alopay.vision.Income} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.Income.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp date = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.alopay.vision.Income.prototype.getDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.alopay.vision.Income} returns this
*/
proto.alopay.vision.Income.prototype.setDate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.alopay.vision.Income} returns this
 */
proto.alopay.vision.Income.prototype.clearDate = function() {
  return this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.alopay.vision.Income.prototype.hasDate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 amount = 2;
 * @return {number}
 */
proto.alopay.vision.Income.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.alopay.vision.Income} returns this
 */
proto.alopay.vision.Income.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alopay.vision.TopUpCompletion.prototype.toObject = function(opt_includeInstance) {
  return proto.alopay.vision.TopUpCompletion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alopay.vision.TopUpCompletion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.TopUpCompletion.toObject = function(includeInstance, msg) {
  var f, obj = {
    completed: jspb.Message.getFieldWithDefault(msg, 1, 0),
    total: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alopay.vision.TopUpCompletion}
 */
proto.alopay.vision.TopUpCompletion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alopay.vision.TopUpCompletion;
  return proto.alopay.vision.TopUpCompletion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alopay.vision.TopUpCompletion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alopay.vision.TopUpCompletion}
 */
proto.alopay.vision.TopUpCompletion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCompleted(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alopay.vision.TopUpCompletion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alopay.vision.TopUpCompletion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alopay.vision.TopUpCompletion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.TopUpCompletion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompleted();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 completed = 1;
 * @return {number}
 */
proto.alopay.vision.TopUpCompletion.prototype.getCompleted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.alopay.vision.TopUpCompletion} returns this
 */
proto.alopay.vision.TopUpCompletion.prototype.setCompleted = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 total = 2;
 * @return {number}
 */
proto.alopay.vision.TopUpCompletion.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.alopay.vision.TopUpCompletion} returns this
 */
proto.alopay.vision.TopUpCompletion.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alopay.vision.WithdrawCompletion.prototype.toObject = function(opt_includeInstance) {
  return proto.alopay.vision.WithdrawCompletion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alopay.vision.WithdrawCompletion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.WithdrawCompletion.toObject = function(includeInstance, msg) {
  var f, obj = {
    completed: jspb.Message.getFieldWithDefault(msg, 1, 0),
    total: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alopay.vision.WithdrawCompletion}
 */
proto.alopay.vision.WithdrawCompletion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alopay.vision.WithdrawCompletion;
  return proto.alopay.vision.WithdrawCompletion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alopay.vision.WithdrawCompletion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alopay.vision.WithdrawCompletion}
 */
proto.alopay.vision.WithdrawCompletion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCompleted(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alopay.vision.WithdrawCompletion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alopay.vision.WithdrawCompletion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alopay.vision.WithdrawCompletion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.WithdrawCompletion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompleted();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 completed = 1;
 * @return {number}
 */
proto.alopay.vision.WithdrawCompletion.prototype.getCompleted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.alopay.vision.WithdrawCompletion} returns this
 */
proto.alopay.vision.WithdrawCompletion.prototype.setCompleted = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 total = 2;
 * @return {number}
 */
proto.alopay.vision.WithdrawCompletion.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.alopay.vision.WithdrawCompletion} returns this
 */
proto.alopay.vision.WithdrawCompletion.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alopay.vision.AllocationDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.alopay.vision.AllocationDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alopay.vision.AllocationDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.AllocationDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    percent: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alopay.vision.AllocationDetail}
 */
proto.alopay.vision.AllocationDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alopay.vision.AllocationDetail;
  return proto.alopay.vision.AllocationDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alopay.vision.AllocationDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alopay.vision.AllocationDetail}
 */
proto.alopay.vision.AllocationDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.stark.MethodType} */ (reader.readEnum());
      msg.setMethod(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPercent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alopay.vision.AllocationDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alopay.vision.AllocationDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alopay.vision.AllocationDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.AllocationDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPercent();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional stark.MethodType method = 1;
 * @return {!proto.stark.MethodType}
 */
proto.alopay.vision.AllocationDetail.prototype.getMethod = function() {
  return /** @type {!proto.stark.MethodType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.stark.MethodType} value
 * @return {!proto.alopay.vision.AllocationDetail} returns this
 */
proto.alopay.vision.AllocationDetail.prototype.setMethod = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 amount = 2;
 * @return {number}
 */
proto.alopay.vision.AllocationDetail.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.alopay.vision.AllocationDetail} returns this
 */
proto.alopay.vision.AllocationDetail.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double percent = 3;
 * @return {number}
 */
proto.alopay.vision.AllocationDetail.prototype.getPercent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.alopay.vision.AllocationDetail} returns this
 */
proto.alopay.vision.AllocationDetail.prototype.setPercent = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alopay.vision.PaymentMethodRevenue.prototype.toObject = function(opt_includeInstance) {
  return proto.alopay.vision.PaymentMethodRevenue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alopay.vision.PaymentMethodRevenue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.PaymentMethodRevenue.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alopay.vision.PaymentMethodRevenue}
 */
proto.alopay.vision.PaymentMethodRevenue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alopay.vision.PaymentMethodRevenue;
  return proto.alopay.vision.PaymentMethodRevenue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alopay.vision.PaymentMethodRevenue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alopay.vision.PaymentMethodRevenue}
 */
proto.alopay.vision.PaymentMethodRevenue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.stark.MethodType} */ (reader.readEnum());
      msg.setMethod(value);
      break;
    case 2:
      var value = /** @type {!proto.stark.PaymentType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alopay.vision.PaymentMethodRevenue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alopay.vision.PaymentMethodRevenue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alopay.vision.PaymentMethodRevenue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.PaymentMethodRevenue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional stark.MethodType method = 1;
 * @return {!proto.stark.MethodType}
 */
proto.alopay.vision.PaymentMethodRevenue.prototype.getMethod = function() {
  return /** @type {!proto.stark.MethodType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.stark.MethodType} value
 * @return {!proto.alopay.vision.PaymentMethodRevenue} returns this
 */
proto.alopay.vision.PaymentMethodRevenue.prototype.setMethod = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional stark.PaymentType type = 2;
 * @return {!proto.stark.PaymentType}
 */
proto.alopay.vision.PaymentMethodRevenue.prototype.getType = function() {
  return /** @type {!proto.stark.PaymentType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.stark.PaymentType} value
 * @return {!proto.alopay.vision.PaymentMethodRevenue} returns this
 */
proto.alopay.vision.PaymentMethodRevenue.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint64 amount = 3;
 * @return {number}
 */
proto.alopay.vision.PaymentMethodRevenue.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.alopay.vision.PaymentMethodRevenue} returns this
 */
proto.alopay.vision.PaymentMethodRevenue.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alopay.vision.TellerRevenue.prototype.toObject = function(opt_includeInstance) {
  return proto.alopay.vision.TellerRevenue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alopay.vision.TellerRevenue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.TellerRevenue.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alopay.vision.TellerRevenue}
 */
proto.alopay.vision.TellerRevenue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alopay.vision.TellerRevenue;
  return proto.alopay.vision.TellerRevenue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alopay.vision.TellerRevenue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alopay.vision.TellerRevenue}
 */
proto.alopay.vision.TellerRevenue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alopay.vision.TellerRevenue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alopay.vision.TellerRevenue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alopay.vision.TellerRevenue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.TellerRevenue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.alopay.vision.TellerRevenue.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.alopay.vision.TellerRevenue} returns this
 */
proto.alopay.vision.TellerRevenue.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 amount = 2;
 * @return {number}
 */
proto.alopay.vision.TellerRevenue.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.alopay.vision.TellerRevenue} returns this
 */
proto.alopay.vision.TellerRevenue.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.alopay.vision.GetIncomeStatementReply.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alopay.vision.GetIncomeStatementReply.prototype.toObject = function(opt_includeInstance) {
  return proto.alopay.vision.GetIncomeStatementReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alopay.vision.GetIncomeStatementReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.GetIncomeStatementReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    revenuesList: jspb.Message.toObjectList(msg.getRevenuesList(),
    proto.alopay.vision.Income.toObject, includeInstance),
    profitsList: jspb.Message.toObjectList(msg.getProfitsList(),
    proto.alopay.vision.Income.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alopay.vision.GetIncomeStatementReply}
 */
proto.alopay.vision.GetIncomeStatementReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alopay.vision.GetIncomeStatementReply;
  return proto.alopay.vision.GetIncomeStatementReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alopay.vision.GetIncomeStatementReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alopay.vision.GetIncomeStatementReply}
 */
proto.alopay.vision.GetIncomeStatementReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.alopay.vision.Income;
      reader.readMessage(value,proto.alopay.vision.Income.deserializeBinaryFromReader);
      msg.addRevenues(value);
      break;
    case 2:
      var value = new proto.alopay.vision.Income;
      reader.readMessage(value,proto.alopay.vision.Income.deserializeBinaryFromReader);
      msg.addProfits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alopay.vision.GetIncomeStatementReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alopay.vision.GetIncomeStatementReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alopay.vision.GetIncomeStatementReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.GetIncomeStatementReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRevenuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.alopay.vision.Income.serializeBinaryToWriter
    );
  }
  f = message.getProfitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.alopay.vision.Income.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Income revenues = 1;
 * @return {!Array<!proto.alopay.vision.Income>}
 */
proto.alopay.vision.GetIncomeStatementReply.prototype.getRevenuesList = function() {
  return /** @type{!Array<!proto.alopay.vision.Income>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.alopay.vision.Income, 1));
};


/**
 * @param {!Array<!proto.alopay.vision.Income>} value
 * @return {!proto.alopay.vision.GetIncomeStatementReply} returns this
*/
proto.alopay.vision.GetIncomeStatementReply.prototype.setRevenuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.alopay.vision.Income=} opt_value
 * @param {number=} opt_index
 * @return {!proto.alopay.vision.Income}
 */
proto.alopay.vision.GetIncomeStatementReply.prototype.addRevenues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.alopay.vision.Income, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.alopay.vision.GetIncomeStatementReply} returns this
 */
proto.alopay.vision.GetIncomeStatementReply.prototype.clearRevenuesList = function() {
  return this.setRevenuesList([]);
};


/**
 * repeated Income profits = 2;
 * @return {!Array<!proto.alopay.vision.Income>}
 */
proto.alopay.vision.GetIncomeStatementReply.prototype.getProfitsList = function() {
  return /** @type{!Array<!proto.alopay.vision.Income>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.alopay.vision.Income, 2));
};


/**
 * @param {!Array<!proto.alopay.vision.Income>} value
 * @return {!proto.alopay.vision.GetIncomeStatementReply} returns this
*/
proto.alopay.vision.GetIncomeStatementReply.prototype.setProfitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.alopay.vision.Income=} opt_value
 * @param {number=} opt_index
 * @return {!proto.alopay.vision.Income}
 */
proto.alopay.vision.GetIncomeStatementReply.prototype.addProfits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.alopay.vision.Income, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.alopay.vision.GetIncomeStatementReply} returns this
 */
proto.alopay.vision.GetIncomeStatementReply.prototype.clearProfitsList = function() {
  return this.setProfitsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alopay.vision.GetPaymentTodayReply.prototype.toObject = function(opt_includeInstance) {
  return proto.alopay.vision.GetPaymentTodayReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alopay.vision.GetPaymentTodayReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.GetPaymentTodayReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    topUpCompletion: (f = msg.getTopUpCompletion()) && proto.alopay.vision.TopUpCompletion.toObject(includeInstance, f),
    withdrawCompletion: (f = msg.getWithdrawCompletion()) && proto.alopay.vision.WithdrawCompletion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alopay.vision.GetPaymentTodayReply}
 */
proto.alopay.vision.GetPaymentTodayReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alopay.vision.GetPaymentTodayReply;
  return proto.alopay.vision.GetPaymentTodayReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alopay.vision.GetPaymentTodayReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alopay.vision.GetPaymentTodayReply}
 */
proto.alopay.vision.GetPaymentTodayReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.alopay.vision.TopUpCompletion;
      reader.readMessage(value,proto.alopay.vision.TopUpCompletion.deserializeBinaryFromReader);
      msg.setTopUpCompletion(value);
      break;
    case 4:
      var value = new proto.alopay.vision.WithdrawCompletion;
      reader.readMessage(value,proto.alopay.vision.WithdrawCompletion.deserializeBinaryFromReader);
      msg.setWithdrawCompletion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alopay.vision.GetPaymentTodayReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alopay.vision.GetPaymentTodayReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alopay.vision.GetPaymentTodayReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.GetPaymentTodayReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopUpCompletion();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.alopay.vision.TopUpCompletion.serializeBinaryToWriter
    );
  }
  f = message.getWithdrawCompletion();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.alopay.vision.WithdrawCompletion.serializeBinaryToWriter
    );
  }
};


/**
 * optional TopUpCompletion top_up_completion = 3;
 * @return {?proto.alopay.vision.TopUpCompletion}
 */
proto.alopay.vision.GetPaymentTodayReply.prototype.getTopUpCompletion = function() {
  return /** @type{?proto.alopay.vision.TopUpCompletion} */ (
    jspb.Message.getWrapperField(this, proto.alopay.vision.TopUpCompletion, 3));
};


/**
 * @param {?proto.alopay.vision.TopUpCompletion|undefined} value
 * @return {!proto.alopay.vision.GetPaymentTodayReply} returns this
*/
proto.alopay.vision.GetPaymentTodayReply.prototype.setTopUpCompletion = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.alopay.vision.GetPaymentTodayReply} returns this
 */
proto.alopay.vision.GetPaymentTodayReply.prototype.clearTopUpCompletion = function() {
  return this.setTopUpCompletion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.alopay.vision.GetPaymentTodayReply.prototype.hasTopUpCompletion = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional WithdrawCompletion withdraw_completion = 4;
 * @return {?proto.alopay.vision.WithdrawCompletion}
 */
proto.alopay.vision.GetPaymentTodayReply.prototype.getWithdrawCompletion = function() {
  return /** @type{?proto.alopay.vision.WithdrawCompletion} */ (
    jspb.Message.getWrapperField(this, proto.alopay.vision.WithdrawCompletion, 4));
};


/**
 * @param {?proto.alopay.vision.WithdrawCompletion|undefined} value
 * @return {!proto.alopay.vision.GetPaymentTodayReply} returns this
*/
proto.alopay.vision.GetPaymentTodayReply.prototype.setWithdrawCompletion = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.alopay.vision.GetPaymentTodayReply} returns this
 */
proto.alopay.vision.GetPaymentTodayReply.prototype.clearWithdrawCompletion = function() {
  return this.setWithdrawCompletion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.alopay.vision.GetPaymentTodayReply.prototype.hasWithdrawCompletion = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alopay.vision.GetProfitRateReply.prototype.toObject = function(opt_includeInstance) {
  return proto.alopay.vision.GetProfitRateReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alopay.vision.GetProfitRateReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.GetProfitRateReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalRevenue: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalProfit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    profitRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alopay.vision.GetProfitRateReply}
 */
proto.alopay.vision.GetProfitRateReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alopay.vision.GetProfitRateReply;
  return proto.alopay.vision.GetProfitRateReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alopay.vision.GetProfitRateReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alopay.vision.GetProfitRateReply}
 */
proto.alopay.vision.GetProfitRateReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalRevenue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalProfit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProfitRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alopay.vision.GetProfitRateReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alopay.vision.GetProfitRateReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alopay.vision.GetProfitRateReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.GetProfitRateReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalRevenue();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTotalProfit();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getProfitRate();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional uint64 total_revenue = 1;
 * @return {number}
 */
proto.alopay.vision.GetProfitRateReply.prototype.getTotalRevenue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.alopay.vision.GetProfitRateReply} returns this
 */
proto.alopay.vision.GetProfitRateReply.prototype.setTotalRevenue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 total_profit = 2;
 * @return {number}
 */
proto.alopay.vision.GetProfitRateReply.prototype.getTotalProfit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.alopay.vision.GetProfitRateReply} returns this
 */
proto.alopay.vision.GetProfitRateReply.prototype.setTotalProfit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float profit_rate = 3;
 * @return {number}
 */
proto.alopay.vision.GetProfitRateReply.prototype.getProfitRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.alopay.vision.GetProfitRateReply} returns this
 */
proto.alopay.vision.GetProfitRateReply.prototype.setProfitRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.alopay.vision.GetAllocationTopUpRateReply.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alopay.vision.GetAllocationTopUpRateReply.prototype.toObject = function(opt_includeInstance) {
  return proto.alopay.vision.GetAllocationTopUpRateReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alopay.vision.GetAllocationTopUpRateReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.GetAllocationTopUpRateReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalTopup: jspb.Message.getFieldWithDefault(msg, 1, 0),
    topUpAllocationRateList: jspb.Message.toObjectList(msg.getTopUpAllocationRateList(),
    proto.alopay.vision.AllocationDetail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alopay.vision.GetAllocationTopUpRateReply}
 */
proto.alopay.vision.GetAllocationTopUpRateReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alopay.vision.GetAllocationTopUpRateReply;
  return proto.alopay.vision.GetAllocationTopUpRateReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alopay.vision.GetAllocationTopUpRateReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alopay.vision.GetAllocationTopUpRateReply}
 */
proto.alopay.vision.GetAllocationTopUpRateReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalTopup(value);
      break;
    case 2:
      var value = new proto.alopay.vision.AllocationDetail;
      reader.readMessage(value,proto.alopay.vision.AllocationDetail.deserializeBinaryFromReader);
      msg.addTopUpAllocationRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alopay.vision.GetAllocationTopUpRateReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alopay.vision.GetAllocationTopUpRateReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alopay.vision.GetAllocationTopUpRateReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.GetAllocationTopUpRateReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalTopup();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTopUpAllocationRateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.alopay.vision.AllocationDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 total_topup = 1;
 * @return {number}
 */
proto.alopay.vision.GetAllocationTopUpRateReply.prototype.getTotalTopup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.alopay.vision.GetAllocationTopUpRateReply} returns this
 */
proto.alopay.vision.GetAllocationTopUpRateReply.prototype.setTotalTopup = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated AllocationDetail top_up_allocation_rate = 2;
 * @return {!Array<!proto.alopay.vision.AllocationDetail>}
 */
proto.alopay.vision.GetAllocationTopUpRateReply.prototype.getTopUpAllocationRateList = function() {
  return /** @type{!Array<!proto.alopay.vision.AllocationDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.alopay.vision.AllocationDetail, 2));
};


/**
 * @param {!Array<!proto.alopay.vision.AllocationDetail>} value
 * @return {!proto.alopay.vision.GetAllocationTopUpRateReply} returns this
*/
proto.alopay.vision.GetAllocationTopUpRateReply.prototype.setTopUpAllocationRateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.alopay.vision.AllocationDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.alopay.vision.AllocationDetail}
 */
proto.alopay.vision.GetAllocationTopUpRateReply.prototype.addTopUpAllocationRate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.alopay.vision.AllocationDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.alopay.vision.GetAllocationTopUpRateReply} returns this
 */
proto.alopay.vision.GetAllocationTopUpRateReply.prototype.clearTopUpAllocationRateList = function() {
  return this.setTopUpAllocationRateList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.alopay.vision.GetAllocationWithdrawRateReply.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alopay.vision.GetAllocationWithdrawRateReply.prototype.toObject = function(opt_includeInstance) {
  return proto.alopay.vision.GetAllocationWithdrawRateReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alopay.vision.GetAllocationWithdrawRateReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.GetAllocationWithdrawRateReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalWithdraw: jspb.Message.getFieldWithDefault(msg, 1, 0),
    withdrawAllocationRateList: jspb.Message.toObjectList(msg.getWithdrawAllocationRateList(),
    proto.alopay.vision.AllocationDetail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alopay.vision.GetAllocationWithdrawRateReply}
 */
proto.alopay.vision.GetAllocationWithdrawRateReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alopay.vision.GetAllocationWithdrawRateReply;
  return proto.alopay.vision.GetAllocationWithdrawRateReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alopay.vision.GetAllocationWithdrawRateReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alopay.vision.GetAllocationWithdrawRateReply}
 */
proto.alopay.vision.GetAllocationWithdrawRateReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalWithdraw(value);
      break;
    case 2:
      var value = new proto.alopay.vision.AllocationDetail;
      reader.readMessage(value,proto.alopay.vision.AllocationDetail.deserializeBinaryFromReader);
      msg.addWithdrawAllocationRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alopay.vision.GetAllocationWithdrawRateReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alopay.vision.GetAllocationWithdrawRateReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alopay.vision.GetAllocationWithdrawRateReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.GetAllocationWithdrawRateReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalWithdraw();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getWithdrawAllocationRateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.alopay.vision.AllocationDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 total_withdraw = 1;
 * @return {number}
 */
proto.alopay.vision.GetAllocationWithdrawRateReply.prototype.getTotalWithdraw = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.alopay.vision.GetAllocationWithdrawRateReply} returns this
 */
proto.alopay.vision.GetAllocationWithdrawRateReply.prototype.setTotalWithdraw = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated AllocationDetail withdraw_allocation_rate = 2;
 * @return {!Array<!proto.alopay.vision.AllocationDetail>}
 */
proto.alopay.vision.GetAllocationWithdrawRateReply.prototype.getWithdrawAllocationRateList = function() {
  return /** @type{!Array<!proto.alopay.vision.AllocationDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.alopay.vision.AllocationDetail, 2));
};


/**
 * @param {!Array<!proto.alopay.vision.AllocationDetail>} value
 * @return {!proto.alopay.vision.GetAllocationWithdrawRateReply} returns this
*/
proto.alopay.vision.GetAllocationWithdrawRateReply.prototype.setWithdrawAllocationRateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.alopay.vision.AllocationDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.alopay.vision.AllocationDetail}
 */
proto.alopay.vision.GetAllocationWithdrawRateReply.prototype.addWithdrawAllocationRate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.alopay.vision.AllocationDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.alopay.vision.GetAllocationWithdrawRateReply} returns this
 */
proto.alopay.vision.GetAllocationWithdrawRateReply.prototype.clearWithdrawAllocationRateList = function() {
  return this.setWithdrawAllocationRateList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.alopay.vision.GetTopPaymentMethodReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alopay.vision.GetTopPaymentMethodReply.prototype.toObject = function(opt_includeInstance) {
  return proto.alopay.vision.GetTopPaymentMethodReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alopay.vision.GetTopPaymentMethodReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.GetTopPaymentMethodReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    topPaymentMethodRevenueList: jspb.Message.toObjectList(msg.getTopPaymentMethodRevenueList(),
    proto.alopay.vision.PaymentMethodRevenue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alopay.vision.GetTopPaymentMethodReply}
 */
proto.alopay.vision.GetTopPaymentMethodReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alopay.vision.GetTopPaymentMethodReply;
  return proto.alopay.vision.GetTopPaymentMethodReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alopay.vision.GetTopPaymentMethodReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alopay.vision.GetTopPaymentMethodReply}
 */
proto.alopay.vision.GetTopPaymentMethodReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.alopay.vision.PaymentMethodRevenue;
      reader.readMessage(value,proto.alopay.vision.PaymentMethodRevenue.deserializeBinaryFromReader);
      msg.addTopPaymentMethodRevenue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alopay.vision.GetTopPaymentMethodReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alopay.vision.GetTopPaymentMethodReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alopay.vision.GetTopPaymentMethodReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.GetTopPaymentMethodReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopPaymentMethodRevenueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.alopay.vision.PaymentMethodRevenue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PaymentMethodRevenue top_payment_method_revenue = 1;
 * @return {!Array<!proto.alopay.vision.PaymentMethodRevenue>}
 */
proto.alopay.vision.GetTopPaymentMethodReply.prototype.getTopPaymentMethodRevenueList = function() {
  return /** @type{!Array<!proto.alopay.vision.PaymentMethodRevenue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.alopay.vision.PaymentMethodRevenue, 1));
};


/**
 * @param {!Array<!proto.alopay.vision.PaymentMethodRevenue>} value
 * @return {!proto.alopay.vision.GetTopPaymentMethodReply} returns this
*/
proto.alopay.vision.GetTopPaymentMethodReply.prototype.setTopPaymentMethodRevenueList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.alopay.vision.PaymentMethodRevenue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.alopay.vision.PaymentMethodRevenue}
 */
proto.alopay.vision.GetTopPaymentMethodReply.prototype.addTopPaymentMethodRevenue = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.alopay.vision.PaymentMethodRevenue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.alopay.vision.GetTopPaymentMethodReply} returns this
 */
proto.alopay.vision.GetTopPaymentMethodReply.prototype.clearTopPaymentMethodRevenueList = function() {
  return this.setTopPaymentMethodRevenueList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.alopay.vision.GetTopTellerReply.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.alopay.vision.GetTopTellerReply.prototype.toObject = function(opt_includeInstance) {
  return proto.alopay.vision.GetTopTellerReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.alopay.vision.GetTopTellerReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.GetTopTellerReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    topTellerRevenueList: jspb.Message.toObjectList(msg.getTopTellerRevenueList(),
    proto.alopay.vision.TellerRevenue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.alopay.vision.GetTopTellerReply}
 */
proto.alopay.vision.GetTopTellerReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.alopay.vision.GetTopTellerReply;
  return proto.alopay.vision.GetTopTellerReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.alopay.vision.GetTopTellerReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.alopay.vision.GetTopTellerReply}
 */
proto.alopay.vision.GetTopTellerReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.alopay.vision.TellerRevenue;
      reader.readMessage(value,proto.alopay.vision.TellerRevenue.deserializeBinaryFromReader);
      msg.addTopTellerRevenue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.alopay.vision.GetTopTellerReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.alopay.vision.GetTopTellerReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.alopay.vision.GetTopTellerReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.alopay.vision.GetTopTellerReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopTellerRevenueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.alopay.vision.TellerRevenue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TellerRevenue top_teller_revenue = 2;
 * @return {!Array<!proto.alopay.vision.TellerRevenue>}
 */
proto.alopay.vision.GetTopTellerReply.prototype.getTopTellerRevenueList = function() {
  return /** @type{!Array<!proto.alopay.vision.TellerRevenue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.alopay.vision.TellerRevenue, 2));
};


/**
 * @param {!Array<!proto.alopay.vision.TellerRevenue>} value
 * @return {!proto.alopay.vision.GetTopTellerReply} returns this
*/
proto.alopay.vision.GetTopTellerReply.prototype.setTopTellerRevenueList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.alopay.vision.TellerRevenue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.alopay.vision.TellerRevenue}
 */
proto.alopay.vision.GetTopTellerReply.prototype.addTopTellerRevenue = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.alopay.vision.TellerRevenue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.alopay.vision.GetTopTellerReply} returns this
 */
proto.alopay.vision.GetTopTellerReply.prototype.clearTopTellerRevenueList = function() {
  return this.setTopTellerRevenueList([]);
};


goog.object.extend(exports, proto.alopay.vision);
