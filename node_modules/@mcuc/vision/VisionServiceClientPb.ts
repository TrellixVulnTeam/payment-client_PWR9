/**
 * @fileoverview gRPC-Web generated client stub for alopay.vision
 * @enhanceable
 * @public
 */

// GENERATED CODE -- DO NOT EDIT!


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as vision_api_vision_pb from './vision_pb';


export class VisionClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname;
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodInfoGetIncomeStatement = new grpcWeb.AbstractClientBase.MethodInfo(
    vision_api_vision_pb.GetIncomeStatementReply,
    (request: vision_api_vision_pb.GetReportRequest) => {
      return request.serializeBinary();
    },
    vision_api_vision_pb.GetIncomeStatementReply.deserializeBinary
  );

  getIncomeStatement(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null): Promise<vision_api_vision_pb.GetIncomeStatementReply>;

  getIncomeStatement(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: vision_api_vision_pb.GetIncomeStatementReply) => void): grpcWeb.ClientReadableStream<vision_api_vision_pb.GetIncomeStatementReply>;

  getIncomeStatement(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: vision_api_vision_pb.GetIncomeStatementReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/alopay.vision.Vision/GetIncomeStatement',
        request,
        metadata || {},
        this.methodInfoGetIncomeStatement,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/alopay.vision.Vision/GetIncomeStatement',
    request,
    metadata || {},
    this.methodInfoGetIncomeStatement);
  }

  methodInfoGetPaymentToday = new grpcWeb.AbstractClientBase.MethodInfo(
    vision_api_vision_pb.GetPaymentTodayReply,
    (request: vision_api_vision_pb.GetReportRequest) => {
      return request.serializeBinary();
    },
    vision_api_vision_pb.GetPaymentTodayReply.deserializeBinary
  );

  getPaymentToday(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null): Promise<vision_api_vision_pb.GetPaymentTodayReply>;

  getPaymentToday(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: vision_api_vision_pb.GetPaymentTodayReply) => void): grpcWeb.ClientReadableStream<vision_api_vision_pb.GetPaymentTodayReply>;

  getPaymentToday(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: vision_api_vision_pb.GetPaymentTodayReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/alopay.vision.Vision/GetPaymentToday',
        request,
        metadata || {},
        this.methodInfoGetPaymentToday,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/alopay.vision.Vision/GetPaymentToday',
    request,
    metadata || {},
    this.methodInfoGetPaymentToday);
  }

  methodInfoGetProfitRate = new grpcWeb.AbstractClientBase.MethodInfo(
    vision_api_vision_pb.GetProfitRateReply,
    (request: vision_api_vision_pb.GetReportRequest) => {
      return request.serializeBinary();
    },
    vision_api_vision_pb.GetProfitRateReply.deserializeBinary
  );

  getProfitRate(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null): Promise<vision_api_vision_pb.GetProfitRateReply>;

  getProfitRate(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: vision_api_vision_pb.GetProfitRateReply) => void): grpcWeb.ClientReadableStream<vision_api_vision_pb.GetProfitRateReply>;

  getProfitRate(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: vision_api_vision_pb.GetProfitRateReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/alopay.vision.Vision/GetProfitRate',
        request,
        metadata || {},
        this.methodInfoGetProfitRate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/alopay.vision.Vision/GetProfitRate',
    request,
    metadata || {},
    this.methodInfoGetProfitRate);
  }

  methodInfoGetAllocationTopUpRate = new grpcWeb.AbstractClientBase.MethodInfo(
    vision_api_vision_pb.GetAllocationTopUpRateReply,
    (request: vision_api_vision_pb.GetReportRequest) => {
      return request.serializeBinary();
    },
    vision_api_vision_pb.GetAllocationTopUpRateReply.deserializeBinary
  );

  getAllocationTopUpRate(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null): Promise<vision_api_vision_pb.GetAllocationTopUpRateReply>;

  getAllocationTopUpRate(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: vision_api_vision_pb.GetAllocationTopUpRateReply) => void): grpcWeb.ClientReadableStream<vision_api_vision_pb.GetAllocationTopUpRateReply>;

  getAllocationTopUpRate(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: vision_api_vision_pb.GetAllocationTopUpRateReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/alopay.vision.Vision/GetAllocationTopUpRate',
        request,
        metadata || {},
        this.methodInfoGetAllocationTopUpRate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/alopay.vision.Vision/GetAllocationTopUpRate',
    request,
    metadata || {},
    this.methodInfoGetAllocationTopUpRate);
  }

  methodInfoGetAllocationWithdrawRate = new grpcWeb.AbstractClientBase.MethodInfo(
    vision_api_vision_pb.GetAllocationWithdrawRateReply,
    (request: vision_api_vision_pb.GetReportRequest) => {
      return request.serializeBinary();
    },
    vision_api_vision_pb.GetAllocationWithdrawRateReply.deserializeBinary
  );

  getAllocationWithdrawRate(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null): Promise<vision_api_vision_pb.GetAllocationWithdrawRateReply>;

  getAllocationWithdrawRate(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: vision_api_vision_pb.GetAllocationWithdrawRateReply) => void): grpcWeb.ClientReadableStream<vision_api_vision_pb.GetAllocationWithdrawRateReply>;

  getAllocationWithdrawRate(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: vision_api_vision_pb.GetAllocationWithdrawRateReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/alopay.vision.Vision/GetAllocationWithdrawRate',
        request,
        metadata || {},
        this.methodInfoGetAllocationWithdrawRate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/alopay.vision.Vision/GetAllocationWithdrawRate',
    request,
    metadata || {},
    this.methodInfoGetAllocationWithdrawRate);
  }

  methodInfoGetTopPaymentMethod = new grpcWeb.AbstractClientBase.MethodInfo(
    vision_api_vision_pb.GetTopPaymentMethodReply,
    (request: vision_api_vision_pb.GetReportRequest) => {
      return request.serializeBinary();
    },
    vision_api_vision_pb.GetTopPaymentMethodReply.deserializeBinary
  );

  getTopPaymentMethod(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null): Promise<vision_api_vision_pb.GetTopPaymentMethodReply>;

  getTopPaymentMethod(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: vision_api_vision_pb.GetTopPaymentMethodReply) => void): grpcWeb.ClientReadableStream<vision_api_vision_pb.GetTopPaymentMethodReply>;

  getTopPaymentMethod(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: vision_api_vision_pb.GetTopPaymentMethodReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/alopay.vision.Vision/GetTopPaymentMethod',
        request,
        metadata || {},
        this.methodInfoGetTopPaymentMethod,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/alopay.vision.Vision/GetTopPaymentMethod',
    request,
    metadata || {},
    this.methodInfoGetTopPaymentMethod);
  }

  methodInfoGetTopTeller = new grpcWeb.AbstractClientBase.MethodInfo(
    vision_api_vision_pb.GetTopTellerReply,
    (request: vision_api_vision_pb.GetReportRequest) => {
      return request.serializeBinary();
    },
    vision_api_vision_pb.GetTopTellerReply.deserializeBinary
  );

  getTopTeller(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null): Promise<vision_api_vision_pb.GetTopTellerReply>;

  getTopTeller(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: vision_api_vision_pb.GetTopTellerReply) => void): grpcWeb.ClientReadableStream<vision_api_vision_pb.GetTopTellerReply>;

  getTopTeller(
    request: vision_api_vision_pb.GetReportRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: vision_api_vision_pb.GetTopTellerReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/alopay.vision.Vision/GetTopTeller',
        request,
        metadata || {},
        this.methodInfoGetTopTeller,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/alopay.vision.Vision/GetTopTeller',
    request,
    metadata || {},
    this.methodInfoGetTopTeller);
  }

}

