import * as jspb from 'google-protobuf'

import * as google_protobuf_timestamp_pb from 'google-protobuf/google/protobuf/timestamp_pb';
import * as validate_validate_pb from '@greyhole/validate/validate_pb';
import * as stark_api_stark_pb from '@mcuc/stark/stark_pb';


export class GetReportRequest extends jspb.Message {
  getFromDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setFromDate(value?: google_protobuf_timestamp_pb.Timestamp): GetReportRequest;
  hasFromDate(): boolean;
  clearFromDate(): GetReportRequest;

  getToDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setToDate(value?: google_protobuf_timestamp_pb.Timestamp): GetReportRequest;
  hasToDate(): boolean;
  clearToDate(): GetReportRequest;

  getMerchantId(): number;
  setMerchantId(value: number): GetReportRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetReportRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetReportRequest): GetReportRequest.AsObject;
  static serializeBinaryToWriter(message: GetReportRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetReportRequest;
  static deserializeBinaryFromReader(message: GetReportRequest, reader: jspb.BinaryReader): GetReportRequest;
}

export namespace GetReportRequest {
  export type AsObject = {
    fromDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    toDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    merchantId: number,
  }
}

export class Income extends jspb.Message {
  getDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setDate(value?: google_protobuf_timestamp_pb.Timestamp): Income;
  hasDate(): boolean;
  clearDate(): Income;

  getAmount(): number;
  setAmount(value: number): Income;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Income.AsObject;
  static toObject(includeInstance: boolean, msg: Income): Income.AsObject;
  static serializeBinaryToWriter(message: Income, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Income;
  static deserializeBinaryFromReader(message: Income, reader: jspb.BinaryReader): Income;
}

export namespace Income {
  export type AsObject = {
    date?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    amount: number,
  }
}

export class TopUpCompletion extends jspb.Message {
  getCompleted(): number;
  setCompleted(value: number): TopUpCompletion;

  getTotal(): number;
  setTotal(value: number): TopUpCompletion;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TopUpCompletion.AsObject;
  static toObject(includeInstance: boolean, msg: TopUpCompletion): TopUpCompletion.AsObject;
  static serializeBinaryToWriter(message: TopUpCompletion, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TopUpCompletion;
  static deserializeBinaryFromReader(message: TopUpCompletion, reader: jspb.BinaryReader): TopUpCompletion;
}

export namespace TopUpCompletion {
  export type AsObject = {
    completed: number,
    total: number,
  }
}

export class WithdrawCompletion extends jspb.Message {
  getCompleted(): number;
  setCompleted(value: number): WithdrawCompletion;

  getTotal(): number;
  setTotal(value: number): WithdrawCompletion;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): WithdrawCompletion.AsObject;
  static toObject(includeInstance: boolean, msg: WithdrawCompletion): WithdrawCompletion.AsObject;
  static serializeBinaryToWriter(message: WithdrawCompletion, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): WithdrawCompletion;
  static deserializeBinaryFromReader(message: WithdrawCompletion, reader: jspb.BinaryReader): WithdrawCompletion;
}

export namespace WithdrawCompletion {
  export type AsObject = {
    completed: number,
    total: number,
  }
}

export class AllocationDetail extends jspb.Message {
  getMethod(): stark_api_stark_pb.MethodType;
  setMethod(value: stark_api_stark_pb.MethodType): AllocationDetail;

  getAmount(): number;
  setAmount(value: number): AllocationDetail;

  getPercent(): number;
  setPercent(value: number): AllocationDetail;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AllocationDetail.AsObject;
  static toObject(includeInstance: boolean, msg: AllocationDetail): AllocationDetail.AsObject;
  static serializeBinaryToWriter(message: AllocationDetail, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AllocationDetail;
  static deserializeBinaryFromReader(message: AllocationDetail, reader: jspb.BinaryReader): AllocationDetail;
}

export namespace AllocationDetail {
  export type AsObject = {
    method: stark_api_stark_pb.MethodType,
    amount: number,
    percent: number,
  }
}

export class PaymentMethodRevenue extends jspb.Message {
  getMethod(): stark_api_stark_pb.MethodType;
  setMethod(value: stark_api_stark_pb.MethodType): PaymentMethodRevenue;

  getType(): stark_api_stark_pb.PaymentType;
  setType(value: stark_api_stark_pb.PaymentType): PaymentMethodRevenue;

  getAmount(): number;
  setAmount(value: number): PaymentMethodRevenue;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PaymentMethodRevenue.AsObject;
  static toObject(includeInstance: boolean, msg: PaymentMethodRevenue): PaymentMethodRevenue.AsObject;
  static serializeBinaryToWriter(message: PaymentMethodRevenue, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PaymentMethodRevenue;
  static deserializeBinaryFromReader(message: PaymentMethodRevenue, reader: jspb.BinaryReader): PaymentMethodRevenue;
}

export namespace PaymentMethodRevenue {
  export type AsObject = {
    method: stark_api_stark_pb.MethodType,
    type: stark_api_stark_pb.PaymentType,
    amount: number,
  }
}

export class TellerRevenue extends jspb.Message {
  getUserId(): string;
  setUserId(value: string): TellerRevenue;

  getAmount(): number;
  setAmount(value: number): TellerRevenue;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TellerRevenue.AsObject;
  static toObject(includeInstance: boolean, msg: TellerRevenue): TellerRevenue.AsObject;
  static serializeBinaryToWriter(message: TellerRevenue, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TellerRevenue;
  static deserializeBinaryFromReader(message: TellerRevenue, reader: jspb.BinaryReader): TellerRevenue;
}

export namespace TellerRevenue {
  export type AsObject = {
    userId: string,
    amount: number,
  }
}

export class GetIncomeStatementReply extends jspb.Message {
  getRevenuesList(): Array<Income>;
  setRevenuesList(value: Array<Income>): GetIncomeStatementReply;
  clearRevenuesList(): GetIncomeStatementReply;
  addRevenues(value?: Income, index?: number): Income;

  getProfitsList(): Array<Income>;
  setProfitsList(value: Array<Income>): GetIncomeStatementReply;
  clearProfitsList(): GetIncomeStatementReply;
  addProfits(value?: Income, index?: number): Income;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetIncomeStatementReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetIncomeStatementReply): GetIncomeStatementReply.AsObject;
  static serializeBinaryToWriter(message: GetIncomeStatementReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetIncomeStatementReply;
  static deserializeBinaryFromReader(message: GetIncomeStatementReply, reader: jspb.BinaryReader): GetIncomeStatementReply;
}

export namespace GetIncomeStatementReply {
  export type AsObject = {
    revenuesList: Array<Income.AsObject>,
    profitsList: Array<Income.AsObject>,
  }
}

export class GetPaymentTodayReply extends jspb.Message {
  getTopUpCompletion(): TopUpCompletion | undefined;
  setTopUpCompletion(value?: TopUpCompletion): GetPaymentTodayReply;
  hasTopUpCompletion(): boolean;
  clearTopUpCompletion(): GetPaymentTodayReply;

  getWithdrawCompletion(): WithdrawCompletion | undefined;
  setWithdrawCompletion(value?: WithdrawCompletion): GetPaymentTodayReply;
  hasWithdrawCompletion(): boolean;
  clearWithdrawCompletion(): GetPaymentTodayReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetPaymentTodayReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetPaymentTodayReply): GetPaymentTodayReply.AsObject;
  static serializeBinaryToWriter(message: GetPaymentTodayReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetPaymentTodayReply;
  static deserializeBinaryFromReader(message: GetPaymentTodayReply, reader: jspb.BinaryReader): GetPaymentTodayReply;
}

export namespace GetPaymentTodayReply {
  export type AsObject = {
    topUpCompletion?: TopUpCompletion.AsObject,
    withdrawCompletion?: WithdrawCompletion.AsObject,
  }
}

export class GetProfitRateReply extends jspb.Message {
  getTotalRevenue(): number;
  setTotalRevenue(value: number): GetProfitRateReply;

  getTotalProfit(): number;
  setTotalProfit(value: number): GetProfitRateReply;

  getProfitRate(): number;
  setProfitRate(value: number): GetProfitRateReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetProfitRateReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetProfitRateReply): GetProfitRateReply.AsObject;
  static serializeBinaryToWriter(message: GetProfitRateReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetProfitRateReply;
  static deserializeBinaryFromReader(message: GetProfitRateReply, reader: jspb.BinaryReader): GetProfitRateReply;
}

export namespace GetProfitRateReply {
  export type AsObject = {
    totalRevenue: number,
    totalProfit: number,
    profitRate: number,
  }
}

export class GetAllocationTopUpRateReply extends jspb.Message {
  getTotalTopup(): number;
  setTotalTopup(value: number): GetAllocationTopUpRateReply;

  getTopUpAllocationRateList(): Array<AllocationDetail>;
  setTopUpAllocationRateList(value: Array<AllocationDetail>): GetAllocationTopUpRateReply;
  clearTopUpAllocationRateList(): GetAllocationTopUpRateReply;
  addTopUpAllocationRate(value?: AllocationDetail, index?: number): AllocationDetail;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetAllocationTopUpRateReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetAllocationTopUpRateReply): GetAllocationTopUpRateReply.AsObject;
  static serializeBinaryToWriter(message: GetAllocationTopUpRateReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetAllocationTopUpRateReply;
  static deserializeBinaryFromReader(message: GetAllocationTopUpRateReply, reader: jspb.BinaryReader): GetAllocationTopUpRateReply;
}

export namespace GetAllocationTopUpRateReply {
  export type AsObject = {
    totalTopup: number,
    topUpAllocationRateList: Array<AllocationDetail.AsObject>,
  }
}

export class GetAllocationWithdrawRateReply extends jspb.Message {
  getTotalWithdraw(): number;
  setTotalWithdraw(value: number): GetAllocationWithdrawRateReply;

  getWithdrawAllocationRateList(): Array<AllocationDetail>;
  setWithdrawAllocationRateList(value: Array<AllocationDetail>): GetAllocationWithdrawRateReply;
  clearWithdrawAllocationRateList(): GetAllocationWithdrawRateReply;
  addWithdrawAllocationRate(value?: AllocationDetail, index?: number): AllocationDetail;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetAllocationWithdrawRateReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetAllocationWithdrawRateReply): GetAllocationWithdrawRateReply.AsObject;
  static serializeBinaryToWriter(message: GetAllocationWithdrawRateReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetAllocationWithdrawRateReply;
  static deserializeBinaryFromReader(message: GetAllocationWithdrawRateReply, reader: jspb.BinaryReader): GetAllocationWithdrawRateReply;
}

export namespace GetAllocationWithdrawRateReply {
  export type AsObject = {
    totalWithdraw: number,
    withdrawAllocationRateList: Array<AllocationDetail.AsObject>,
  }
}

export class GetTopPaymentMethodReply extends jspb.Message {
  getTopPaymentMethodRevenueList(): Array<PaymentMethodRevenue>;
  setTopPaymentMethodRevenueList(value: Array<PaymentMethodRevenue>): GetTopPaymentMethodReply;
  clearTopPaymentMethodRevenueList(): GetTopPaymentMethodReply;
  addTopPaymentMethodRevenue(value?: PaymentMethodRevenue, index?: number): PaymentMethodRevenue;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetTopPaymentMethodReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetTopPaymentMethodReply): GetTopPaymentMethodReply.AsObject;
  static serializeBinaryToWriter(message: GetTopPaymentMethodReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetTopPaymentMethodReply;
  static deserializeBinaryFromReader(message: GetTopPaymentMethodReply, reader: jspb.BinaryReader): GetTopPaymentMethodReply;
}

export namespace GetTopPaymentMethodReply {
  export type AsObject = {
    topPaymentMethodRevenueList: Array<PaymentMethodRevenue.AsObject>,
  }
}

export class GetTopTellerReply extends jspb.Message {
  getTopTellerRevenueList(): Array<TellerRevenue>;
  setTopTellerRevenueList(value: Array<TellerRevenue>): GetTopTellerReply;
  clearTopTellerRevenueList(): GetTopTellerReply;
  addTopTellerRevenue(value?: TellerRevenue, index?: number): TellerRevenue;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetTopTellerReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetTopTellerReply): GetTopTellerReply.AsObject;
  static serializeBinaryToWriter(message: GetTopTellerReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetTopTellerReply;
  static deserializeBinaryFromReader(message: GetTopTellerReply, reader: jspb.BinaryReader): GetTopTellerReply;
}

export namespace GetTopTellerReply {
  export type AsObject = {
    topTellerRevenueList: Array<TellerRevenue.AsObject>,
  }
}

