/**
 * @fileoverview gRPC-Web generated client stub for greyhole.myrole
 * @enhanceable
 * @public
 */

// GENERATED CODE -- DO NOT EDIT!


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as myrole_api_myrole_pb from './myrole_pb';


export class MyRoleClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname;
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodInfoCreateResource = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.Resource,
    (request: myrole_api_myrole_pb.CreateResourceRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.Resource.deserializeBinary
  );

  createResource(
    request: myrole_api_myrole_pb.CreateResourceRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.Resource>;

  createResource(
    request: myrole_api_myrole_pb.CreateResourceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Resource) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.Resource>;

  createResource(
    request: myrole_api_myrole_pb.CreateResourceRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Resource) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/CreateResource',
        request,
        metadata || {},
        this.methodInfoCreateResource,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/CreateResource',
    request,
    metadata || {},
    this.methodInfoCreateResource);
  }

  methodInfoListResources = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.ListResourcesReply,
    (request: myrole_api_myrole_pb.ListResourcesRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.ListResourcesReply.deserializeBinary
  );

  listResources(
    request: myrole_api_myrole_pb.ListResourcesRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.ListResourcesReply>;

  listResources(
    request: myrole_api_myrole_pb.ListResourcesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.ListResourcesReply) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.ListResourcesReply>;

  listResources(
    request: myrole_api_myrole_pb.ListResourcesRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.ListResourcesReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/ListResources',
        request,
        metadata || {},
        this.methodInfoListResources,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/ListResources',
    request,
    metadata || {},
    this.methodInfoListResources);
  }

  methodInfoGetResource = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.Resource,
    (request: myrole_api_myrole_pb.GetResourceRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.Resource.deserializeBinary
  );

  getResource(
    request: myrole_api_myrole_pb.GetResourceRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.Resource>;

  getResource(
    request: myrole_api_myrole_pb.GetResourceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Resource) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.Resource>;

  getResource(
    request: myrole_api_myrole_pb.GetResourceRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Resource) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/GetResource',
        request,
        metadata || {},
        this.methodInfoGetResource,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/GetResource',
    request,
    metadata || {},
    this.methodInfoGetResource);
  }

  methodInfoUpdateResource = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.Resource,
    (request: myrole_api_myrole_pb.UpdateResourceRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.Resource.deserializeBinary
  );

  updateResource(
    request: myrole_api_myrole_pb.UpdateResourceRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.Resource>;

  updateResource(
    request: myrole_api_myrole_pb.UpdateResourceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Resource) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.Resource>;

  updateResource(
    request: myrole_api_myrole_pb.UpdateResourceRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Resource) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/UpdateResource',
        request,
        metadata || {},
        this.methodInfoUpdateResource,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/UpdateResource',
    request,
    metadata || {},
    this.methodInfoUpdateResource);
  }

  methodInfoCreateAction = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.Action,
    (request: myrole_api_myrole_pb.CreateActionRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.Action.deserializeBinary
  );

  createAction(
    request: myrole_api_myrole_pb.CreateActionRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.Action>;

  createAction(
    request: myrole_api_myrole_pb.CreateActionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Action) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.Action>;

  createAction(
    request: myrole_api_myrole_pb.CreateActionRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Action) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/CreateAction',
        request,
        metadata || {},
        this.methodInfoCreateAction,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/CreateAction',
    request,
    metadata || {},
    this.methodInfoCreateAction);
  }

  methodInfoListActions = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.ListActionsReply,
    (request: myrole_api_myrole_pb.ListActionsRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.ListActionsReply.deserializeBinary
  );

  listActions(
    request: myrole_api_myrole_pb.ListActionsRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.ListActionsReply>;

  listActions(
    request: myrole_api_myrole_pb.ListActionsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.ListActionsReply) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.ListActionsReply>;

  listActions(
    request: myrole_api_myrole_pb.ListActionsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.ListActionsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/ListActions',
        request,
        metadata || {},
        this.methodInfoListActions,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/ListActions',
    request,
    metadata || {},
    this.methodInfoListActions);
  }

  methodInfoGetAction = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.Action,
    (request: myrole_api_myrole_pb.GetActionRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.Action.deserializeBinary
  );

  getAction(
    request: myrole_api_myrole_pb.GetActionRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.Action>;

  getAction(
    request: myrole_api_myrole_pb.GetActionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Action) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.Action>;

  getAction(
    request: myrole_api_myrole_pb.GetActionRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Action) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/GetAction',
        request,
        metadata || {},
        this.methodInfoGetAction,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/GetAction',
    request,
    metadata || {},
    this.methodInfoGetAction);
  }

  methodInfoUpdateAction = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.Action,
    (request: myrole_api_myrole_pb.UpdateActionRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.Action.deserializeBinary
  );

  updateAction(
    request: myrole_api_myrole_pb.UpdateActionRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.Action>;

  updateAction(
    request: myrole_api_myrole_pb.UpdateActionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Action) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.Action>;

  updateAction(
    request: myrole_api_myrole_pb.UpdateActionRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Action) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/UpdateAction',
        request,
        metadata || {},
        this.methodInfoUpdateAction,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/UpdateAction',
    request,
    metadata || {},
    this.methodInfoUpdateAction);
  }

  methodInfoCreateGroup = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.Group,
    (request: myrole_api_myrole_pb.CreateGroupRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.Group.deserializeBinary
  );

  createGroup(
    request: myrole_api_myrole_pb.CreateGroupRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.Group>;

  createGroup(
    request: myrole_api_myrole_pb.CreateGroupRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Group) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.Group>;

  createGroup(
    request: myrole_api_myrole_pb.CreateGroupRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Group) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/CreateGroup',
        request,
        metadata || {},
        this.methodInfoCreateGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/CreateGroup',
    request,
    metadata || {},
    this.methodInfoCreateGroup);
  }

  methodInfoGetGroup = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.Group,
    (request: myrole_api_myrole_pb.GetGroupRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.Group.deserializeBinary
  );

  getGroup(
    request: myrole_api_myrole_pb.GetGroupRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.Group>;

  getGroup(
    request: myrole_api_myrole_pb.GetGroupRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Group) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.Group>;

  getGroup(
    request: myrole_api_myrole_pb.GetGroupRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Group) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/GetGroup',
        request,
        metadata || {},
        this.methodInfoGetGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/GetGroup',
    request,
    metadata || {},
    this.methodInfoGetGroup);
  }

  methodInfoUpdateGroup = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.Group,
    (request: myrole_api_myrole_pb.UpdateGroupRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.Group.deserializeBinary
  );

  updateGroup(
    request: myrole_api_myrole_pb.UpdateGroupRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.Group>;

  updateGroup(
    request: myrole_api_myrole_pb.UpdateGroupRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Group) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.Group>;

  updateGroup(
    request: myrole_api_myrole_pb.UpdateGroupRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Group) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/UpdateGroup',
        request,
        metadata || {},
        this.methodInfoUpdateGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/UpdateGroup',
    request,
    metadata || {},
    this.methodInfoUpdateGroup);
  }

  methodInfoListGroups = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.ListGroupsReply,
    (request: myrole_api_myrole_pb.ListGroupsRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.ListGroupsReply.deserializeBinary
  );

  listGroups(
    request: myrole_api_myrole_pb.ListGroupsRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.ListGroupsReply>;

  listGroups(
    request: myrole_api_myrole_pb.ListGroupsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.ListGroupsReply) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.ListGroupsReply>;

  listGroups(
    request: myrole_api_myrole_pb.ListGroupsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.ListGroupsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/ListGroups',
        request,
        metadata || {},
        this.methodInfoListGroups,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/ListGroups',
    request,
    metadata || {},
    this.methodInfoListGroups);
  }

  methodInfoCreateRole = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.Role,
    (request: myrole_api_myrole_pb.CreateRoleRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.Role.deserializeBinary
  );

  createRole(
    request: myrole_api_myrole_pb.CreateRoleRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.Role>;

  createRole(
    request: myrole_api_myrole_pb.CreateRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Role) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.Role>;

  createRole(
    request: myrole_api_myrole_pb.CreateRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Role) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/CreateRole',
        request,
        metadata || {},
        this.methodInfoCreateRole,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/CreateRole',
    request,
    metadata || {},
    this.methodInfoCreateRole);
  }

  methodInfoUpdateRole = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.Role,
    (request: myrole_api_myrole_pb.UpdateRoleRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.Role.deserializeBinary
  );

  updateRole(
    request: myrole_api_myrole_pb.UpdateRoleRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.Role>;

  updateRole(
    request: myrole_api_myrole_pb.UpdateRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Role) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.Role>;

  updateRole(
    request: myrole_api_myrole_pb.UpdateRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Role) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/UpdateRole',
        request,
        metadata || {},
        this.methodInfoUpdateRole,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/UpdateRole',
    request,
    metadata || {},
    this.methodInfoUpdateRole);
  }

  methodInfoGetRole = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.Role,
    (request: myrole_api_myrole_pb.GetRoleRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.Role.deserializeBinary
  );

  getRole(
    request: myrole_api_myrole_pb.GetRoleRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.Role>;

  getRole(
    request: myrole_api_myrole_pb.GetRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Role) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.Role>;

  getRole(
    request: myrole_api_myrole_pb.GetRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Role) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/GetRole',
        request,
        metadata || {},
        this.methodInfoGetRole,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/GetRole',
    request,
    metadata || {},
    this.methodInfoGetRole);
  }

  methodInfoListRoles = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.ListRolesReply,
    (request: myrole_api_myrole_pb.ListRolesRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.ListRolesReply.deserializeBinary
  );

  listRoles(
    request: myrole_api_myrole_pb.ListRolesRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.ListRolesReply>;

  listRoles(
    request: myrole_api_myrole_pb.ListRolesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.ListRolesReply) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.ListRolesReply>;

  listRoles(
    request: myrole_api_myrole_pb.ListRolesRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.ListRolesReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/ListRoles',
        request,
        metadata || {},
        this.methodInfoListRoles,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/ListRoles',
    request,
    metadata || {},
    this.methodInfoListRoles);
  }

  methodInfoUpdateRolePermission = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.Role,
    (request: myrole_api_myrole_pb.UpdateRolePermissionRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.Role.deserializeBinary
  );

  updateRolePermission(
    request: myrole_api_myrole_pb.UpdateRolePermissionRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.Role>;

  updateRolePermission(
    request: myrole_api_myrole_pb.UpdateRolePermissionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Role) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.Role>;

  updateRolePermission(
    request: myrole_api_myrole_pb.UpdateRolePermissionRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Role) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/UpdateRolePermission',
        request,
        metadata || {},
        this.methodInfoUpdateRolePermission,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/UpdateRolePermission',
    request,
    metadata || {},
    this.methodInfoUpdateRolePermission);
  }

  methodInfoCreateModule = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.Module,
    (request: myrole_api_myrole_pb.CreateModuleRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.Module.deserializeBinary
  );

  createModule(
    request: myrole_api_myrole_pb.CreateModuleRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.Module>;

  createModule(
    request: myrole_api_myrole_pb.CreateModuleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Module) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.Module>;

  createModule(
    request: myrole_api_myrole_pb.CreateModuleRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Module) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/CreateModule',
        request,
        metadata || {},
        this.methodInfoCreateModule,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/CreateModule',
    request,
    metadata || {},
    this.methodInfoCreateModule);
  }

  methodInfoListModules = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.ListModulesReply,
    (request: myrole_api_myrole_pb.ListModulesRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.ListModulesReply.deserializeBinary
  );

  listModules(
    request: myrole_api_myrole_pb.ListModulesRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.ListModulesReply>;

  listModules(
    request: myrole_api_myrole_pb.ListModulesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.ListModulesReply) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.ListModulesReply>;

  listModules(
    request: myrole_api_myrole_pb.ListModulesRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.ListModulesReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/ListModules',
        request,
        metadata || {},
        this.methodInfoListModules,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/ListModules',
    request,
    metadata || {},
    this.methodInfoListModules);
  }

  methodInfoGetModule = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.Module,
    (request: myrole_api_myrole_pb.GetModuleRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.Module.deserializeBinary
  );

  getModule(
    request: myrole_api_myrole_pb.GetModuleRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.Module>;

  getModule(
    request: myrole_api_myrole_pb.GetModuleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Module) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.Module>;

  getModule(
    request: myrole_api_myrole_pb.GetModuleRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Module) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/GetModule',
        request,
        metadata || {},
        this.methodInfoGetModule,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/GetModule',
    request,
    metadata || {},
    this.methodInfoGetModule);
  }

  methodInfoUpdateModule = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.Module,
    (request: myrole_api_myrole_pb.UpdateModuleRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.Module.deserializeBinary
  );

  updateModule(
    request: myrole_api_myrole_pb.UpdateModuleRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.Module>;

  updateModule(
    request: myrole_api_myrole_pb.UpdateModuleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Module) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.Module>;

  updateModule(
    request: myrole_api_myrole_pb.UpdateModuleRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.Module) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyRole/UpdateModule',
        request,
        metadata || {},
        this.methodInfoUpdateModule,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyRole/UpdateModule',
    request,
    metadata || {},
    this.methodInfoUpdateModule);
  }

}

export class MyMemberClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname;
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodInfoUpdateRoles = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.UpdateRolesReply,
    (request: myrole_api_myrole_pb.UpdateRolesRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.UpdateRolesReply.deserializeBinary
  );

  updateRoles(
    request: myrole_api_myrole_pb.UpdateRolesRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.UpdateRolesReply>;

  updateRoles(
    request: myrole_api_myrole_pb.UpdateRolesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.UpdateRolesReply) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.UpdateRolesReply>;

  updateRoles(
    request: myrole_api_myrole_pb.UpdateRolesRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.UpdateRolesReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyMember/UpdateRoles',
        request,
        metadata || {},
        this.methodInfoUpdateRoles,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyMember/UpdateRoles',
    request,
    metadata || {},
    this.methodInfoUpdateRoles);
  }

  methodInfoGetPermissions = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.GetPermissionsReply,
    (request: myrole_api_myrole_pb.GetPermissionsRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.GetPermissionsReply.deserializeBinary
  );

  getPermissions(
    request: myrole_api_myrole_pb.GetPermissionsRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.GetPermissionsReply>;

  getPermissions(
    request: myrole_api_myrole_pb.GetPermissionsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.GetPermissionsReply) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.GetPermissionsReply>;

  getPermissions(
    request: myrole_api_myrole_pb.GetPermissionsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.GetPermissionsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyMember/GetPermissions',
        request,
        metadata || {},
        this.methodInfoGetPermissions,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyMember/GetPermissions',
    request,
    metadata || {},
    this.methodInfoGetPermissions);
  }

  methodInfoGetModules = new grpcWeb.AbstractClientBase.MethodInfo(
    myrole_api_myrole_pb.GetModulesReply,
    (request: myrole_api_myrole_pb.GetModulesRequest) => {
      return request.serializeBinary();
    },
    myrole_api_myrole_pb.GetModulesReply.deserializeBinary
  );

  getModules(
    request: myrole_api_myrole_pb.GetModulesRequest,
    metadata: grpcWeb.Metadata | null): Promise<myrole_api_myrole_pb.GetModulesReply>;

  getModules(
    request: myrole_api_myrole_pb.GetModulesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.GetModulesReply) => void): grpcWeb.ClientReadableStream<myrole_api_myrole_pb.GetModulesReply>;

  getModules(
    request: myrole_api_myrole_pb.GetModulesRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myrole_api_myrole_pb.GetModulesReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myrole.MyMember/GetModules',
        request,
        metadata || {},
        this.methodInfoGetModules,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myrole.MyMember/GetModules',
    request,
    metadata || {},
    this.methodInfoGetModules);
  }

}

