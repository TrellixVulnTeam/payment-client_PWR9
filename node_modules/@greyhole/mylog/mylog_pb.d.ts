import * as jspb from 'google-protobuf'

import * as google_protobuf_timestamp_pb from 'google-protobuf/google/protobuf/timestamp_pb';
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';
import * as validate_validate_pb from '@greyhole/validate/validate_pb';


export class MeRequest extends jspb.Message {
  getLimit(): number;
  setLimit(value: number): MeRequest;

  getCursor(): number;
  setCursor(value: number): MeRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MeRequest.AsObject;
  static toObject(includeInstance: boolean, msg: MeRequest): MeRequest.AsObject;
  static serializeBinaryToWriter(message: MeRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MeRequest;
  static deserializeBinaryFromReader(message: MeRequest, reader: jspb.BinaryReader): MeRequest;
}

export namespace MeRequest {
  export type AsObject = {
    limit: number,
    cursor: number,
  }
}

export class ListLogsRequest extends jspb.Message {
  getUserIdsList(): Array<number>;
  setUserIdsList(value: Array<number>): ListLogsRequest;
  clearUserIdsList(): ListLogsRequest;
  addUserIds(value: number, index?: number): ListLogsRequest;

  getGroupsIdsList(): Array<number>;
  setGroupsIdsList(value: Array<number>): ListLogsRequest;
  clearGroupsIdsList(): ListLogsRequest;
  addGroupsIds(value: number, index?: number): ListLogsRequest;

  getRoleIdsList(): Array<number>;
  setRoleIdsList(value: Array<number>): ListLogsRequest;
  clearRoleIdsList(): ListLogsRequest;
  addRoleIds(value: number, index?: number): ListLogsRequest;

  getFrom(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setFrom(value?: google_protobuf_timestamp_pb.Timestamp): ListLogsRequest;
  hasFrom(): boolean;
  clearFrom(): ListLogsRequest;

  getTo(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setTo(value?: google_protobuf_timestamp_pb.Timestamp): ListLogsRequest;
  hasTo(): boolean;
  clearTo(): ListLogsRequest;

  getLimit(): number;
  setLimit(value: number): ListLogsRequest;

  getCursor(): number;
  setCursor(value: number): ListLogsRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListLogsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListLogsRequest): ListLogsRequest.AsObject;
  static serializeBinaryToWriter(message: ListLogsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListLogsRequest;
  static deserializeBinaryFromReader(message: ListLogsRequest, reader: jspb.BinaryReader): ListLogsRequest;
}

export namespace ListLogsRequest {
  export type AsObject = {
    userIdsList: Array<number>,
    groupsIdsList: Array<number>,
    roleIdsList: Array<number>,
    from?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    to?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    limit: number,
    cursor: number,
  }
}

export class ListLogsReply extends jspb.Message {
  getLogsList(): Array<Log>;
  setLogsList(value: Array<Log>): ListLogsReply;
  clearLogsList(): ListLogsReply;
  addLogs(value?: Log, index?: number): Log;

  getNextCursor(): number;
  setNextCursor(value: number): ListLogsReply;

  getHasMore(): boolean;
  setHasMore(value: boolean): ListLogsReply;

  getTotal(): number;
  setTotal(value: number): ListLogsReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListLogsReply.AsObject;
  static toObject(includeInstance: boolean, msg: ListLogsReply): ListLogsReply.AsObject;
  static serializeBinaryToWriter(message: ListLogsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListLogsReply;
  static deserializeBinaryFromReader(message: ListLogsReply, reader: jspb.BinaryReader): ListLogsReply;
}

export namespace ListLogsReply {
  export type AsObject = {
    logsList: Array<Log.AsObject>,
    nextCursor: number,
    hasMore: boolean,
    total: number,
  }
}

export class CreateLogsRequest extends jspb.Message {
  getLogsList(): Array<Log>;
  setLogsList(value: Array<Log>): CreateLogsRequest;
  clearLogsList(): CreateLogsRequest;
  addLogs(value?: Log, index?: number): Log;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateLogsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateLogsRequest): CreateLogsRequest.AsObject;
  static serializeBinaryToWriter(message: CreateLogsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateLogsRequest;
  static deserializeBinaryFromReader(message: CreateLogsRequest, reader: jspb.BinaryReader): CreateLogsRequest;
}

export namespace CreateLogsRequest {
  export type AsObject = {
    logsList: Array<Log.AsObject>,
  }
}

export class Log extends jspb.Message {
  getId(): number;
  setId(value: number): Log;

  getRequestId(): string;
  setRequestId(value: string): Log;

  getUserId(): number;
  setUserId(value: number): Log;

  getGroupIdsList(): Array<number>;
  setGroupIdsList(value: Array<number>): Log;
  clearGroupIdsList(): Log;
  addGroupIds(value: number, index?: number): Log;

  getRoleIdsList(): Array<number>;
  setRoleIdsList(value: Array<number>): Log;
  clearRoleIdsList(): Log;
  addRoleIds(value: number, index?: number): Log;

  getActionId(): number;
  setActionId(value: number): Log;

  getResourceId(): number;
  setResourceId(value: number): Log;

  getModuleId(): number;
  setModuleId(value: number): Log;

  getPath(): string;
  setPath(value: string): Log;

  getIp(): string;
  setIp(value: string): Log;

  getUserAgent(): string;
  setUserAgent(value: string): Log;

  getCreatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setCreatedAt(value?: google_protobuf_timestamp_pb.Timestamp): Log;
  hasCreatedAt(): boolean;
  clearCreatedAt(): Log;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Log.AsObject;
  static toObject(includeInstance: boolean, msg: Log): Log.AsObject;
  static serializeBinaryToWriter(message: Log, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Log;
  static deserializeBinaryFromReader(message: Log, reader: jspb.BinaryReader): Log;
}

export namespace Log {
  export type AsObject = {
    id: number,
    requestId: string,
    userId: number,
    groupIdsList: Array<number>,
    roleIdsList: Array<number>,
    actionId: number,
    resourceId: number,
    moduleId: number,
    path: string,
    ip: string,
    userAgent: string,
    createdAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
  }
}

