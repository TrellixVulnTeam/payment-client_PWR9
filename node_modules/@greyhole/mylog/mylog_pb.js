// source: mylog/mylog.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var validate_validate_pb = require('@greyhole/validate/validate_pb.js');
goog.object.extend(proto, validate_validate_pb);
goog.exportSymbol('proto.greyhole.mylog.CreateLogsRequest', null, global);
goog.exportSymbol('proto.greyhole.mylog.ListLogsReply', null, global);
goog.exportSymbol('proto.greyhole.mylog.ListLogsRequest', null, global);
goog.exportSymbol('proto.greyhole.mylog.Log', null, global);
goog.exportSymbol('proto.greyhole.mylog.MeRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.mylog.MeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.mylog.MeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.mylog.MeRequest.displayName = 'proto.greyhole.mylog.MeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.mylog.ListLogsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greyhole.mylog.ListLogsRequest.repeatedFields_, null);
};
goog.inherits(proto.greyhole.mylog.ListLogsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.mylog.ListLogsRequest.displayName = 'proto.greyhole.mylog.ListLogsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.mylog.ListLogsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greyhole.mylog.ListLogsReply.repeatedFields_, null);
};
goog.inherits(proto.greyhole.mylog.ListLogsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.mylog.ListLogsReply.displayName = 'proto.greyhole.mylog.ListLogsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.mylog.CreateLogsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greyhole.mylog.CreateLogsRequest.repeatedFields_, null);
};
goog.inherits(proto.greyhole.mylog.CreateLogsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.mylog.CreateLogsRequest.displayName = 'proto.greyhole.mylog.CreateLogsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.mylog.Log = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greyhole.mylog.Log.repeatedFields_, null);
};
goog.inherits(proto.greyhole.mylog.Log, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.mylog.Log.displayName = 'proto.greyhole.mylog.Log';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.mylog.MeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.mylog.MeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.mylog.MeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.mylog.MeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cursor: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.mylog.MeRequest}
 */
proto.greyhole.mylog.MeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.mylog.MeRequest;
  return proto.greyhole.mylog.MeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.mylog.MeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.mylog.MeRequest}
 */
proto.greyhole.mylog.MeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCursor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.mylog.MeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.mylog.MeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.mylog.MeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.mylog.MeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCursor();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int32 limit = 1;
 * @return {number}
 */
proto.greyhole.mylog.MeRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.mylog.MeRequest} returns this
 */
proto.greyhole.mylog.MeRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 cursor = 2;
 * @return {number}
 */
proto.greyhole.mylog.MeRequest.prototype.getCursor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.mylog.MeRequest} returns this
 */
proto.greyhole.mylog.MeRequest.prototype.setCursor = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greyhole.mylog.ListLogsRequest.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.mylog.ListLogsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.mylog.ListLogsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.mylog.ListLogsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.mylog.ListLogsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    groupsIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    roleIdsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    from: (f = msg.getFrom()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    to: (f = msg.getTo()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    limit: jspb.Message.getFieldWithDefault(msg, 6, 0),
    cursor: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.mylog.ListLogsRequest}
 */
proto.greyhole.mylog.ListLogsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.mylog.ListLogsRequest;
  return proto.greyhole.mylog.ListLogsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.mylog.ListLogsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.mylog.ListLogsRequest}
 */
proto.greyhole.mylog.ListLogsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setUserIdsList(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setGroupsIdsList(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setRoleIdsList(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCursor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.mylog.ListLogsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.mylog.ListLogsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.mylog.ListLogsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.mylog.ListLogsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
  f = message.getGroupsIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
  f = message.getRoleIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      3,
      f
    );
  }
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getCursor();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * repeated int64 user_ids = 1;
 * @return {!Array<number>}
 */
proto.greyhole.mylog.ListLogsRequest.prototype.getUserIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.greyhole.mylog.ListLogsRequest} returns this
 */
proto.greyhole.mylog.ListLogsRequest.prototype.setUserIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.greyhole.mylog.ListLogsRequest} returns this
 */
proto.greyhole.mylog.ListLogsRequest.prototype.addUserIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.mylog.ListLogsRequest} returns this
 */
proto.greyhole.mylog.ListLogsRequest.prototype.clearUserIdsList = function() {
  return this.setUserIdsList([]);
};


/**
 * repeated int64 groups_ids = 2;
 * @return {!Array<number>}
 */
proto.greyhole.mylog.ListLogsRequest.prototype.getGroupsIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.greyhole.mylog.ListLogsRequest} returns this
 */
proto.greyhole.mylog.ListLogsRequest.prototype.setGroupsIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.greyhole.mylog.ListLogsRequest} returns this
 */
proto.greyhole.mylog.ListLogsRequest.prototype.addGroupsIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.mylog.ListLogsRequest} returns this
 */
proto.greyhole.mylog.ListLogsRequest.prototype.clearGroupsIdsList = function() {
  return this.setGroupsIdsList([]);
};


/**
 * repeated int64 role_ids = 3;
 * @return {!Array<number>}
 */
proto.greyhole.mylog.ListLogsRequest.prototype.getRoleIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.greyhole.mylog.ListLogsRequest} returns this
 */
proto.greyhole.mylog.ListLogsRequest.prototype.setRoleIdsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.greyhole.mylog.ListLogsRequest} returns this
 */
proto.greyhole.mylog.ListLogsRequest.prototype.addRoleIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.mylog.ListLogsRequest} returns this
 */
proto.greyhole.mylog.ListLogsRequest.prototype.clearRoleIdsList = function() {
  return this.setRoleIdsList([]);
};


/**
 * optional google.protobuf.Timestamp from = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.greyhole.mylog.ListLogsRequest.prototype.getFrom = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.greyhole.mylog.ListLogsRequest} returns this
*/
proto.greyhole.mylog.ListLogsRequest.prototype.setFrom = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.mylog.ListLogsRequest} returns this
 */
proto.greyhole.mylog.ListLogsRequest.prototype.clearFrom = function() {
  return this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.mylog.ListLogsRequest.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp to = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.greyhole.mylog.ListLogsRequest.prototype.getTo = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.greyhole.mylog.ListLogsRequest} returns this
*/
proto.greyhole.mylog.ListLogsRequest.prototype.setTo = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.mylog.ListLogsRequest} returns this
 */
proto.greyhole.mylog.ListLogsRequest.prototype.clearTo = function() {
  return this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.mylog.ListLogsRequest.prototype.hasTo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 limit = 6;
 * @return {number}
 */
proto.greyhole.mylog.ListLogsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.mylog.ListLogsRequest} returns this
 */
proto.greyhole.mylog.ListLogsRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 cursor = 7;
 * @return {number}
 */
proto.greyhole.mylog.ListLogsRequest.prototype.getCursor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.mylog.ListLogsRequest} returns this
 */
proto.greyhole.mylog.ListLogsRequest.prototype.setCursor = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greyhole.mylog.ListLogsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.mylog.ListLogsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.mylog.ListLogsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.mylog.ListLogsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.mylog.ListLogsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.greyhole.mylog.Log.toObject, includeInstance),
    nextCursor: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hasMore: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    total: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.mylog.ListLogsReply}
 */
proto.greyhole.mylog.ListLogsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.mylog.ListLogsReply;
  return proto.greyhole.mylog.ListLogsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.mylog.ListLogsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.mylog.ListLogsReply}
 */
proto.greyhole.mylog.ListLogsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.mylog.Log;
      reader.readMessage(value,proto.greyhole.mylog.Log.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNextCursor(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasMore(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.mylog.ListLogsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.mylog.ListLogsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.mylog.ListLogsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.mylog.ListLogsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.greyhole.mylog.Log.serializeBinaryToWriter
    );
  }
  f = message.getNextCursor();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getHasMore();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * repeated Log logs = 1;
 * @return {!Array<!proto.greyhole.mylog.Log>}
 */
proto.greyhole.mylog.ListLogsReply.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.greyhole.mylog.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greyhole.mylog.Log, 1));
};


/**
 * @param {!Array<!proto.greyhole.mylog.Log>} value
 * @return {!proto.greyhole.mylog.ListLogsReply} returns this
*/
proto.greyhole.mylog.ListLogsReply.prototype.setLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.greyhole.mylog.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greyhole.mylog.Log}
 */
proto.greyhole.mylog.ListLogsReply.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.greyhole.mylog.Log, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.mylog.ListLogsReply} returns this
 */
proto.greyhole.mylog.ListLogsReply.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};


/**
 * optional int64 next_cursor = 2;
 * @return {number}
 */
proto.greyhole.mylog.ListLogsReply.prototype.getNextCursor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.mylog.ListLogsReply} returns this
 */
proto.greyhole.mylog.ListLogsReply.prototype.setNextCursor = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool has_more = 3;
 * @return {boolean}
 */
proto.greyhole.mylog.ListLogsReply.prototype.getHasMore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.greyhole.mylog.ListLogsReply} returns this
 */
proto.greyhole.mylog.ListLogsReply.prototype.setHasMore = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int64 total = 4;
 * @return {number}
 */
proto.greyhole.mylog.ListLogsReply.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.mylog.ListLogsReply} returns this
 */
proto.greyhole.mylog.ListLogsReply.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greyhole.mylog.CreateLogsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.mylog.CreateLogsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.mylog.CreateLogsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.mylog.CreateLogsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.mylog.CreateLogsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.greyhole.mylog.Log.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.mylog.CreateLogsRequest}
 */
proto.greyhole.mylog.CreateLogsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.mylog.CreateLogsRequest;
  return proto.greyhole.mylog.CreateLogsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.mylog.CreateLogsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.mylog.CreateLogsRequest}
 */
proto.greyhole.mylog.CreateLogsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.mylog.Log;
      reader.readMessage(value,proto.greyhole.mylog.Log.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.mylog.CreateLogsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.mylog.CreateLogsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.mylog.CreateLogsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.mylog.CreateLogsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.greyhole.mylog.Log.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Log logs = 1;
 * @return {!Array<!proto.greyhole.mylog.Log>}
 */
proto.greyhole.mylog.CreateLogsRequest.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.greyhole.mylog.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greyhole.mylog.Log, 1));
};


/**
 * @param {!Array<!proto.greyhole.mylog.Log>} value
 * @return {!proto.greyhole.mylog.CreateLogsRequest} returns this
*/
proto.greyhole.mylog.CreateLogsRequest.prototype.setLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.greyhole.mylog.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greyhole.mylog.Log}
 */
proto.greyhole.mylog.CreateLogsRequest.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.greyhole.mylog.Log, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.mylog.CreateLogsRequest} returns this
 */
proto.greyhole.mylog.CreateLogsRequest.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greyhole.mylog.Log.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.mylog.Log.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.mylog.Log.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.mylog.Log} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.mylog.Log.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    requestId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    groupIdsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    roleIdsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    actionId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    resourceId: jspb.Message.getFieldWithDefault(msg, 7, 0),
    moduleId: jspb.Message.getFieldWithDefault(msg, 8, 0),
    path: jspb.Message.getFieldWithDefault(msg, 9, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 10, ""),
    userAgent: jspb.Message.getFieldWithDefault(msg, 11, ""),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.mylog.Log}
 */
proto.greyhole.mylog.Log.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.mylog.Log;
  return proto.greyhole.mylog.Log.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.mylog.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.mylog.Log}
 */
proto.greyhole.mylog.Log.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setGroupIdsList(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setRoleIdsList(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActionId(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setResourceId(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setModuleId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserAgent(value);
      break;
    case 12:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.mylog.Log.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.mylog.Log.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.mylog.Log} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.mylog.Log.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getGroupIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      4,
      f
    );
  }
  f = message.getRoleIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      5,
      f
    );
  }
  f = message.getActionId();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getResourceId();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getModuleId();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getUserAgent();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.greyhole.mylog.Log.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.mylog.Log} returns this
 */
proto.greyhole.mylog.Log.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string request_id = 2;
 * @return {string}
 */
proto.greyhole.mylog.Log.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.mylog.Log} returns this
 */
proto.greyhole.mylog.Log.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 user_id = 3;
 * @return {number}
 */
proto.greyhole.mylog.Log.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.mylog.Log} returns this
 */
proto.greyhole.mylog.Log.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated int64 group_ids = 4;
 * @return {!Array<number>}
 */
proto.greyhole.mylog.Log.prototype.getGroupIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.greyhole.mylog.Log} returns this
 */
proto.greyhole.mylog.Log.prototype.setGroupIdsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.greyhole.mylog.Log} returns this
 */
proto.greyhole.mylog.Log.prototype.addGroupIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.mylog.Log} returns this
 */
proto.greyhole.mylog.Log.prototype.clearGroupIdsList = function() {
  return this.setGroupIdsList([]);
};


/**
 * repeated int64 role_ids = 5;
 * @return {!Array<number>}
 */
proto.greyhole.mylog.Log.prototype.getRoleIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.greyhole.mylog.Log} returns this
 */
proto.greyhole.mylog.Log.prototype.setRoleIdsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.greyhole.mylog.Log} returns this
 */
proto.greyhole.mylog.Log.prototype.addRoleIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.mylog.Log} returns this
 */
proto.greyhole.mylog.Log.prototype.clearRoleIdsList = function() {
  return this.setRoleIdsList([]);
};


/**
 * optional int64 action_id = 6;
 * @return {number}
 */
proto.greyhole.mylog.Log.prototype.getActionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.mylog.Log} returns this
 */
proto.greyhole.mylog.Log.prototype.setActionId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 resource_id = 7;
 * @return {number}
 */
proto.greyhole.mylog.Log.prototype.getResourceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.mylog.Log} returns this
 */
proto.greyhole.mylog.Log.prototype.setResourceId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 module_id = 8;
 * @return {number}
 */
proto.greyhole.mylog.Log.prototype.getModuleId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.mylog.Log} returns this
 */
proto.greyhole.mylog.Log.prototype.setModuleId = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string path = 9;
 * @return {string}
 */
proto.greyhole.mylog.Log.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.mylog.Log} returns this
 */
proto.greyhole.mylog.Log.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string ip = 10;
 * @return {string}
 */
proto.greyhole.mylog.Log.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.mylog.Log} returns this
 */
proto.greyhole.mylog.Log.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string user_agent = 11;
 * @return {string}
 */
proto.greyhole.mylog.Log.prototype.getUserAgent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.mylog.Log} returns this
 */
proto.greyhole.mylog.Log.prototype.setUserAgent = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 12;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.greyhole.mylog.Log.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 12));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.greyhole.mylog.Log} returns this
*/
proto.greyhole.mylog.Log.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.mylog.Log} returns this
 */
proto.greyhole.mylog.Log.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.mylog.Log.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 12) != null;
};


goog.object.extend(exports, proto.greyhole.mylog);
