/**
 * @fileoverview gRPC-Web generated client stub for greyhole.mylog
 * @enhanceable
 * @public
 */

// GENERATED CODE -- DO NOT EDIT!


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';
import * as mylog_api_mylog_pb from './mylog_pb';


export class MyLogClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname;
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodInfoMe = new grpcWeb.AbstractClientBase.MethodInfo(
    mylog_api_mylog_pb.ListLogsReply,
    (request: mylog_api_mylog_pb.MeRequest) => {
      return request.serializeBinary();
    },
    mylog_api_mylog_pb.ListLogsReply.deserializeBinary
  );

  me(
    request: mylog_api_mylog_pb.MeRequest,
    metadata: grpcWeb.Metadata | null): Promise<mylog_api_mylog_pb.ListLogsReply>;

  me(
    request: mylog_api_mylog_pb.MeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: mylog_api_mylog_pb.ListLogsReply) => void): grpcWeb.ClientReadableStream<mylog_api_mylog_pb.ListLogsReply>;

  me(
    request: mylog_api_mylog_pb.MeRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: mylog_api_mylog_pb.ListLogsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.mylog.MyLog/Me',
        request,
        metadata || {},
        this.methodInfoMe,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.mylog.MyLog/Me',
    request,
    metadata || {},
    this.methodInfoMe);
  }

  methodInfoListLogs = new grpcWeb.AbstractClientBase.MethodInfo(
    mylog_api_mylog_pb.ListLogsReply,
    (request: mylog_api_mylog_pb.ListLogsRequest) => {
      return request.serializeBinary();
    },
    mylog_api_mylog_pb.ListLogsReply.deserializeBinary
  );

  listLogs(
    request: mylog_api_mylog_pb.ListLogsRequest,
    metadata: grpcWeb.Metadata | null): Promise<mylog_api_mylog_pb.ListLogsReply>;

  listLogs(
    request: mylog_api_mylog_pb.ListLogsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: mylog_api_mylog_pb.ListLogsReply) => void): grpcWeb.ClientReadableStream<mylog_api_mylog_pb.ListLogsReply>;

  listLogs(
    request: mylog_api_mylog_pb.ListLogsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: mylog_api_mylog_pb.ListLogsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.mylog.MyLog/ListLogs',
        request,
        metadata || {},
        this.methodInfoListLogs,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.mylog.MyLog/ListLogs',
    request,
    metadata || {},
    this.methodInfoListLogs);
  }

}

export class StewardClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname;
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodInfoCreateLogs = new grpcWeb.AbstractClientBase.MethodInfo(
    google_protobuf_empty_pb.Empty,
    (request: mylog_api_mylog_pb.CreateLogsRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  createLogs(
    request: mylog_api_mylog_pb.CreateLogsRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  createLogs(
    request: mylog_api_mylog_pb.CreateLogsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  createLogs(
    request: mylog_api_mylog_pb.CreateLogsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.mylog.Steward/CreateLogs',
        request,
        metadata || {},
        this.methodInfoCreateLogs,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.mylog.Steward/CreateLogs',
    request,
    metadata || {},
    this.methodInfoCreateLogs);
  }

}

