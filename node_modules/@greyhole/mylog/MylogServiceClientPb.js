"use strict";
/**
 * @fileoverview gRPC-Web generated client stub for greyhole.mylog
 * @enhanceable
 * @public
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StewardClient = exports.MyLogClient = void 0;
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
var grpcWeb = __importStar(require("grpc-web"));
var google_protobuf_empty_pb = __importStar(require("google-protobuf/google/protobuf/empty_pb"));
var mylog_api_mylog_pb = __importStar(require("./mylog_pb"));
var MyLogClient = /** @class */ (function () {
    function MyLogClient(hostname, credentials, options) {
        this.methodInfoMe = new grpcWeb.AbstractClientBase.MethodInfo(mylog_api_mylog_pb.ListLogsReply, function (request) {
            return request.serializeBinary();
        }, mylog_api_mylog_pb.ListLogsReply.deserializeBinary);
        this.methodInfoListLogs = new grpcWeb.AbstractClientBase.MethodInfo(mylog_api_mylog_pb.ListLogsReply, function (request) {
            return request.serializeBinary();
        }, mylog_api_mylog_pb.ListLogsReply.deserializeBinary);
        if (!options)
            options = {};
        if (!credentials)
            credentials = {};
        options['format'] = 'text';
        this.client_ = new grpcWeb.GrpcWebClientBase(options);
        this.hostname_ = hostname;
        this.credentials_ = credentials;
        this.options_ = options;
    }
    MyLogClient.prototype.me = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.mylog.MyLog/Me', request, metadata || {}, this.methodInfoMe, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.mylog.MyLog/Me', request, metadata || {}, this.methodInfoMe);
    };
    MyLogClient.prototype.listLogs = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.mylog.MyLog/ListLogs', request, metadata || {}, this.methodInfoListLogs, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.mylog.MyLog/ListLogs', request, metadata || {}, this.methodInfoListLogs);
    };
    return MyLogClient;
}());
exports.MyLogClient = MyLogClient;
var StewardClient = /** @class */ (function () {
    function StewardClient(hostname, credentials, options) {
        this.methodInfoCreateLogs = new grpcWeb.AbstractClientBase.MethodInfo(google_protobuf_empty_pb.Empty, function (request) {
            return request.serializeBinary();
        }, google_protobuf_empty_pb.Empty.deserializeBinary);
        if (!options)
            options = {};
        if (!credentials)
            credentials = {};
        options['format'] = 'text';
        this.client_ = new grpcWeb.GrpcWebClientBase(options);
        this.hostname_ = hostname;
        this.credentials_ = credentials;
        this.options_ = options;
    }
    StewardClient.prototype.createLogs = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.mylog.Steward/CreateLogs', request, metadata || {}, this.methodInfoCreateLogs, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.mylog.Steward/CreateLogs', request, metadata || {}, this.methodInfoCreateLogs);
    };
    return StewardClient;
}());
exports.StewardClient = StewardClient;
