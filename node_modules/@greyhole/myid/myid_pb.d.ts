import * as jspb from 'google-protobuf'

import * as google_protobuf_timestamp_pb from 'google-protobuf/google/protobuf/timestamp_pb';
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';
import * as validate_validate_pb from '@greyhole/validate/validate_pb';


export class SignUpRequest extends jspb.Message {
  getUsername(): string;
  setUsername(value: string): SignUpRequest;

  getPassword(): string;
  setPassword(value: string): SignUpRequest;

  getConfirmPassword(): string;
  setConfirmPassword(value: string): SignUpRequest;

  getReferrerId(): string;
  setReferrerId(value: string): SignUpRequest;

  getDeviceId(): string;
  setDeviceId(value: string): SignUpRequest;

  getDeviceName(): string;
  setDeviceName(value: string): SignUpRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SignUpRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SignUpRequest): SignUpRequest.AsObject;
  static serializeBinaryToWriter(message: SignUpRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SignUpRequest;
  static deserializeBinaryFromReader(message: SignUpRequest, reader: jspb.BinaryReader): SignUpRequest;
}

export namespace SignUpRequest {
  export type AsObject = {
    username: string,
    password: string,
    confirmPassword: string,
    referrerId: string,
    deviceId: string,
    deviceName: string,
  }
}

export class SignUpV2Request extends jspb.Message {
  getMyId(): SignUpV2Request.MyID | undefined;
  setMyId(value?: SignUpV2Request.MyID): SignUpV2Request;
  hasMyId(): boolean;
  clearMyId(): SignUpV2Request;

  getFacebook(): SignUpV2Request.Facebook | undefined;
  setFacebook(value?: SignUpV2Request.Facebook): SignUpV2Request;
  hasFacebook(): boolean;
  clearFacebook(): SignUpV2Request;

  getReferrerId(): string;
  setReferrerId(value: string): SignUpV2Request;

  getDeviceId(): string;
  setDeviceId(value: string): SignUpV2Request;

  getDeviceName(): string;
  setDeviceName(value: string): SignUpV2Request;

  getCredentialCase(): SignUpV2Request.CredentialCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SignUpV2Request.AsObject;
  static toObject(includeInstance: boolean, msg: SignUpV2Request): SignUpV2Request.AsObject;
  static serializeBinaryToWriter(message: SignUpV2Request, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SignUpV2Request;
  static deserializeBinaryFromReader(message: SignUpV2Request, reader: jspb.BinaryReader): SignUpV2Request;
}

export namespace SignUpV2Request {
  export type AsObject = {
    myId?: SignUpV2Request.MyID.AsObject,
    facebook?: SignUpV2Request.Facebook.AsObject,
    referrerId: string,
    deviceId: string,
    deviceName: string,
  }

  export class MyID extends jspb.Message {
    getUsername(): string;
    setUsername(value: string): MyID;

    getPassword(): string;
    setPassword(value: string): MyID;

    getConfirmPassword(): string;
    setConfirmPassword(value: string): MyID;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): MyID.AsObject;
    static toObject(includeInstance: boolean, msg: MyID): MyID.AsObject;
    static serializeBinaryToWriter(message: MyID, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): MyID;
    static deserializeBinaryFromReader(message: MyID, reader: jspb.BinaryReader): MyID;
  }

  export namespace MyID {
    export type AsObject = {
      username: string,
      password: string,
      confirmPassword: string,
    }
  }


  export class Facebook extends jspb.Message {
    getToken(): string;
    setToken(value: string): Facebook;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Facebook.AsObject;
    static toObject(includeInstance: boolean, msg: Facebook): Facebook.AsObject;
    static serializeBinaryToWriter(message: Facebook, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Facebook;
    static deserializeBinaryFromReader(message: Facebook, reader: jspb.BinaryReader): Facebook;
  }

  export namespace Facebook {
    export type AsObject = {
      token: string,
    }
  }


  export enum CredentialCase { 
    CREDENTIAL_NOT_SET = 0,
    MY_ID = 1,
    FACEBOOK = 2,
  }
}

export class SignUpReply extends jspb.Message {
  getTokenInfo(): TokenInfo | undefined;
  setTokenInfo(value?: TokenInfo): SignUpReply;
  hasTokenInfo(): boolean;
  clearTokenInfo(): SignUpReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SignUpReply.AsObject;
  static toObject(includeInstance: boolean, msg: SignUpReply): SignUpReply.AsObject;
  static serializeBinaryToWriter(message: SignUpReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SignUpReply;
  static deserializeBinaryFromReader(message: SignUpReply, reader: jspb.BinaryReader): SignUpReply;
}

export namespace SignUpReply {
  export type AsObject = {
    tokenInfo?: TokenInfo.AsObject,
  }
}

export class AddCredentialRequest extends jspb.Message {
  getMyId(): SignUpV2Request.MyID | undefined;
  setMyId(value?: SignUpV2Request.MyID): AddCredentialRequest;
  hasMyId(): boolean;
  clearMyId(): AddCredentialRequest;

  getFacebook(): SignUpV2Request.Facebook | undefined;
  setFacebook(value?: SignUpV2Request.Facebook): AddCredentialRequest;
  hasFacebook(): boolean;
  clearFacebook(): AddCredentialRequest;

  getCredentialCase(): AddCredentialRequest.CredentialCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AddCredentialRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AddCredentialRequest): AddCredentialRequest.AsObject;
  static serializeBinaryToWriter(message: AddCredentialRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AddCredentialRequest;
  static deserializeBinaryFromReader(message: AddCredentialRequest, reader: jspb.BinaryReader): AddCredentialRequest;
}

export namespace AddCredentialRequest {
  export type AsObject = {
    myId?: SignUpV2Request.MyID.AsObject,
    facebook?: SignUpV2Request.Facebook.AsObject,
  }

  export enum CredentialCase { 
    CREDENTIAL_NOT_SET = 0,
    MY_ID = 1,
    FACEBOOK = 2,
  }
}

export class SignInRequest extends jspb.Message {
  getUsername(): string;
  setUsername(value: string): SignInRequest;

  getPassword(): string;
  setPassword(value: string): SignInRequest;

  getDeviceId(): string;
  setDeviceId(value: string): SignInRequest;

  getDeviceName(): string;
  setDeviceName(value: string): SignInRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SignInRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SignInRequest): SignInRequest.AsObject;
  static serializeBinaryToWriter(message: SignInRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SignInRequest;
  static deserializeBinaryFromReader(message: SignInRequest, reader: jspb.BinaryReader): SignInRequest;
}

export namespace SignInRequest {
  export type AsObject = {
    username: string,
    password: string,
    deviceId: string,
    deviceName: string,
  }
}

export class SignInV2Request extends jspb.Message {
  getMyId(): SignInV2Request.MyID | undefined;
  setMyId(value?: SignInV2Request.MyID): SignInV2Request;
  hasMyId(): boolean;
  clearMyId(): SignInV2Request;

  getFacebook(): SignInV2Request.Facebook | undefined;
  setFacebook(value?: SignInV2Request.Facebook): SignInV2Request;
  hasFacebook(): boolean;
  clearFacebook(): SignInV2Request;

  getDeviceId(): string;
  setDeviceId(value: string): SignInV2Request;

  getDeviceName(): string;
  setDeviceName(value: string): SignInV2Request;

  getCredentialCase(): SignInV2Request.CredentialCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SignInV2Request.AsObject;
  static toObject(includeInstance: boolean, msg: SignInV2Request): SignInV2Request.AsObject;
  static serializeBinaryToWriter(message: SignInV2Request, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SignInV2Request;
  static deserializeBinaryFromReader(message: SignInV2Request, reader: jspb.BinaryReader): SignInV2Request;
}

export namespace SignInV2Request {
  export type AsObject = {
    myId?: SignInV2Request.MyID.AsObject,
    facebook?: SignInV2Request.Facebook.AsObject,
    deviceId: string,
    deviceName: string,
  }

  export class MyID extends jspb.Message {
    getUsername(): string;
    setUsername(value: string): MyID;

    getPassword(): string;
    setPassword(value: string): MyID;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): MyID.AsObject;
    static toObject(includeInstance: boolean, msg: MyID): MyID.AsObject;
    static serializeBinaryToWriter(message: MyID, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): MyID;
    static deserializeBinaryFromReader(message: MyID, reader: jspb.BinaryReader): MyID;
  }

  export namespace MyID {
    export type AsObject = {
      username: string,
      password: string,
    }
  }


  export class Facebook extends jspb.Message {
    getToken(): string;
    setToken(value: string): Facebook;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Facebook.AsObject;
    static toObject(includeInstance: boolean, msg: Facebook): Facebook.AsObject;
    static serializeBinaryToWriter(message: Facebook, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Facebook;
    static deserializeBinaryFromReader(message: Facebook, reader: jspb.BinaryReader): Facebook;
  }

  export namespace Facebook {
    export type AsObject = {
      token: string,
    }
  }


  export enum CredentialCase { 
    CREDENTIAL_NOT_SET = 0,
    MY_ID = 1,
    FACEBOOK = 2,
  }
}

export class SignInReply extends jspb.Message {
  getTokenInfo(): TokenInfo | undefined;
  setTokenInfo(value?: TokenInfo): SignInReply;
  hasTokenInfo(): boolean;
  clearTokenInfo(): SignInReply;

  getConfirmOtp(): OTP | undefined;
  setConfirmOtp(value?: OTP): SignInReply;
  hasConfirmOtp(): boolean;
  clearConfirmOtp(): SignInReply;

  getResultCase(): SignInReply.ResultCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SignInReply.AsObject;
  static toObject(includeInstance: boolean, msg: SignInReply): SignInReply.AsObject;
  static serializeBinaryToWriter(message: SignInReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SignInReply;
  static deserializeBinaryFromReader(message: SignInReply, reader: jspb.BinaryReader): SignInReply;
}

export namespace SignInReply {
  export type AsObject = {
    tokenInfo?: TokenInfo.AsObject,
    confirmOtp?: OTP.AsObject,
  }

  export enum ResultCase { 
    RESULT_NOT_SET = 0,
    TOKEN_INFO = 1,
    CONFIRM_OTP = 2,
  }
}

export class ResendSignInOTPRequest extends jspb.Message {
  getOtpId(): string;
  setOtpId(value: string): ResendSignInOTPRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ResendSignInOTPRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ResendSignInOTPRequest): ResendSignInOTPRequest.AsObject;
  static serializeBinaryToWriter(message: ResendSignInOTPRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResendSignInOTPRequest;
  static deserializeBinaryFromReader(message: ResendSignInOTPRequest, reader: jspb.BinaryReader): ResendSignInOTPRequest;
}

export namespace ResendSignInOTPRequest {
  export type AsObject = {
    otpId: string,
  }
}

export class ResendSignInOTPReply extends jspb.Message {
  getConfirmOtp(): OTP | undefined;
  setConfirmOtp(value?: OTP): ResendSignInOTPReply;
  hasConfirmOtp(): boolean;
  clearConfirmOtp(): ResendSignInOTPReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ResendSignInOTPReply.AsObject;
  static toObject(includeInstance: boolean, msg: ResendSignInOTPReply): ResendSignInOTPReply.AsObject;
  static serializeBinaryToWriter(message: ResendSignInOTPReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResendSignInOTPReply;
  static deserializeBinaryFromReader(message: ResendSignInOTPReply, reader: jspb.BinaryReader): ResendSignInOTPReply;
}

export namespace ResendSignInOTPReply {
  export type AsObject = {
    confirmOtp?: OTP.AsObject,
  }
}

export class ConfirmSignInRequest extends jspb.Message {
  getOtpId(): string;
  setOtpId(value: string): ConfirmSignInRequest;

  getOtp(): string;
  setOtp(value: string): ConfirmSignInRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConfirmSignInRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConfirmSignInRequest): ConfirmSignInRequest.AsObject;
  static serializeBinaryToWriter(message: ConfirmSignInRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConfirmSignInRequest;
  static deserializeBinaryFromReader(message: ConfirmSignInRequest, reader: jspb.BinaryReader): ConfirmSignInRequest;
}

export namespace ConfirmSignInRequest {
  export type AsObject = {
    otpId: string,
    otp: string,
  }
}

export class ConfirmSignInReply extends jspb.Message {
  getTokenInfo(): TokenInfo | undefined;
  setTokenInfo(value?: TokenInfo): ConfirmSignInReply;
  hasTokenInfo(): boolean;
  clearTokenInfo(): ConfirmSignInReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConfirmSignInReply.AsObject;
  static toObject(includeInstance: boolean, msg: ConfirmSignInReply): ConfirmSignInReply.AsObject;
  static serializeBinaryToWriter(message: ConfirmSignInReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConfirmSignInReply;
  static deserializeBinaryFromReader(message: ConfirmSignInReply, reader: jspb.BinaryReader): ConfirmSignInReply;
}

export namespace ConfirmSignInReply {
  export type AsObject = {
    tokenInfo?: TokenInfo.AsObject,
  }
}

export class CreatePasswordRequest extends jspb.Message {
  getOtpId(): string;
  setOtpId(value: string): CreatePasswordRequest;

  getOtp(): string;
  setOtp(value: string): CreatePasswordRequest;

  getNewPassword(): string;
  setNewPassword(value: string): CreatePasswordRequest;

  getConfirmNewPassword(): string;
  setConfirmNewPassword(value: string): CreatePasswordRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreatePasswordRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreatePasswordRequest): CreatePasswordRequest.AsObject;
  static serializeBinaryToWriter(message: CreatePasswordRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreatePasswordRequest;
  static deserializeBinaryFromReader(message: CreatePasswordRequest, reader: jspb.BinaryReader): CreatePasswordRequest;
}

export namespace CreatePasswordRequest {
  export type AsObject = {
    otpId: string,
    otp: string,
    newPassword: string,
    confirmNewPassword: string,
  }
}

export class CreateAccessTokenRequest extends jspb.Message {
  getIdToken(): string;
  setIdToken(value: string): CreateAccessTokenRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateAccessTokenRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateAccessTokenRequest): CreateAccessTokenRequest.AsObject;
  static serializeBinaryToWriter(message: CreateAccessTokenRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateAccessTokenRequest;
  static deserializeBinaryFromReader(message: CreateAccessTokenRequest, reader: jspb.BinaryReader): CreateAccessTokenRequest;
}

export namespace CreateAccessTokenRequest {
  export type AsObject = {
    idToken: string,
  }
}

export class CreateAccessTokenReply extends jspb.Message {
  getAccessToken(): string;
  setAccessToken(value: string): CreateAccessTokenReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateAccessTokenReply.AsObject;
  static toObject(includeInstance: boolean, msg: CreateAccessTokenReply): CreateAccessTokenReply.AsObject;
  static serializeBinaryToWriter(message: CreateAccessTokenReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateAccessTokenReply;
  static deserializeBinaryFromReader(message: CreateAccessTokenReply, reader: jspb.BinaryReader): CreateAccessTokenReply;
}

export namespace CreateAccessTokenReply {
  export type AsObject = {
    accessToken: string,
  }
}

export class MeReply extends jspb.Message {
  getUser(): UserInfo | undefined;
  setUser(value?: UserInfo): MeReply;
  hasUser(): boolean;
  clearUser(): MeReply;

  getPermissionsList(): Array<Permission>;
  setPermissionsList(value: Array<Permission>): MeReply;
  clearPermissionsList(): MeReply;
  addPermissions(value?: Permission, index?: number): Permission;

  getModuleIdsList(): Array<number>;
  setModuleIdsList(value: Array<number>): MeReply;
  clearModuleIdsList(): MeReply;
  addModuleIds(value: number, index?: number): MeReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MeReply.AsObject;
  static toObject(includeInstance: boolean, msg: MeReply): MeReply.AsObject;
  static serializeBinaryToWriter(message: MeReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MeReply;
  static deserializeBinaryFromReader(message: MeReply, reader: jspb.BinaryReader): MeReply;
}

export namespace MeReply {
  export type AsObject = {
    user?: UserInfo.AsObject,
    permissionsList: Array<Permission.AsObject>,
    moduleIdsList: Array<number>,
  }
}

export class ChangePasswordRequest extends jspb.Message {
  getCurrentPassword(): string;
  setCurrentPassword(value: string): ChangePasswordRequest;

  getNewPassword(): string;
  setNewPassword(value: string): ChangePasswordRequest;

  getConfirmNewPassword(): string;
  setConfirmNewPassword(value: string): ChangePasswordRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChangePasswordRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ChangePasswordRequest): ChangePasswordRequest.AsObject;
  static serializeBinaryToWriter(message: ChangePasswordRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChangePasswordRequest;
  static deserializeBinaryFromReader(message: ChangePasswordRequest, reader: jspb.BinaryReader): ChangePasswordRequest;
}

export namespace ChangePasswordRequest {
  export type AsObject = {
    currentPassword: string,
    newPassword: string,
    confirmNewPassword: string,
  }
}

export class UpdateMetadataRequest extends jspb.Message {
  getMetadata(): string;
  setMetadata(value: string): UpdateMetadataRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateMetadataRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateMetadataRequest): UpdateMetadataRequest.AsObject;
  static serializeBinaryToWriter(message: UpdateMetadataRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateMetadataRequest;
  static deserializeBinaryFromReader(message: UpdateMetadataRequest, reader: jspb.BinaryReader): UpdateMetadataRequest;
}

export namespace UpdateMetadataRequest {
  export type AsObject = {
    metadata: string,
  }
}

export class UpdateEmailRequest extends jspb.Message {
  getEmail(): string;
  setEmail(value: string): UpdateEmailRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateEmailRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateEmailRequest): UpdateEmailRequest.AsObject;
  static serializeBinaryToWriter(message: UpdateEmailRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateEmailRequest;
  static deserializeBinaryFromReader(message: UpdateEmailRequest, reader: jspb.BinaryReader): UpdateEmailRequest;
}

export namespace UpdateEmailRequest {
  export type AsObject = {
    email: string,
  }
}

export class UpdateEmailReply extends jspb.Message {
  getOtp(): OTP | undefined;
  setOtp(value?: OTP): UpdateEmailReply;
  hasOtp(): boolean;
  clearOtp(): UpdateEmailReply;

  getUser(): UserInfo | undefined;
  setUser(value?: UserInfo): UpdateEmailReply;
  hasUser(): boolean;
  clearUser(): UpdateEmailReply;

  getResultCase(): UpdateEmailReply.ResultCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateEmailReply.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateEmailReply): UpdateEmailReply.AsObject;
  static serializeBinaryToWriter(message: UpdateEmailReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateEmailReply;
  static deserializeBinaryFromReader(message: UpdateEmailReply, reader: jspb.BinaryReader): UpdateEmailReply;
}

export namespace UpdateEmailReply {
  export type AsObject = {
    otp?: OTP.AsObject,
    user?: UserInfo.AsObject,
  }

  export enum ResultCase { 
    RESULT_NOT_SET = 0,
    OTP = 1,
    USER = 2,
  }
}

export class VerifyEmailRequest extends jspb.Message {
  getOtpId(): string;
  setOtpId(value: string): VerifyEmailRequest;

  getOtp(): string;
  setOtp(value: string): VerifyEmailRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VerifyEmailRequest.AsObject;
  static toObject(includeInstance: boolean, msg: VerifyEmailRequest): VerifyEmailRequest.AsObject;
  static serializeBinaryToWriter(message: VerifyEmailRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VerifyEmailRequest;
  static deserializeBinaryFromReader(message: VerifyEmailRequest, reader: jspb.BinaryReader): VerifyEmailRequest;
}

export namespace VerifyEmailRequest {
  export type AsObject = {
    otpId: string,
    otp: string,
  }
}

export class VerifyEmailReply extends jspb.Message {
  getUser(): UserInfo | undefined;
  setUser(value?: UserInfo): VerifyEmailReply;
  hasUser(): boolean;
  clearUser(): VerifyEmailReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VerifyEmailReply.AsObject;
  static toObject(includeInstance: boolean, msg: VerifyEmailReply): VerifyEmailReply.AsObject;
  static serializeBinaryToWriter(message: VerifyEmailReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VerifyEmailReply;
  static deserializeBinaryFromReader(message: VerifyEmailReply, reader: jspb.BinaryReader): VerifyEmailReply;
}

export namespace VerifyEmailReply {
  export type AsObject = {
    user?: UserInfo.AsObject,
  }
}

export class UpdatePhoneNumberRequest extends jspb.Message {
  getPhoneNumber(): string;
  setPhoneNumber(value: string): UpdatePhoneNumberRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdatePhoneNumberRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UpdatePhoneNumberRequest): UpdatePhoneNumberRequest.AsObject;
  static serializeBinaryToWriter(message: UpdatePhoneNumberRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdatePhoneNumberRequest;
  static deserializeBinaryFromReader(message: UpdatePhoneNumberRequest, reader: jspb.BinaryReader): UpdatePhoneNumberRequest;
}

export namespace UpdatePhoneNumberRequest {
  export type AsObject = {
    phoneNumber: string,
  }
}

export class UpdatePhoneNumberV2Request extends jspb.Message {
  getPhoneNumber(): PhoneNumber | undefined;
  setPhoneNumber(value?: PhoneNumber): UpdatePhoneNumberV2Request;
  hasPhoneNumber(): boolean;
  clearPhoneNumber(): UpdatePhoneNumberV2Request;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdatePhoneNumberV2Request.AsObject;
  static toObject(includeInstance: boolean, msg: UpdatePhoneNumberV2Request): UpdatePhoneNumberV2Request.AsObject;
  static serializeBinaryToWriter(message: UpdatePhoneNumberV2Request, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdatePhoneNumberV2Request;
  static deserializeBinaryFromReader(message: UpdatePhoneNumberV2Request, reader: jspb.BinaryReader): UpdatePhoneNumberV2Request;
}

export namespace UpdatePhoneNumberV2Request {
  export type AsObject = {
    phoneNumber?: PhoneNumber.AsObject,
  }
}

export class UpdatePhoneNumberReply extends jspb.Message {
  getOtp(): OTP | undefined;
  setOtp(value?: OTP): UpdatePhoneNumberReply;
  hasOtp(): boolean;
  clearOtp(): UpdatePhoneNumberReply;

  getUser(): UserInfo | undefined;
  setUser(value?: UserInfo): UpdatePhoneNumberReply;
  hasUser(): boolean;
  clearUser(): UpdatePhoneNumberReply;

  getResultCase(): UpdatePhoneNumberReply.ResultCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdatePhoneNumberReply.AsObject;
  static toObject(includeInstance: boolean, msg: UpdatePhoneNumberReply): UpdatePhoneNumberReply.AsObject;
  static serializeBinaryToWriter(message: UpdatePhoneNumberReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdatePhoneNumberReply;
  static deserializeBinaryFromReader(message: UpdatePhoneNumberReply, reader: jspb.BinaryReader): UpdatePhoneNumberReply;
}

export namespace UpdatePhoneNumberReply {
  export type AsObject = {
    otp?: OTP.AsObject,
    user?: UserInfo.AsObject,
  }

  export enum ResultCase { 
    RESULT_NOT_SET = 0,
    OTP = 1,
    USER = 2,
  }
}

export class VerifyPhoneNumberRequest extends jspb.Message {
  getOtpId(): string;
  setOtpId(value: string): VerifyPhoneNumberRequest;

  getOtp(): string;
  setOtp(value: string): VerifyPhoneNumberRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VerifyPhoneNumberRequest.AsObject;
  static toObject(includeInstance: boolean, msg: VerifyPhoneNumberRequest): VerifyPhoneNumberRequest.AsObject;
  static serializeBinaryToWriter(message: VerifyPhoneNumberRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VerifyPhoneNumberRequest;
  static deserializeBinaryFromReader(message: VerifyPhoneNumberRequest, reader: jspb.BinaryReader): VerifyPhoneNumberRequest;
}

export namespace VerifyPhoneNumberRequest {
  export type AsObject = {
    otpId: string,
    otp: string,
  }
}

export class VerifyPhoneNumberReply extends jspb.Message {
  getUser(): UserInfo | undefined;
  setUser(value?: UserInfo): VerifyPhoneNumberReply;
  hasUser(): boolean;
  clearUser(): VerifyPhoneNumberReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VerifyPhoneNumberReply.AsObject;
  static toObject(includeInstance: boolean, msg: VerifyPhoneNumberReply): VerifyPhoneNumberReply.AsObject;
  static serializeBinaryToWriter(message: VerifyPhoneNumberReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VerifyPhoneNumberReply;
  static deserializeBinaryFromReader(message: VerifyPhoneNumberReply, reader: jspb.BinaryReader): VerifyPhoneNumberReply;
}

export namespace VerifyPhoneNumberReply {
  export type AsObject = {
    user?: UserInfo.AsObject,
  }
}

export class ResetPasswordRequest extends jspb.Message {
  getEmail(): string;
  setEmail(value: string): ResetPasswordRequest;

  getPhoneNumber(): string;
  setPhoneNumber(value: string): ResetPasswordRequest;

  getCaptcha(): Captcha | undefined;
  setCaptcha(value?: Captcha): ResetPasswordRequest;
  hasCaptcha(): boolean;
  clearCaptcha(): ResetPasswordRequest;

  getByCase(): ResetPasswordRequest.ByCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ResetPasswordRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ResetPasswordRequest): ResetPasswordRequest.AsObject;
  static serializeBinaryToWriter(message: ResetPasswordRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResetPasswordRequest;
  static deserializeBinaryFromReader(message: ResetPasswordRequest, reader: jspb.BinaryReader): ResetPasswordRequest;
}

export namespace ResetPasswordRequest {
  export type AsObject = {
    email: string,
    phoneNumber: string,
    captcha?: Captcha.AsObject,
  }

  export enum ByCase { 
    BY_NOT_SET = 0,
    EMAIL = 1,
    PHONE_NUMBER = 2,
  }
}

export class ResetPasswordV2Request extends jspb.Message {
  getCaptcha(): Captcha | undefined;
  setCaptcha(value?: Captcha): ResetPasswordV2Request;
  hasCaptcha(): boolean;
  clearCaptcha(): ResetPasswordV2Request;

  getEmail(): string;
  setEmail(value: string): ResetPasswordV2Request;

  getPhoneNumber(): PhoneNumber | undefined;
  setPhoneNumber(value?: PhoneNumber): ResetPasswordV2Request;
  hasPhoneNumber(): boolean;
  clearPhoneNumber(): ResetPasswordV2Request;

  getByCase(): ResetPasswordV2Request.ByCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ResetPasswordV2Request.AsObject;
  static toObject(includeInstance: boolean, msg: ResetPasswordV2Request): ResetPasswordV2Request.AsObject;
  static serializeBinaryToWriter(message: ResetPasswordV2Request, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResetPasswordV2Request;
  static deserializeBinaryFromReader(message: ResetPasswordV2Request, reader: jspb.BinaryReader): ResetPasswordV2Request;
}

export namespace ResetPasswordV2Request {
  export type AsObject = {
    captcha?: Captcha.AsObject,
    email: string,
    phoneNumber?: PhoneNumber.AsObject,
  }

  export enum ByCase { 
    BY_NOT_SET = 0,
    EMAIL = 2,
    PHONE_NUMBER = 3,
  }
}

export class ResetPasswordReply extends jspb.Message {
  getOtp(): OTP | undefined;
  setOtp(value?: OTP): ResetPasswordReply;
  hasOtp(): boolean;
  clearOtp(): ResetPasswordReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ResetPasswordReply.AsObject;
  static toObject(includeInstance: boolean, msg: ResetPasswordReply): ResetPasswordReply.AsObject;
  static serializeBinaryToWriter(message: ResetPasswordReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResetPasswordReply;
  static deserializeBinaryFromReader(message: ResetPasswordReply, reader: jspb.BinaryReader): ResetPasswordReply;
}

export namespace ResetPasswordReply {
  export type AsObject = {
    otp?: OTP.AsObject,
  }
}

export class VerifyResetPasswordRequest extends jspb.Message {
  getOtpId(): string;
  setOtpId(value: string): VerifyResetPasswordRequest;

  getOtp(): string;
  setOtp(value: string): VerifyResetPasswordRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VerifyResetPasswordRequest.AsObject;
  static toObject(includeInstance: boolean, msg: VerifyResetPasswordRequest): VerifyResetPasswordRequest.AsObject;
  static serializeBinaryToWriter(message: VerifyResetPasswordRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VerifyResetPasswordRequest;
  static deserializeBinaryFromReader(message: VerifyResetPasswordRequest, reader: jspb.BinaryReader): VerifyResetPasswordRequest;
}

export namespace VerifyResetPasswordRequest {
  export type AsObject = {
    otpId: string,
    otp: string,
  }
}

export class SubmitResetPasswordRequest extends jspb.Message {
  getOtpId(): string;
  setOtpId(value: string): SubmitResetPasswordRequest;

  getOtp(): string;
  setOtp(value: string): SubmitResetPasswordRequest;

  getNewPassword(): string;
  setNewPassword(value: string): SubmitResetPasswordRequest;

  getConfirmNewPassword(): string;
  setConfirmNewPassword(value: string): SubmitResetPasswordRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubmitResetPasswordRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SubmitResetPasswordRequest): SubmitResetPasswordRequest.AsObject;
  static serializeBinaryToWriter(message: SubmitResetPasswordRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubmitResetPasswordRequest;
  static deserializeBinaryFromReader(message: SubmitResetPasswordRequest, reader: jspb.BinaryReader): SubmitResetPasswordRequest;
}

export namespace SubmitResetPasswordRequest {
  export type AsObject = {
    otpId: string,
    otp: string,
    newPassword: string,
    confirmNewPassword: string,
  }
}

export class UserInfo extends jspb.Message {
  getSafeId(): string;
  setSafeId(value: string): UserInfo;

  getUsername(): string;
  setUsername(value: string): UserInfo;

  getEmail(): string;
  setEmail(value: string): UserInfo;

  getPhoneNumber(): string;
  setPhoneNumber(value: string): UserInfo;

  getMetadata(): string;
  setMetadata(value: string): UserInfo;

  getRolesList(): Array<Role>;
  setRolesList(value: Array<Role>): UserInfo;
  clearRolesList(): UserInfo;
  addRoles(value?: Role, index?: number): Role;

  getStatus(): Status;
  setStatus(value: Status): UserInfo;

  getLastSignedIn(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setLastSignedIn(value?: google_protobuf_timestamp_pb.Timestamp): UserInfo;
  hasLastSignedIn(): boolean;
  clearLastSignedIn(): UserInfo;

  getCreatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setCreatedAt(value?: google_protobuf_timestamp_pb.Timestamp): UserInfo;
  hasCreatedAt(): boolean;
  clearCreatedAt(): UserInfo;

  getUpdatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setUpdatedAt(value?: google_protobuf_timestamp_pb.Timestamp): UserInfo;
  hasUpdatedAt(): boolean;
  clearUpdatedAt(): UserInfo;

  getCredentialsList(): Array<Credential>;
  setCredentialsList(value: Array<Credential>): UserInfo;
  clearCredentialsList(): UserInfo;
  addCredentials(value?: Credential, index?: number): Credential;

  getPhone(): PhoneNumber | undefined;
  setPhone(value?: PhoneNumber): UserInfo;
  hasPhone(): boolean;
  clearPhone(): UserInfo;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UserInfo.AsObject;
  static toObject(includeInstance: boolean, msg: UserInfo): UserInfo.AsObject;
  static serializeBinaryToWriter(message: UserInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UserInfo;
  static deserializeBinaryFromReader(message: UserInfo, reader: jspb.BinaryReader): UserInfo;
}

export namespace UserInfo {
  export type AsObject = {
    safeId: string,
    username: string,
    email: string,
    phoneNumber: string,
    metadata: string,
    rolesList: Array<Role.AsObject>,
    status: Status,
    lastSignedIn?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    createdAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    updatedAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    credentialsList: Array<Credential.AsObject>,
    phone?: PhoneNumber.AsObject,
  }
}

export class TokenInfo extends jspb.Message {
  getUserId(): number;
  setUserId(value: number): TokenInfo;

  getSafeId(): string;
  setSafeId(value: string): TokenInfo;

  getUsername(): string;
  setUsername(value: string): TokenInfo;

  getIdToken(): string;
  setIdToken(value: string): TokenInfo;

  getAccessToken(): string;
  setAccessToken(value: string): TokenInfo;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TokenInfo.AsObject;
  static toObject(includeInstance: boolean, msg: TokenInfo): TokenInfo.AsObject;
  static serializeBinaryToWriter(message: TokenInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TokenInfo;
  static deserializeBinaryFromReader(message: TokenInfo, reader: jspb.BinaryReader): TokenInfo;
}

export namespace TokenInfo {
  export type AsObject = {
    userId: number,
    safeId: string,
    username: string,
    idToken: string,
    accessToken: string,
  }
}

export class OTP extends jspb.Message {
  getWaiting(): number;
  setWaiting(value: number): OTP;

  getSuccess(): OTP.Info | undefined;
  setSuccess(value?: OTP.Info): OTP;
  hasSuccess(): boolean;
  clearSuccess(): OTP;

  getResultCase(): OTP.ResultCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OTP.AsObject;
  static toObject(includeInstance: boolean, msg: OTP): OTP.AsObject;
  static serializeBinaryToWriter(message: OTP, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OTP;
  static deserializeBinaryFromReader(message: OTP, reader: jspb.BinaryReader): OTP;
}

export namespace OTP {
  export type AsObject = {
    waiting: number,
    success?: OTP.Info.AsObject,
  }

  export class Info extends jspb.Message {
    getId(): string;
    setId(value: string): Info;

    getRecipient(): string;
    setRecipient(value: string): Info;

    getExpiry(): number;
    setExpiry(value: number): Info;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Info.AsObject;
    static toObject(includeInstance: boolean, msg: Info): Info.AsObject;
    static serializeBinaryToWriter(message: Info, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Info;
    static deserializeBinaryFromReader(message: Info, reader: jspb.BinaryReader): Info;
  }

  export namespace Info {
    export type AsObject = {
      id: string,
      recipient: string,
      expiry: number,
    }
  }


  export enum ResultCase { 
    RESULT_NOT_SET = 0,
    WAITING = 1,
    SUCCESS = 2,
  }
}

export class Captcha extends jspb.Message {
  getId(): string;
  setId(value: string): Captcha;

  getCode(): string;
  setCode(value: string): Captcha;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Captcha.AsObject;
  static toObject(includeInstance: boolean, msg: Captcha): Captcha.AsObject;
  static serializeBinaryToWriter(message: Captcha, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Captcha;
  static deserializeBinaryFromReader(message: Captcha, reader: jspb.BinaryReader): Captcha;
}

export namespace Captcha {
  export type AsObject = {
    id: string,
    code: string,
  }
}

export class CreateUserRequest extends jspb.Message {
  getUsername(): string;
  setUsername(value: string): CreateUserRequest;

  getEmail(): string;
  setEmail(value: string): CreateUserRequest;

  getPhoneNumber(): PhoneNumber | undefined;
  setPhoneNumber(value?: PhoneNumber): CreateUserRequest;
  hasPhoneNumber(): boolean;
  clearPhoneNumber(): CreateUserRequest;

  getMetadata(): string;
  setMetadata(value: string): CreateUserRequest;

  getRolesList(): Array<Role>;
  setRolesList(value: Array<Role>): CreateUserRequest;
  clearRolesList(): CreateUserRequest;
  addRoles(value?: Role, index?: number): Role;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateUserRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateUserRequest): CreateUserRequest.AsObject;
  static serializeBinaryToWriter(message: CreateUserRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateUserRequest;
  static deserializeBinaryFromReader(message: CreateUserRequest, reader: jspb.BinaryReader): CreateUserRequest;
}

export namespace CreateUserRequest {
  export type AsObject = {
    username: string,
    email: string,
    phoneNumber?: PhoneNumber.AsObject,
    metadata: string,
    rolesList: Array<Role.AsObject>,
  }
}

export class CreateUserReply extends jspb.Message {
  getUser(): User | undefined;
  setUser(value?: User): CreateUserReply;
  hasUser(): boolean;
  clearUser(): CreateUserReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateUserReply.AsObject;
  static toObject(includeInstance: boolean, msg: CreateUserReply): CreateUserReply.AsObject;
  static serializeBinaryToWriter(message: CreateUserReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateUserReply;
  static deserializeBinaryFromReader(message: CreateUserReply, reader: jspb.BinaryReader): CreateUserReply;
}

export namespace CreateUserReply {
  export type AsObject = {
    user?: User.AsObject,
  }
}

export class ListUsersRequest extends jspb.Message {
  getQuery(): string;
  setQuery(value: string): ListUsersRequest;

  getGroupIdsList(): Array<number>;
  setGroupIdsList(value: Array<number>): ListUsersRequest;
  clearGroupIdsList(): ListUsersRequest;
  addGroupIds(value: number, index?: number): ListUsersRequest;

  getRoleIdsList(): Array<number>;
  setRoleIdsList(value: Array<number>): ListUsersRequest;
  clearRoleIdsList(): ListUsersRequest;
  addRoleIds(value: number, index?: number): ListUsersRequest;

  getStatusesList(): Array<Status>;
  setStatusesList(value: Array<Status>): ListUsersRequest;
  clearStatusesList(): ListUsersRequest;
  addStatuses(value: Status, index?: number): ListUsersRequest;

  getUserId(): number;
  setUserId(value: number): ListUsersRequest;

  getUsername(): string;
  setUsername(value: string): ListUsersRequest;

  getEmail(): string;
  setEmail(value: string): ListUsersRequest;

  getPhoneNumber(): string;
  setPhoneNumber(value: string): ListUsersRequest;

  getLimit(): number;
  setLimit(value: number): ListUsersRequest;

  getCursor(): number;
  setCursor(value: number): ListUsersRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListUsersRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListUsersRequest): ListUsersRequest.AsObject;
  static serializeBinaryToWriter(message: ListUsersRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListUsersRequest;
  static deserializeBinaryFromReader(message: ListUsersRequest, reader: jspb.BinaryReader): ListUsersRequest;
}

export namespace ListUsersRequest {
  export type AsObject = {
    query: string,
    groupIdsList: Array<number>,
    roleIdsList: Array<number>,
    statusesList: Array<Status>,
    userId: number,
    username: string,
    email: string,
    phoneNumber: string,
    limit: number,
    cursor: number,
  }
}

export class ListUsersReply extends jspb.Message {
  getUsersList(): Array<User>;
  setUsersList(value: Array<User>): ListUsersReply;
  clearUsersList(): ListUsersReply;
  addUsers(value?: User, index?: number): User;

  getNextCursor(): number;
  setNextCursor(value: number): ListUsersReply;

  getHasMore(): boolean;
  setHasMore(value: boolean): ListUsersReply;

  getTotal(): number;
  setTotal(value: number): ListUsersReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListUsersReply.AsObject;
  static toObject(includeInstance: boolean, msg: ListUsersReply): ListUsersReply.AsObject;
  static serializeBinaryToWriter(message: ListUsersReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListUsersReply;
  static deserializeBinaryFromReader(message: ListUsersReply, reader: jspb.BinaryReader): ListUsersReply;
}

export namespace ListUsersReply {
  export type AsObject = {
    usersList: Array<User.AsObject>,
    nextCursor: number,
    hasMore: boolean,
    total: number,
  }
}

export class UpdateUserRequest extends jspb.Message {
  getId(): number;
  setId(value: number): UpdateUserRequest;

  getChangesList(): Array<UserChange>;
  setChangesList(value: Array<UserChange>): UpdateUserRequest;
  clearChangesList(): UpdateUserRequest;
  addChanges(value?: UserChange, index?: number): UserChange;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateUserRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateUserRequest): UpdateUserRequest.AsObject;
  static serializeBinaryToWriter(message: UpdateUserRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateUserRequest;
  static deserializeBinaryFromReader(message: UpdateUserRequest, reader: jspb.BinaryReader): UpdateUserRequest;
}

export namespace UpdateUserRequest {
  export type AsObject = {
    id: number,
    changesList: Array<UserChange.AsObject>,
  }
}

export class UpdateUserReply extends jspb.Message {
  getUser(): User | undefined;
  setUser(value?: User): UpdateUserReply;
  hasUser(): boolean;
  clearUser(): UpdateUserReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateUserReply.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateUserReply): UpdateUserReply.AsObject;
  static serializeBinaryToWriter(message: UpdateUserReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateUserReply;
  static deserializeBinaryFromReader(message: UpdateUserReply, reader: jspb.BinaryReader): UpdateUserReply;
}

export namespace UpdateUserReply {
  export type AsObject = {
    user?: User.AsObject,
  }
}

export class LockUserRequest extends jspb.Message {
  getId(): number;
  setId(value: number): LockUserRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LockUserRequest.AsObject;
  static toObject(includeInstance: boolean, msg: LockUserRequest): LockUserRequest.AsObject;
  static serializeBinaryToWriter(message: LockUserRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LockUserRequest;
  static deserializeBinaryFromReader(message: LockUserRequest, reader: jspb.BinaryReader): LockUserRequest;
}

export namespace LockUserRequest {
  export type AsObject = {
    id: number,
  }
}

export class LockUserReply extends jspb.Message {
  getUser(): User | undefined;
  setUser(value?: User): LockUserReply;
  hasUser(): boolean;
  clearUser(): LockUserReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LockUserReply.AsObject;
  static toObject(includeInstance: boolean, msg: LockUserReply): LockUserReply.AsObject;
  static serializeBinaryToWriter(message: LockUserReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LockUserReply;
  static deserializeBinaryFromReader(message: LockUserReply, reader: jspb.BinaryReader): LockUserReply;
}

export namespace LockUserReply {
  export type AsObject = {
    user?: User.AsObject,
  }
}

export class UnlockUserRequest extends jspb.Message {
  getId(): number;
  setId(value: number): UnlockUserRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UnlockUserRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UnlockUserRequest): UnlockUserRequest.AsObject;
  static serializeBinaryToWriter(message: UnlockUserRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UnlockUserRequest;
  static deserializeBinaryFromReader(message: UnlockUserRequest, reader: jspb.BinaryReader): UnlockUserRequest;
}

export namespace UnlockUserRequest {
  export type AsObject = {
    id: number,
  }
}

export class UnlockUserReply extends jspb.Message {
  getUser(): User | undefined;
  setUser(value?: User): UnlockUserReply;
  hasUser(): boolean;
  clearUser(): UnlockUserReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UnlockUserReply.AsObject;
  static toObject(includeInstance: boolean, msg: UnlockUserReply): UnlockUserReply.AsObject;
  static serializeBinaryToWriter(message: UnlockUserReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UnlockUserReply;
  static deserializeBinaryFromReader(message: UnlockUserReply, reader: jspb.BinaryReader): UnlockUserReply;
}

export namespace UnlockUserReply {
  export type AsObject = {
    user?: User.AsObject,
  }
}

export class BanUserRequest extends jspb.Message {
  getId(): number;
  setId(value: number): BanUserRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BanUserRequest.AsObject;
  static toObject(includeInstance: boolean, msg: BanUserRequest): BanUserRequest.AsObject;
  static serializeBinaryToWriter(message: BanUserRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BanUserRequest;
  static deserializeBinaryFromReader(message: BanUserRequest, reader: jspb.BinaryReader): BanUserRequest;
}

export namespace BanUserRequest {
  export type AsObject = {
    id: number,
  }
}

export class BanUserReply extends jspb.Message {
  getUser(): User | undefined;
  setUser(value?: User): BanUserReply;
  hasUser(): boolean;
  clearUser(): BanUserReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BanUserReply.AsObject;
  static toObject(includeInstance: boolean, msg: BanUserReply): BanUserReply.AsObject;
  static serializeBinaryToWriter(message: BanUserReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BanUserReply;
  static deserializeBinaryFromReader(message: BanUserReply, reader: jspb.BinaryReader): BanUserReply;
}

export namespace BanUserReply {
  export type AsObject = {
    user?: User.AsObject,
  }
}

export class UnbanUserRequest extends jspb.Message {
  getId(): number;
  setId(value: number): UnbanUserRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UnbanUserRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UnbanUserRequest): UnbanUserRequest.AsObject;
  static serializeBinaryToWriter(message: UnbanUserRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UnbanUserRequest;
  static deserializeBinaryFromReader(message: UnbanUserRequest, reader: jspb.BinaryReader): UnbanUserRequest;
}

export namespace UnbanUserRequest {
  export type AsObject = {
    id: number,
  }
}

export class UnbanUserReply extends jspb.Message {
  getUser(): User | undefined;
  setUser(value?: User): UnbanUserReply;
  hasUser(): boolean;
  clearUser(): UnbanUserReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UnbanUserReply.AsObject;
  static toObject(includeInstance: boolean, msg: UnbanUserReply): UnbanUserReply.AsObject;
  static serializeBinaryToWriter(message: UnbanUserReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UnbanUserReply;
  static deserializeBinaryFromReader(message: UnbanUserReply, reader: jspb.BinaryReader): UnbanUserReply;
}

export namespace UnbanUserReply {
  export type AsObject = {
    user?: User.AsObject,
  }
}

export class GetUserRequest extends jspb.Message {
  getId(): number;
  setId(value: number): GetUserRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetUserRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetUserRequest): GetUserRequest.AsObject;
  static serializeBinaryToWriter(message: GetUserRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetUserRequest;
  static deserializeBinaryFromReader(message: GetUserRequest, reader: jspb.BinaryReader): GetUserRequest;
}

export namespace GetUserRequest {
  export type AsObject = {
    id: number,
  }
}

export class GetUserReply extends jspb.Message {
  getUser(): User | undefined;
  setUser(value?: User): GetUserReply;
  hasUser(): boolean;
  clearUser(): GetUserReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetUserReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetUserReply): GetUserReply.AsObject;
  static serializeBinaryToWriter(message: GetUserReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetUserReply;
  static deserializeBinaryFromReader(message: GetUserReply, reader: jspb.BinaryReader): GetUserReply;
}

export namespace GetUserReply {
  export type AsObject = {
    user?: User.AsObject,
  }
}

export class ResendCreatePasswordOTPRequest extends jspb.Message {
  getUserId(): number;
  setUserId(value: number): ResendCreatePasswordOTPRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ResendCreatePasswordOTPRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ResendCreatePasswordOTPRequest): ResendCreatePasswordOTPRequest.AsObject;
  static serializeBinaryToWriter(message: ResendCreatePasswordOTPRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResendCreatePasswordOTPRequest;
  static deserializeBinaryFromReader(message: ResendCreatePasswordOTPRequest, reader: jspb.BinaryReader): ResendCreatePasswordOTPRequest;
}

export namespace ResendCreatePasswordOTPRequest {
  export type AsObject = {
    userId: number,
  }
}

export class ResendCreatePasswordOTPReply extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ResendCreatePasswordOTPReply.AsObject;
  static toObject(includeInstance: boolean, msg: ResendCreatePasswordOTPReply): ResendCreatePasswordOTPReply.AsObject;
  static serializeBinaryToWriter(message: ResendCreatePasswordOTPReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResendCreatePasswordOTPReply;
  static deserializeBinaryFromReader(message: ResendCreatePasswordOTPReply, reader: jspb.BinaryReader): ResendCreatePasswordOTPReply;
}

export namespace ResendCreatePasswordOTPReply {
  export type AsObject = {
  }
}

export class GetUsersRequest extends jspb.Message {
  getUserIdsList(): Array<number>;
  setUserIdsList(value: Array<number>): GetUsersRequest;
  clearUserIdsList(): GetUsersRequest;
  addUserIds(value: number, index?: number): GetUsersRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetUsersRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetUsersRequest): GetUsersRequest.AsObject;
  static serializeBinaryToWriter(message: GetUsersRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetUsersRequest;
  static deserializeBinaryFromReader(message: GetUsersRequest, reader: jspb.BinaryReader): GetUsersRequest;
}

export namespace GetUsersRequest {
  export type AsObject = {
    userIdsList: Array<number>,
  }
}

export class GetUsersReply extends jspb.Message {
  getUsersList(): Array<User>;
  setUsersList(value: Array<User>): GetUsersReply;
  clearUsersList(): GetUsersReply;
  addUsers(value?: User, index?: number): User;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetUsersReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetUsersReply): GetUsersReply.AsObject;
  static serializeBinaryToWriter(message: GetUsersReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetUsersReply;
  static deserializeBinaryFromReader(message: GetUsersReply, reader: jspb.BinaryReader): GetUsersReply;
}

export namespace GetUsersReply {
  export type AsObject = {
    usersList: Array<User.AsObject>,
  }
}

export class GetUserIDsRequest extends jspb.Message {
  getSafeIdsList(): Array<string>;
  setSafeIdsList(value: Array<string>): GetUserIDsRequest;
  clearSafeIdsList(): GetUserIDsRequest;
  addSafeIds(value: string, index?: number): GetUserIDsRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetUserIDsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetUserIDsRequest): GetUserIDsRequest.AsObject;
  static serializeBinaryToWriter(message: GetUserIDsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetUserIDsRequest;
  static deserializeBinaryFromReader(message: GetUserIDsRequest, reader: jspb.BinaryReader): GetUserIDsRequest;
}

export namespace GetUserIDsRequest {
  export type AsObject = {
    safeIdsList: Array<string>,
  }
}

export class GetUserIDsReply extends jspb.Message {
  getUserIdsMap(): jspb.Map<string, number>;
  clearUserIdsMap(): GetUserIDsReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetUserIDsReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetUserIDsReply): GetUserIDsReply.AsObject;
  static serializeBinaryToWriter(message: GetUserIDsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetUserIDsReply;
  static deserializeBinaryFromReader(message: GetUserIDsReply, reader: jspb.BinaryReader): GetUserIDsReply;
}

export namespace GetUserIDsReply {
  export type AsObject = {
    userIdsMap: Array<[string, number]>,
  }
}

export class GetUsersByUsernameRequest extends jspb.Message {
  getUsernamesList(): Array<string>;
  setUsernamesList(value: Array<string>): GetUsersByUsernameRequest;
  clearUsernamesList(): GetUsersByUsernameRequest;
  addUsernames(value: string, index?: number): GetUsersByUsernameRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetUsersByUsernameRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetUsersByUsernameRequest): GetUsersByUsernameRequest.AsObject;
  static serializeBinaryToWriter(message: GetUsersByUsernameRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetUsersByUsernameRequest;
  static deserializeBinaryFromReader(message: GetUsersByUsernameRequest, reader: jspb.BinaryReader): GetUsersByUsernameRequest;
}

export namespace GetUsersByUsernameRequest {
  export type AsObject = {
    usernamesList: Array<string>,
  }
}

export class GetUsersByUsernameReply extends jspb.Message {
  getUsersMap(): jspb.Map<string, User>;
  clearUsersMap(): GetUsersByUsernameReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetUsersByUsernameReply.AsObject;
  static toObject(includeInstance: boolean, msg: GetUsersByUsernameReply): GetUsersByUsernameReply.AsObject;
  static serializeBinaryToWriter(message: GetUsersByUsernameReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetUsersByUsernameReply;
  static deserializeBinaryFromReader(message: GetUsersByUsernameReply, reader: jspb.BinaryReader): GetUsersByUsernameReply;
}

export namespace GetUsersByUsernameReply {
  export type AsObject = {
    usersMap: Array<[string, User.AsObject]>,
  }
}

export class User extends jspb.Message {
  getUserId(): number;
  setUserId(value: number): User;

  getSafeId(): string;
  setSafeId(value: string): User;

  getUsername(): string;
  setUsername(value: string): User;

  getEmail(): string;
  setEmail(value: string): User;

  getPhoneNumber(): string;
  setPhoneNumber(value: string): User;

  getRolesList(): Array<Role>;
  setRolesList(value: Array<Role>): User;
  clearRolesList(): User;
  addRoles(value?: Role, index?: number): Role;

  getMetadata(): string;
  setMetadata(value: string): User;

  getStatus(): Status;
  setStatus(value: Status): User;

  getUniversalId(): string;
  setUniversalId(value: string): User;

  getCreatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setCreatedAt(value?: google_protobuf_timestamp_pb.Timestamp): User;
  hasCreatedAt(): boolean;
  clearCreatedAt(): User;

  getLastSignedIn(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setLastSignedIn(value?: google_protobuf_timestamp_pb.Timestamp): User;
  hasLastSignedIn(): boolean;
  clearLastSignedIn(): User;

  getUpdatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setUpdatedAt(value?: google_protobuf_timestamp_pb.Timestamp): User;
  hasUpdatedAt(): boolean;
  clearUpdatedAt(): User;

  getCredentialsList(): Array<Credential>;
  setCredentialsList(value: Array<Credential>): User;
  clearCredentialsList(): User;
  addCredentials(value?: Credential, index?: number): Credential;

  getPhone(): PhoneNumber | undefined;
  setPhone(value?: PhoneNumber): User;
  hasPhone(): boolean;
  clearPhone(): User;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): User.AsObject;
  static toObject(includeInstance: boolean, msg: User): User.AsObject;
  static serializeBinaryToWriter(message: User, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): User;
  static deserializeBinaryFromReader(message: User, reader: jspb.BinaryReader): User;
}

export namespace User {
  export type AsObject = {
    userId: number,
    safeId: string,
    username: string,
    email: string,
    phoneNumber: string,
    rolesList: Array<Role.AsObject>,
    metadata: string,
    status: Status,
    universalId: string,
    createdAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    lastSignedIn?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    updatedAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    credentialsList: Array<Credential.AsObject>,
    phone?: PhoneNumber.AsObject,
  }
}

export class PhoneNumber extends jspb.Message {
  getCountryCode(): string;
  setCountryCode(value: string): PhoneNumber;

  getNationalNumber(): string;
  setNationalNumber(value: string): PhoneNumber;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PhoneNumber.AsObject;
  static toObject(includeInstance: boolean, msg: PhoneNumber): PhoneNumber.AsObject;
  static serializeBinaryToWriter(message: PhoneNumber, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PhoneNumber;
  static deserializeBinaryFromReader(message: PhoneNumber, reader: jspb.BinaryReader): PhoneNumber;
}

export namespace PhoneNumber {
  export type AsObject = {
    countryCode: string,
    nationalNumber: string,
  }
}

export class Role extends jspb.Message {
  getGroupId(): number;
  setGroupId(value: number): Role;

  getRoleId(): number;
  setRoleId(value: number): Role;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Role.AsObject;
  static toObject(includeInstance: boolean, msg: Role): Role.AsObject;
  static serializeBinaryToWriter(message: Role, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Role;
  static deserializeBinaryFromReader(message: Role, reader: jspb.BinaryReader): Role;
}

export namespace Role {
  export type AsObject = {
    groupId: number,
    roleId: number,
  }
}

export class Roles extends jspb.Message {
  getRolesList(): Array<Role>;
  setRolesList(value: Array<Role>): Roles;
  clearRolesList(): Roles;
  addRoles(value?: Role, index?: number): Role;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Roles.AsObject;
  static toObject(includeInstance: boolean, msg: Roles): Roles.AsObject;
  static serializeBinaryToWriter(message: Roles, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Roles;
  static deserializeBinaryFromReader(message: Roles, reader: jspb.BinaryReader): Roles;
}

export namespace Roles {
  export type AsObject = {
    rolesList: Array<Role.AsObject>,
  }
}

export class UserChange extends jspb.Message {
  getEmail(): string;
  setEmail(value: string): UserChange;

  getPhoneNumber(): PhoneNumber | undefined;
  setPhoneNumber(value?: PhoneNumber): UserChange;
  hasPhoneNumber(): boolean;
  clearPhoneNumber(): UserChange;

  getRoles(): Roles | undefined;
  setRoles(value?: Roles): UserChange;
  hasRoles(): boolean;
  clearRoles(): UserChange;

  getMetadata(): string;
  setMetadata(value: string): UserChange;

  getFieldCase(): UserChange.FieldCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UserChange.AsObject;
  static toObject(includeInstance: boolean, msg: UserChange): UserChange.AsObject;
  static serializeBinaryToWriter(message: UserChange, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UserChange;
  static deserializeBinaryFromReader(message: UserChange, reader: jspb.BinaryReader): UserChange;
}

export namespace UserChange {
  export type AsObject = {
    email: string,
    phoneNumber?: PhoneNumber.AsObject,
    roles?: Roles.AsObject,
    metadata: string,
  }

  export enum FieldCase { 
    FIELD_NOT_SET = 0,
    EMAIL = 1,
    PHONE_NUMBER = 2,
    ROLES = 3,
    METADATA = 4,
  }
}

export class Permission extends jspb.Message {
  getActionsList(): Array<Action>;
  setActionsList(value: Array<Action>): Permission;
  clearActionsList(): Permission;
  addActions(value?: Action, index?: number): Action;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Permission.AsObject;
  static toObject(includeInstance: boolean, msg: Permission): Permission.AsObject;
  static serializeBinaryToWriter(message: Permission, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Permission;
  static deserializeBinaryFromReader(message: Permission, reader: jspb.BinaryReader): Permission;
}

export namespace Permission {
  export type AsObject = {
    actionsList: Array<Action.AsObject>,
  }
}

export class Resource extends jspb.Message {
  getId(): number;
  setId(value: number): Resource;

  getName(): string;
  setName(value: string): Resource;

  getDescription(): string;
  setDescription(value: string): Resource;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Resource.AsObject;
  static toObject(includeInstance: boolean, msg: Resource): Resource.AsObject;
  static serializeBinaryToWriter(message: Resource, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Resource;
  static deserializeBinaryFromReader(message: Resource, reader: jspb.BinaryReader): Resource;
}

export namespace Resource {
  export type AsObject = {
    id: number,
    name: string,
    description: string,
  }
}

export class Action extends jspb.Message {
  getId(): number;
  setId(value: number): Action;

  getName(): string;
  setName(value: string): Action;

  getDescription(): string;
  setDescription(value: string): Action;

  getResource(): Resource | undefined;
  setResource(value?: Resource): Action;
  hasResource(): boolean;
  clearResource(): Action;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Action.AsObject;
  static toObject(includeInstance: boolean, msg: Action): Action.AsObject;
  static serializeBinaryToWriter(message: Action, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Action;
  static deserializeBinaryFromReader(message: Action, reader: jspb.BinaryReader): Action;
}

export namespace Action {
  export type AsObject = {
    id: number,
    name: string,
    description: string,
    resource?: Resource.AsObject,
  }
}

export class ResetResendOTPRequest extends jspb.Message {
  getId(): number;
  setId(value: number): ResetResendOTPRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ResetResendOTPRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ResetResendOTPRequest): ResetResendOTPRequest.AsObject;
  static serializeBinaryToWriter(message: ResetResendOTPRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResetResendOTPRequest;
  static deserializeBinaryFromReader(message: ResetResendOTPRequest, reader: jspb.BinaryReader): ResetResendOTPRequest;
}

export namespace ResetResendOTPRequest {
  export type AsObject = {
    id: number,
  }
}

export class ResetResendOTPReply extends jspb.Message {
  getUser(): User | undefined;
  setUser(value?: User): ResetResendOTPReply;
  hasUser(): boolean;
  clearUser(): ResetResendOTPReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ResetResendOTPReply.AsObject;
  static toObject(includeInstance: boolean, msg: ResetResendOTPReply): ResetResendOTPReply.AsObject;
  static serializeBinaryToWriter(message: ResetResendOTPReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResetResendOTPReply;
  static deserializeBinaryFromReader(message: ResetResendOTPReply, reader: jspb.BinaryReader): ResetResendOTPReply;
}

export namespace ResetResendOTPReply {
  export type AsObject = {
    user?: User.AsObject,
  }
}

export class Credential extends jspb.Message {
  getMyId(): Credential.MyID | undefined;
  setMyId(value?: Credential.MyID): Credential;
  hasMyId(): boolean;
  clearMyId(): Credential;

  getFacebook(): Credential.Facebook | undefined;
  setFacebook(value?: Credential.Facebook): Credential;
  hasFacebook(): boolean;
  clearFacebook(): Credential;

  getMethodCase(): Credential.MethodCase;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Credential.AsObject;
  static toObject(includeInstance: boolean, msg: Credential): Credential.AsObject;
  static serializeBinaryToWriter(message: Credential, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Credential;
  static deserializeBinaryFromReader(message: Credential, reader: jspb.BinaryReader): Credential;
}

export namespace Credential {
  export type AsObject = {
    myId?: Credential.MyID.AsObject,
    facebook?: Credential.Facebook.AsObject,
  }

  export class MyID extends jspb.Message {
    getUsername(): string;
    setUsername(value: string): MyID;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): MyID.AsObject;
    static toObject(includeInstance: boolean, msg: MyID): MyID.AsObject;
    static serializeBinaryToWriter(message: MyID, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): MyID;
    static deserializeBinaryFromReader(message: MyID, reader: jspb.BinaryReader): MyID;
  }

  export namespace MyID {
    export type AsObject = {
      username: string,
    }
  }


  export class Facebook extends jspb.Message {
    getFbId(): string;
    setFbId(value: string): Facebook;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Facebook.AsObject;
    static toObject(includeInstance: boolean, msg: Facebook): Facebook.AsObject;
    static serializeBinaryToWriter(message: Facebook, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Facebook;
    static deserializeBinaryFromReader(message: Facebook, reader: jspb.BinaryReader): Facebook;
  }

  export namespace Facebook {
    export type AsObject = {
      fbId: string,
    }
  }


  export enum MethodCase { 
    METHOD_NOT_SET = 0,
    MY_ID = 1,
    FACEBOOK = 2,
  }
}

export class ListSignInEventsRequest extends jspb.Message {
  getLimit(): number;
  setLimit(value: number): ListSignInEventsRequest;

  getCursor(): number;
  setCursor(value: number): ListSignInEventsRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListSignInEventsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListSignInEventsRequest): ListSignInEventsRequest.AsObject;
  static serializeBinaryToWriter(message: ListSignInEventsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListSignInEventsRequest;
  static deserializeBinaryFromReader(message: ListSignInEventsRequest, reader: jspb.BinaryReader): ListSignInEventsRequest;
}

export namespace ListSignInEventsRequest {
  export type AsObject = {
    limit: number,
    cursor: number,
  }
}

export class ListSignInEventsReply extends jspb.Message {
  getEventsList(): Array<ListSignInEventsReply.Event>;
  setEventsList(value: Array<ListSignInEventsReply.Event>): ListSignInEventsReply;
  clearEventsList(): ListSignInEventsReply;
  addEvents(value?: ListSignInEventsReply.Event, index?: number): ListSignInEventsReply.Event;

  getNextCursor(): number;
  setNextCursor(value: number): ListSignInEventsReply;

  getHasMore(): boolean;
  setHasMore(value: boolean): ListSignInEventsReply;

  getTotal(): number;
  setTotal(value: number): ListSignInEventsReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListSignInEventsReply.AsObject;
  static toObject(includeInstance: boolean, msg: ListSignInEventsReply): ListSignInEventsReply.AsObject;
  static serializeBinaryToWriter(message: ListSignInEventsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListSignInEventsReply;
  static deserializeBinaryFromReader(message: ListSignInEventsReply, reader: jspb.BinaryReader): ListSignInEventsReply;
}

export namespace ListSignInEventsReply {
  export type AsObject = {
    eventsList: Array<ListSignInEventsReply.Event.AsObject>,
    nextCursor: number,
    hasMore: boolean,
    total: number,
  }

  export class Event extends jspb.Message {
    getId(): number;
    setId(value: number): Event;

    getUserId(): number;
    setUserId(value: number): Event;

    getDeviceId(): string;
    setDeviceId(value: string): Event;

    getDeviceName(): string;
    setDeviceName(value: string): Event;

    getCreatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
    setCreatedAt(value?: google_protobuf_timestamp_pb.Timestamp): Event;
    hasCreatedAt(): boolean;
    clearCreatedAt(): Event;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Event.AsObject;
    static toObject(includeInstance: boolean, msg: Event): Event.AsObject;
    static serializeBinaryToWriter(message: Event, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Event;
    static deserializeBinaryFromReader(message: Event, reader: jspb.BinaryReader): Event;
  }

  export namespace Event {
    export type AsObject = {
      id: number,
      userId: number,
      deviceId: string,
      deviceName: string,
      createdAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    }
  }

}

export class ListSignUpEventsRequest extends jspb.Message {
  getLimit(): number;
  setLimit(value: number): ListSignUpEventsRequest;

  getCursor(): number;
  setCursor(value: number): ListSignUpEventsRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListSignUpEventsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListSignUpEventsRequest): ListSignUpEventsRequest.AsObject;
  static serializeBinaryToWriter(message: ListSignUpEventsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListSignUpEventsRequest;
  static deserializeBinaryFromReader(message: ListSignUpEventsRequest, reader: jspb.BinaryReader): ListSignUpEventsRequest;
}

export namespace ListSignUpEventsRequest {
  export type AsObject = {
    limit: number,
    cursor: number,
  }
}

export class ListSignUpEventsReply extends jspb.Message {
  getEventsList(): Array<ListSignUpEventsReply.Event>;
  setEventsList(value: Array<ListSignUpEventsReply.Event>): ListSignUpEventsReply;
  clearEventsList(): ListSignUpEventsReply;
  addEvents(value?: ListSignUpEventsReply.Event, index?: number): ListSignUpEventsReply.Event;

  getNextCursor(): number;
  setNextCursor(value: number): ListSignUpEventsReply;

  getHasMore(): boolean;
  setHasMore(value: boolean): ListSignUpEventsReply;

  getTotal(): number;
  setTotal(value: number): ListSignUpEventsReply;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListSignUpEventsReply.AsObject;
  static toObject(includeInstance: boolean, msg: ListSignUpEventsReply): ListSignUpEventsReply.AsObject;
  static serializeBinaryToWriter(message: ListSignUpEventsReply, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListSignUpEventsReply;
  static deserializeBinaryFromReader(message: ListSignUpEventsReply, reader: jspb.BinaryReader): ListSignUpEventsReply;
}

export namespace ListSignUpEventsReply {
  export type AsObject = {
    eventsList: Array<ListSignUpEventsReply.Event.AsObject>,
    nextCursor: number,
    hasMore: boolean,
    total: number,
  }

  export class Event extends jspb.Message {
    getId(): number;
    setId(value: number): Event;

    getUserId(): number;
    setUserId(value: number): Event;

    getDeviceId(): string;
    setDeviceId(value: string): Event;

    getDeviceName(): string;
    setDeviceName(value: string): Event;

    getCreatedAt(): google_protobuf_timestamp_pb.Timestamp | undefined;
    setCreatedAt(value?: google_protobuf_timestamp_pb.Timestamp): Event;
    hasCreatedAt(): boolean;
    clearCreatedAt(): Event;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Event.AsObject;
    static toObject(includeInstance: boolean, msg: Event): Event.AsObject;
    static serializeBinaryToWriter(message: Event, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Event;
    static deserializeBinaryFromReader(message: Event, reader: jspb.BinaryReader): Event;
  }

  export namespace Event {
    export type AsObject = {
      id: number,
      userId: number,
      deviceId: string,
      deviceName: string,
      createdAt?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    }
  }

}

export enum Status { 
  UNSPECIFIED = 0,
  INACTIVE = 1,
  ACTIVE = 2,
  LOCKED = 3,
  BANNED = 4,
}
