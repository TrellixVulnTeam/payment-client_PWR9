// source: myid/myid.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var validate_validate_pb = require('@greyhole/validate/validate_pb.js');
goog.object.extend(proto, validate_validate_pb);
goog.exportSymbol('proto.greyhole.myid.Action', null, global);
goog.exportSymbol('proto.greyhole.myid.AddCredentialRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.AddCredentialRequest.CredentialCase', null, global);
goog.exportSymbol('proto.greyhole.myid.BanUserReply', null, global);
goog.exportSymbol('proto.greyhole.myid.BanUserRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.Captcha', null, global);
goog.exportSymbol('proto.greyhole.myid.ChangePasswordRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.ConfirmSignInReply', null, global);
goog.exportSymbol('proto.greyhole.myid.ConfirmSignInRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.CreateAccessTokenReply', null, global);
goog.exportSymbol('proto.greyhole.myid.CreateAccessTokenRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.CreatePasswordRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.CreateUserReply', null, global);
goog.exportSymbol('proto.greyhole.myid.CreateUserRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.Credential', null, global);
goog.exportSymbol('proto.greyhole.myid.Credential.Facebook', null, global);
goog.exportSymbol('proto.greyhole.myid.Credential.MethodCase', null, global);
goog.exportSymbol('proto.greyhole.myid.Credential.MyID', null, global);
goog.exportSymbol('proto.greyhole.myid.GetUserIDsReply', null, global);
goog.exportSymbol('proto.greyhole.myid.GetUserIDsRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.GetUserReply', null, global);
goog.exportSymbol('proto.greyhole.myid.GetUserRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.GetUsersByUsernameReply', null, global);
goog.exportSymbol('proto.greyhole.myid.GetUsersByUsernameRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.GetUsersReply', null, global);
goog.exportSymbol('proto.greyhole.myid.GetUsersRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.ListSignInEventsReply', null, global);
goog.exportSymbol('proto.greyhole.myid.ListSignInEventsReply.Event', null, global);
goog.exportSymbol('proto.greyhole.myid.ListSignInEventsRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.ListSignUpEventsReply', null, global);
goog.exportSymbol('proto.greyhole.myid.ListSignUpEventsReply.Event', null, global);
goog.exportSymbol('proto.greyhole.myid.ListSignUpEventsRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.ListUsersReply', null, global);
goog.exportSymbol('proto.greyhole.myid.ListUsersRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.LockUserReply', null, global);
goog.exportSymbol('proto.greyhole.myid.LockUserRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.MeReply', null, global);
goog.exportSymbol('proto.greyhole.myid.OTP', null, global);
goog.exportSymbol('proto.greyhole.myid.OTP.Info', null, global);
goog.exportSymbol('proto.greyhole.myid.OTP.ResultCase', null, global);
goog.exportSymbol('proto.greyhole.myid.Permission', null, global);
goog.exportSymbol('proto.greyhole.myid.PhoneNumber', null, global);
goog.exportSymbol('proto.greyhole.myid.ResendCreatePasswordOTPReply', null, global);
goog.exportSymbol('proto.greyhole.myid.ResendCreatePasswordOTPRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.ResendSignInOTPReply', null, global);
goog.exportSymbol('proto.greyhole.myid.ResendSignInOTPRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.ResetPasswordReply', null, global);
goog.exportSymbol('proto.greyhole.myid.ResetPasswordRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.ResetPasswordRequest.ByCase', null, global);
goog.exportSymbol('proto.greyhole.myid.ResetPasswordV2Request', null, global);
goog.exportSymbol('proto.greyhole.myid.ResetPasswordV2Request.ByCase', null, global);
goog.exportSymbol('proto.greyhole.myid.ResetResendOTPReply', null, global);
goog.exportSymbol('proto.greyhole.myid.ResetResendOTPRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.Resource', null, global);
goog.exportSymbol('proto.greyhole.myid.Role', null, global);
goog.exportSymbol('proto.greyhole.myid.Roles', null, global);
goog.exportSymbol('proto.greyhole.myid.SignInReply', null, global);
goog.exportSymbol('proto.greyhole.myid.SignInReply.ResultCase', null, global);
goog.exportSymbol('proto.greyhole.myid.SignInRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.SignInV2Request', null, global);
goog.exportSymbol('proto.greyhole.myid.SignInV2Request.CredentialCase', null, global);
goog.exportSymbol('proto.greyhole.myid.SignInV2Request.Facebook', null, global);
goog.exportSymbol('proto.greyhole.myid.SignInV2Request.MyID', null, global);
goog.exportSymbol('proto.greyhole.myid.SignUpReply', null, global);
goog.exportSymbol('proto.greyhole.myid.SignUpRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.SignUpV2Request', null, global);
goog.exportSymbol('proto.greyhole.myid.SignUpV2Request.CredentialCase', null, global);
goog.exportSymbol('proto.greyhole.myid.SignUpV2Request.Facebook', null, global);
goog.exportSymbol('proto.greyhole.myid.SignUpV2Request.MyID', null, global);
goog.exportSymbol('proto.greyhole.myid.Status', null, global);
goog.exportSymbol('proto.greyhole.myid.SubmitResetPasswordRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.TokenInfo', null, global);
goog.exportSymbol('proto.greyhole.myid.UnbanUserReply', null, global);
goog.exportSymbol('proto.greyhole.myid.UnbanUserRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.UnlockUserReply', null, global);
goog.exportSymbol('proto.greyhole.myid.UnlockUserRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.UpdateEmailReply', null, global);
goog.exportSymbol('proto.greyhole.myid.UpdateEmailReply.ResultCase', null, global);
goog.exportSymbol('proto.greyhole.myid.UpdateEmailRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.UpdateMetadataRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.UpdatePhoneNumberReply', null, global);
goog.exportSymbol('proto.greyhole.myid.UpdatePhoneNumberReply.ResultCase', null, global);
goog.exportSymbol('proto.greyhole.myid.UpdatePhoneNumberRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.UpdatePhoneNumberV2Request', null, global);
goog.exportSymbol('proto.greyhole.myid.UpdateUserReply', null, global);
goog.exportSymbol('proto.greyhole.myid.UpdateUserRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.User', null, global);
goog.exportSymbol('proto.greyhole.myid.UserChange', null, global);
goog.exportSymbol('proto.greyhole.myid.UserChange.FieldCase', null, global);
goog.exportSymbol('proto.greyhole.myid.UserInfo', null, global);
goog.exportSymbol('proto.greyhole.myid.VerifyEmailReply', null, global);
goog.exportSymbol('proto.greyhole.myid.VerifyEmailRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.VerifyPhoneNumberReply', null, global);
goog.exportSymbol('proto.greyhole.myid.VerifyPhoneNumberRequest', null, global);
goog.exportSymbol('proto.greyhole.myid.VerifyResetPasswordRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.SignUpRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.SignUpRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.SignUpRequest.displayName = 'proto.greyhole.myid.SignUpRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.SignUpV2Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.greyhole.myid.SignUpV2Request.oneofGroups_);
};
goog.inherits(proto.greyhole.myid.SignUpV2Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.SignUpV2Request.displayName = 'proto.greyhole.myid.SignUpV2Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.SignUpV2Request.MyID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.SignUpV2Request.MyID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.SignUpV2Request.MyID.displayName = 'proto.greyhole.myid.SignUpV2Request.MyID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.SignUpV2Request.Facebook = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.SignUpV2Request.Facebook, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.SignUpV2Request.Facebook.displayName = 'proto.greyhole.myid.SignUpV2Request.Facebook';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.SignUpReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.SignUpReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.SignUpReply.displayName = 'proto.greyhole.myid.SignUpReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.AddCredentialRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.greyhole.myid.AddCredentialRequest.oneofGroups_);
};
goog.inherits(proto.greyhole.myid.AddCredentialRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.AddCredentialRequest.displayName = 'proto.greyhole.myid.AddCredentialRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.SignInRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.SignInRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.SignInRequest.displayName = 'proto.greyhole.myid.SignInRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.SignInV2Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.greyhole.myid.SignInV2Request.oneofGroups_);
};
goog.inherits(proto.greyhole.myid.SignInV2Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.SignInV2Request.displayName = 'proto.greyhole.myid.SignInV2Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.SignInV2Request.MyID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.SignInV2Request.MyID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.SignInV2Request.MyID.displayName = 'proto.greyhole.myid.SignInV2Request.MyID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.SignInV2Request.Facebook = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.SignInV2Request.Facebook, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.SignInV2Request.Facebook.displayName = 'proto.greyhole.myid.SignInV2Request.Facebook';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.SignInReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.greyhole.myid.SignInReply.oneofGroups_);
};
goog.inherits(proto.greyhole.myid.SignInReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.SignInReply.displayName = 'proto.greyhole.myid.SignInReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.ResendSignInOTPRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.ResendSignInOTPRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.ResendSignInOTPRequest.displayName = 'proto.greyhole.myid.ResendSignInOTPRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.ResendSignInOTPReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.ResendSignInOTPReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.ResendSignInOTPReply.displayName = 'proto.greyhole.myid.ResendSignInOTPReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.ConfirmSignInRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.ConfirmSignInRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.ConfirmSignInRequest.displayName = 'proto.greyhole.myid.ConfirmSignInRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.ConfirmSignInReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.ConfirmSignInReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.ConfirmSignInReply.displayName = 'proto.greyhole.myid.ConfirmSignInReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.CreatePasswordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.CreatePasswordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.CreatePasswordRequest.displayName = 'proto.greyhole.myid.CreatePasswordRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.CreateAccessTokenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.CreateAccessTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.CreateAccessTokenRequest.displayName = 'proto.greyhole.myid.CreateAccessTokenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.CreateAccessTokenReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.CreateAccessTokenReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.CreateAccessTokenReply.displayName = 'proto.greyhole.myid.CreateAccessTokenReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.MeReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greyhole.myid.MeReply.repeatedFields_, null);
};
goog.inherits(proto.greyhole.myid.MeReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.MeReply.displayName = 'proto.greyhole.myid.MeReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.ChangePasswordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.ChangePasswordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.ChangePasswordRequest.displayName = 'proto.greyhole.myid.ChangePasswordRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.UpdateMetadataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.UpdateMetadataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.UpdateMetadataRequest.displayName = 'proto.greyhole.myid.UpdateMetadataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.UpdateEmailRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.UpdateEmailRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.UpdateEmailRequest.displayName = 'proto.greyhole.myid.UpdateEmailRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.UpdateEmailReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.greyhole.myid.UpdateEmailReply.oneofGroups_);
};
goog.inherits(proto.greyhole.myid.UpdateEmailReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.UpdateEmailReply.displayName = 'proto.greyhole.myid.UpdateEmailReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.VerifyEmailRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.VerifyEmailRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.VerifyEmailRequest.displayName = 'proto.greyhole.myid.VerifyEmailRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.VerifyEmailReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.VerifyEmailReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.VerifyEmailReply.displayName = 'proto.greyhole.myid.VerifyEmailReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.UpdatePhoneNumberRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.UpdatePhoneNumberRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.UpdatePhoneNumberRequest.displayName = 'proto.greyhole.myid.UpdatePhoneNumberRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.UpdatePhoneNumberV2Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.UpdatePhoneNumberV2Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.UpdatePhoneNumberV2Request.displayName = 'proto.greyhole.myid.UpdatePhoneNumberV2Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.UpdatePhoneNumberReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.greyhole.myid.UpdatePhoneNumberReply.oneofGroups_);
};
goog.inherits(proto.greyhole.myid.UpdatePhoneNumberReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.UpdatePhoneNumberReply.displayName = 'proto.greyhole.myid.UpdatePhoneNumberReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.VerifyPhoneNumberRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.VerifyPhoneNumberRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.VerifyPhoneNumberRequest.displayName = 'proto.greyhole.myid.VerifyPhoneNumberRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.VerifyPhoneNumberReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.VerifyPhoneNumberReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.VerifyPhoneNumberReply.displayName = 'proto.greyhole.myid.VerifyPhoneNumberReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.ResetPasswordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.greyhole.myid.ResetPasswordRequest.oneofGroups_);
};
goog.inherits(proto.greyhole.myid.ResetPasswordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.ResetPasswordRequest.displayName = 'proto.greyhole.myid.ResetPasswordRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.ResetPasswordV2Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.greyhole.myid.ResetPasswordV2Request.oneofGroups_);
};
goog.inherits(proto.greyhole.myid.ResetPasswordV2Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.ResetPasswordV2Request.displayName = 'proto.greyhole.myid.ResetPasswordV2Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.ResetPasswordReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.ResetPasswordReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.ResetPasswordReply.displayName = 'proto.greyhole.myid.ResetPasswordReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.VerifyResetPasswordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.VerifyResetPasswordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.VerifyResetPasswordRequest.displayName = 'proto.greyhole.myid.VerifyResetPasswordRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.SubmitResetPasswordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.SubmitResetPasswordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.SubmitResetPasswordRequest.displayName = 'proto.greyhole.myid.SubmitResetPasswordRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.UserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greyhole.myid.UserInfo.repeatedFields_, null);
};
goog.inherits(proto.greyhole.myid.UserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.UserInfo.displayName = 'proto.greyhole.myid.UserInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.TokenInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.TokenInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.TokenInfo.displayName = 'proto.greyhole.myid.TokenInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.OTP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.greyhole.myid.OTP.oneofGroups_);
};
goog.inherits(proto.greyhole.myid.OTP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.OTP.displayName = 'proto.greyhole.myid.OTP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.OTP.Info = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.OTP.Info, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.OTP.Info.displayName = 'proto.greyhole.myid.OTP.Info';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.Captcha = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.Captcha, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.Captcha.displayName = 'proto.greyhole.myid.Captcha';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.CreateUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greyhole.myid.CreateUserRequest.repeatedFields_, null);
};
goog.inherits(proto.greyhole.myid.CreateUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.CreateUserRequest.displayName = 'proto.greyhole.myid.CreateUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.CreateUserReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.CreateUserReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.CreateUserReply.displayName = 'proto.greyhole.myid.CreateUserReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.ListUsersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greyhole.myid.ListUsersRequest.repeatedFields_, null);
};
goog.inherits(proto.greyhole.myid.ListUsersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.ListUsersRequest.displayName = 'proto.greyhole.myid.ListUsersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.ListUsersReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greyhole.myid.ListUsersReply.repeatedFields_, null);
};
goog.inherits(proto.greyhole.myid.ListUsersReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.ListUsersReply.displayName = 'proto.greyhole.myid.ListUsersReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.UpdateUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greyhole.myid.UpdateUserRequest.repeatedFields_, null);
};
goog.inherits(proto.greyhole.myid.UpdateUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.UpdateUserRequest.displayName = 'proto.greyhole.myid.UpdateUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.UpdateUserReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.UpdateUserReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.UpdateUserReply.displayName = 'proto.greyhole.myid.UpdateUserReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.LockUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.LockUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.LockUserRequest.displayName = 'proto.greyhole.myid.LockUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.LockUserReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.LockUserReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.LockUserReply.displayName = 'proto.greyhole.myid.LockUserReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.UnlockUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.UnlockUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.UnlockUserRequest.displayName = 'proto.greyhole.myid.UnlockUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.UnlockUserReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.UnlockUserReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.UnlockUserReply.displayName = 'proto.greyhole.myid.UnlockUserReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.BanUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.BanUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.BanUserRequest.displayName = 'proto.greyhole.myid.BanUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.BanUserReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.BanUserReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.BanUserReply.displayName = 'proto.greyhole.myid.BanUserReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.UnbanUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.UnbanUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.UnbanUserRequest.displayName = 'proto.greyhole.myid.UnbanUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.UnbanUserReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.UnbanUserReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.UnbanUserReply.displayName = 'proto.greyhole.myid.UnbanUserReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.GetUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.GetUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.GetUserRequest.displayName = 'proto.greyhole.myid.GetUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.GetUserReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.GetUserReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.GetUserReply.displayName = 'proto.greyhole.myid.GetUserReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.ResendCreatePasswordOTPRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.ResendCreatePasswordOTPRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.ResendCreatePasswordOTPRequest.displayName = 'proto.greyhole.myid.ResendCreatePasswordOTPRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.ResendCreatePasswordOTPReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.ResendCreatePasswordOTPReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.ResendCreatePasswordOTPReply.displayName = 'proto.greyhole.myid.ResendCreatePasswordOTPReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.GetUsersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greyhole.myid.GetUsersRequest.repeatedFields_, null);
};
goog.inherits(proto.greyhole.myid.GetUsersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.GetUsersRequest.displayName = 'proto.greyhole.myid.GetUsersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.GetUsersReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greyhole.myid.GetUsersReply.repeatedFields_, null);
};
goog.inherits(proto.greyhole.myid.GetUsersReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.GetUsersReply.displayName = 'proto.greyhole.myid.GetUsersReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.GetUserIDsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greyhole.myid.GetUserIDsRequest.repeatedFields_, null);
};
goog.inherits(proto.greyhole.myid.GetUserIDsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.GetUserIDsRequest.displayName = 'proto.greyhole.myid.GetUserIDsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.GetUserIDsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.GetUserIDsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.GetUserIDsReply.displayName = 'proto.greyhole.myid.GetUserIDsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.GetUsersByUsernameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greyhole.myid.GetUsersByUsernameRequest.repeatedFields_, null);
};
goog.inherits(proto.greyhole.myid.GetUsersByUsernameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.GetUsersByUsernameRequest.displayName = 'proto.greyhole.myid.GetUsersByUsernameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.GetUsersByUsernameReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.GetUsersByUsernameReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.GetUsersByUsernameReply.displayName = 'proto.greyhole.myid.GetUsersByUsernameReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greyhole.myid.User.repeatedFields_, null);
};
goog.inherits(proto.greyhole.myid.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.User.displayName = 'proto.greyhole.myid.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.PhoneNumber = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.PhoneNumber, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.PhoneNumber.displayName = 'proto.greyhole.myid.PhoneNumber';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.Role = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.Role, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.Role.displayName = 'proto.greyhole.myid.Role';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.Roles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greyhole.myid.Roles.repeatedFields_, null);
};
goog.inherits(proto.greyhole.myid.Roles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.Roles.displayName = 'proto.greyhole.myid.Roles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.UserChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.greyhole.myid.UserChange.oneofGroups_);
};
goog.inherits(proto.greyhole.myid.UserChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.UserChange.displayName = 'proto.greyhole.myid.UserChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.Permission = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greyhole.myid.Permission.repeatedFields_, null);
};
goog.inherits(proto.greyhole.myid.Permission, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.Permission.displayName = 'proto.greyhole.myid.Permission';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.Resource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.Resource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.Resource.displayName = 'proto.greyhole.myid.Resource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.Action.displayName = 'proto.greyhole.myid.Action';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.ResetResendOTPRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.ResetResendOTPRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.ResetResendOTPRequest.displayName = 'proto.greyhole.myid.ResetResendOTPRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.ResetResendOTPReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.ResetResendOTPReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.ResetResendOTPReply.displayName = 'proto.greyhole.myid.ResetResendOTPReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.Credential = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.greyhole.myid.Credential.oneofGroups_);
};
goog.inherits(proto.greyhole.myid.Credential, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.Credential.displayName = 'proto.greyhole.myid.Credential';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.Credential.MyID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.Credential.MyID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.Credential.MyID.displayName = 'proto.greyhole.myid.Credential.MyID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.Credential.Facebook = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.Credential.Facebook, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.Credential.Facebook.displayName = 'proto.greyhole.myid.Credential.Facebook';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.ListSignInEventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.ListSignInEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.ListSignInEventsRequest.displayName = 'proto.greyhole.myid.ListSignInEventsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.ListSignInEventsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greyhole.myid.ListSignInEventsReply.repeatedFields_, null);
};
goog.inherits(proto.greyhole.myid.ListSignInEventsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.ListSignInEventsReply.displayName = 'proto.greyhole.myid.ListSignInEventsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.ListSignInEventsReply.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.ListSignInEventsReply.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.ListSignInEventsReply.Event.displayName = 'proto.greyhole.myid.ListSignInEventsReply.Event';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.ListSignUpEventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.ListSignUpEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.ListSignUpEventsRequest.displayName = 'proto.greyhole.myid.ListSignUpEventsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.ListSignUpEventsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.greyhole.myid.ListSignUpEventsReply.repeatedFields_, null);
};
goog.inherits(proto.greyhole.myid.ListSignUpEventsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.ListSignUpEventsReply.displayName = 'proto.greyhole.myid.ListSignUpEventsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.greyhole.myid.ListSignUpEventsReply.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.greyhole.myid.ListSignUpEventsReply.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.greyhole.myid.ListSignUpEventsReply.Event.displayName = 'proto.greyhole.myid.ListSignUpEventsReply.Event';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.SignUpRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.SignUpRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.SignUpRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SignUpRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    confirmPassword: jspb.Message.getFieldWithDefault(msg, 3, ""),
    referrerId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    deviceName: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.SignUpRequest}
 */
proto.greyhole.myid.SignUpRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.SignUpRequest;
  return proto.greyhole.myid.SignUpRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.SignUpRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.SignUpRequest}
 */
proto.greyhole.myid.SignUpRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfirmPassword(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferrerId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.SignUpRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.SignUpRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.SignUpRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SignUpRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfirmPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getReferrerId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDeviceName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.greyhole.myid.SignUpRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignUpRequest} returns this
 */
proto.greyhole.myid.SignUpRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.greyhole.myid.SignUpRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignUpRequest} returns this
 */
proto.greyhole.myid.SignUpRequest.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string confirm_password = 3;
 * @return {string}
 */
proto.greyhole.myid.SignUpRequest.prototype.getConfirmPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignUpRequest} returns this
 */
proto.greyhole.myid.SignUpRequest.prototype.setConfirmPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string referrer_id = 4;
 * @return {string}
 */
proto.greyhole.myid.SignUpRequest.prototype.getReferrerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignUpRequest} returns this
 */
proto.greyhole.myid.SignUpRequest.prototype.setReferrerId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string device_id = 5;
 * @return {string}
 */
proto.greyhole.myid.SignUpRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignUpRequest} returns this
 */
proto.greyhole.myid.SignUpRequest.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string device_name = 6;
 * @return {string}
 */
proto.greyhole.myid.SignUpRequest.prototype.getDeviceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignUpRequest} returns this
 */
proto.greyhole.myid.SignUpRequest.prototype.setDeviceName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.greyhole.myid.SignUpV2Request.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.greyhole.myid.SignUpV2Request.CredentialCase = {
  CREDENTIAL_NOT_SET: 0,
  MY_ID: 1,
  FACEBOOK: 2
};

/**
 * @return {proto.greyhole.myid.SignUpV2Request.CredentialCase}
 */
proto.greyhole.myid.SignUpV2Request.prototype.getCredentialCase = function() {
  return /** @type {proto.greyhole.myid.SignUpV2Request.CredentialCase} */(jspb.Message.computeOneofCase(this, proto.greyhole.myid.SignUpV2Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.SignUpV2Request.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.SignUpV2Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.SignUpV2Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SignUpV2Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    myId: (f = msg.getMyId()) && proto.greyhole.myid.SignUpV2Request.MyID.toObject(includeInstance, f),
    facebook: (f = msg.getFacebook()) && proto.greyhole.myid.SignUpV2Request.Facebook.toObject(includeInstance, f),
    referrerId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    deviceName: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.SignUpV2Request}
 */
proto.greyhole.myid.SignUpV2Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.SignUpV2Request;
  return proto.greyhole.myid.SignUpV2Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.SignUpV2Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.SignUpV2Request}
 */
proto.greyhole.myid.SignUpV2Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.SignUpV2Request.MyID;
      reader.readMessage(value,proto.greyhole.myid.SignUpV2Request.MyID.deserializeBinaryFromReader);
      msg.setMyId(value);
      break;
    case 2:
      var value = new proto.greyhole.myid.SignUpV2Request.Facebook;
      reader.readMessage(value,proto.greyhole.myid.SignUpV2Request.Facebook.deserializeBinaryFromReader);
      msg.setFacebook(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferrerId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.SignUpV2Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.SignUpV2Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.SignUpV2Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SignUpV2Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.SignUpV2Request.MyID.serializeBinaryToWriter
    );
  }
  f = message.getFacebook();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.greyhole.myid.SignUpV2Request.Facebook.serializeBinaryToWriter
    );
  }
  f = message.getReferrerId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDeviceName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.SignUpV2Request.MyID.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.SignUpV2Request.MyID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.SignUpV2Request.MyID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SignUpV2Request.MyID.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    confirmPassword: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.SignUpV2Request.MyID}
 */
proto.greyhole.myid.SignUpV2Request.MyID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.SignUpV2Request.MyID;
  return proto.greyhole.myid.SignUpV2Request.MyID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.SignUpV2Request.MyID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.SignUpV2Request.MyID}
 */
proto.greyhole.myid.SignUpV2Request.MyID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfirmPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.SignUpV2Request.MyID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.SignUpV2Request.MyID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.SignUpV2Request.MyID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SignUpV2Request.MyID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfirmPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.greyhole.myid.SignUpV2Request.MyID.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignUpV2Request.MyID} returns this
 */
proto.greyhole.myid.SignUpV2Request.MyID.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.greyhole.myid.SignUpV2Request.MyID.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignUpV2Request.MyID} returns this
 */
proto.greyhole.myid.SignUpV2Request.MyID.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string confirm_password = 3;
 * @return {string}
 */
proto.greyhole.myid.SignUpV2Request.MyID.prototype.getConfirmPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignUpV2Request.MyID} returns this
 */
proto.greyhole.myid.SignUpV2Request.MyID.prototype.setConfirmPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.SignUpV2Request.Facebook.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.SignUpV2Request.Facebook.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.SignUpV2Request.Facebook} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SignUpV2Request.Facebook.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.SignUpV2Request.Facebook}
 */
proto.greyhole.myid.SignUpV2Request.Facebook.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.SignUpV2Request.Facebook;
  return proto.greyhole.myid.SignUpV2Request.Facebook.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.SignUpV2Request.Facebook} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.SignUpV2Request.Facebook}
 */
proto.greyhole.myid.SignUpV2Request.Facebook.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.SignUpV2Request.Facebook.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.SignUpV2Request.Facebook.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.SignUpV2Request.Facebook} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SignUpV2Request.Facebook.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.greyhole.myid.SignUpV2Request.Facebook.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignUpV2Request.Facebook} returns this
 */
proto.greyhole.myid.SignUpV2Request.Facebook.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional MyID my_id = 1;
 * @return {?proto.greyhole.myid.SignUpV2Request.MyID}
 */
proto.greyhole.myid.SignUpV2Request.prototype.getMyId = function() {
  return /** @type{?proto.greyhole.myid.SignUpV2Request.MyID} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.SignUpV2Request.MyID, 1));
};


/**
 * @param {?proto.greyhole.myid.SignUpV2Request.MyID|undefined} value
 * @return {!proto.greyhole.myid.SignUpV2Request} returns this
*/
proto.greyhole.myid.SignUpV2Request.prototype.setMyId = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.greyhole.myid.SignUpV2Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.SignUpV2Request} returns this
 */
proto.greyhole.myid.SignUpV2Request.prototype.clearMyId = function() {
  return this.setMyId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.SignUpV2Request.prototype.hasMyId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Facebook facebook = 2;
 * @return {?proto.greyhole.myid.SignUpV2Request.Facebook}
 */
proto.greyhole.myid.SignUpV2Request.prototype.getFacebook = function() {
  return /** @type{?proto.greyhole.myid.SignUpV2Request.Facebook} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.SignUpV2Request.Facebook, 2));
};


/**
 * @param {?proto.greyhole.myid.SignUpV2Request.Facebook|undefined} value
 * @return {!proto.greyhole.myid.SignUpV2Request} returns this
*/
proto.greyhole.myid.SignUpV2Request.prototype.setFacebook = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.greyhole.myid.SignUpV2Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.SignUpV2Request} returns this
 */
proto.greyhole.myid.SignUpV2Request.prototype.clearFacebook = function() {
  return this.setFacebook(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.SignUpV2Request.prototype.hasFacebook = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string referrer_id = 3;
 * @return {string}
 */
proto.greyhole.myid.SignUpV2Request.prototype.getReferrerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignUpV2Request} returns this
 */
proto.greyhole.myid.SignUpV2Request.prototype.setReferrerId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string device_id = 4;
 * @return {string}
 */
proto.greyhole.myid.SignUpV2Request.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignUpV2Request} returns this
 */
proto.greyhole.myid.SignUpV2Request.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string device_name = 5;
 * @return {string}
 */
proto.greyhole.myid.SignUpV2Request.prototype.getDeviceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignUpV2Request} returns this
 */
proto.greyhole.myid.SignUpV2Request.prototype.setDeviceName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.SignUpReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.SignUpReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.SignUpReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SignUpReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenInfo: (f = msg.getTokenInfo()) && proto.greyhole.myid.TokenInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.SignUpReply}
 */
proto.greyhole.myid.SignUpReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.SignUpReply;
  return proto.greyhole.myid.SignUpReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.SignUpReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.SignUpReply}
 */
proto.greyhole.myid.SignUpReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.TokenInfo;
      reader.readMessage(value,proto.greyhole.myid.TokenInfo.deserializeBinaryFromReader);
      msg.setTokenInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.SignUpReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.SignUpReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.SignUpReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SignUpReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.TokenInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TokenInfo token_info = 1;
 * @return {?proto.greyhole.myid.TokenInfo}
 */
proto.greyhole.myid.SignUpReply.prototype.getTokenInfo = function() {
  return /** @type{?proto.greyhole.myid.TokenInfo} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.TokenInfo, 1));
};


/**
 * @param {?proto.greyhole.myid.TokenInfo|undefined} value
 * @return {!proto.greyhole.myid.SignUpReply} returns this
*/
proto.greyhole.myid.SignUpReply.prototype.setTokenInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.SignUpReply} returns this
 */
proto.greyhole.myid.SignUpReply.prototype.clearTokenInfo = function() {
  return this.setTokenInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.SignUpReply.prototype.hasTokenInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.greyhole.myid.AddCredentialRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.greyhole.myid.AddCredentialRequest.CredentialCase = {
  CREDENTIAL_NOT_SET: 0,
  MY_ID: 1,
  FACEBOOK: 2
};

/**
 * @return {proto.greyhole.myid.AddCredentialRequest.CredentialCase}
 */
proto.greyhole.myid.AddCredentialRequest.prototype.getCredentialCase = function() {
  return /** @type {proto.greyhole.myid.AddCredentialRequest.CredentialCase} */(jspb.Message.computeOneofCase(this, proto.greyhole.myid.AddCredentialRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.AddCredentialRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.AddCredentialRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.AddCredentialRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.AddCredentialRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    myId: (f = msg.getMyId()) && proto.greyhole.myid.SignUpV2Request.MyID.toObject(includeInstance, f),
    facebook: (f = msg.getFacebook()) && proto.greyhole.myid.SignUpV2Request.Facebook.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.AddCredentialRequest}
 */
proto.greyhole.myid.AddCredentialRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.AddCredentialRequest;
  return proto.greyhole.myid.AddCredentialRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.AddCredentialRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.AddCredentialRequest}
 */
proto.greyhole.myid.AddCredentialRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.SignUpV2Request.MyID;
      reader.readMessage(value,proto.greyhole.myid.SignUpV2Request.MyID.deserializeBinaryFromReader);
      msg.setMyId(value);
      break;
    case 2:
      var value = new proto.greyhole.myid.SignUpV2Request.Facebook;
      reader.readMessage(value,proto.greyhole.myid.SignUpV2Request.Facebook.deserializeBinaryFromReader);
      msg.setFacebook(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.AddCredentialRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.AddCredentialRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.AddCredentialRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.AddCredentialRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.SignUpV2Request.MyID.serializeBinaryToWriter
    );
  }
  f = message.getFacebook();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.greyhole.myid.SignUpV2Request.Facebook.serializeBinaryToWriter
    );
  }
};


/**
 * optional SignUpV2Request.MyID my_id = 1;
 * @return {?proto.greyhole.myid.SignUpV2Request.MyID}
 */
proto.greyhole.myid.AddCredentialRequest.prototype.getMyId = function() {
  return /** @type{?proto.greyhole.myid.SignUpV2Request.MyID} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.SignUpV2Request.MyID, 1));
};


/**
 * @param {?proto.greyhole.myid.SignUpV2Request.MyID|undefined} value
 * @return {!proto.greyhole.myid.AddCredentialRequest} returns this
*/
proto.greyhole.myid.AddCredentialRequest.prototype.setMyId = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.greyhole.myid.AddCredentialRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.AddCredentialRequest} returns this
 */
proto.greyhole.myid.AddCredentialRequest.prototype.clearMyId = function() {
  return this.setMyId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.AddCredentialRequest.prototype.hasMyId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SignUpV2Request.Facebook facebook = 2;
 * @return {?proto.greyhole.myid.SignUpV2Request.Facebook}
 */
proto.greyhole.myid.AddCredentialRequest.prototype.getFacebook = function() {
  return /** @type{?proto.greyhole.myid.SignUpV2Request.Facebook} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.SignUpV2Request.Facebook, 2));
};


/**
 * @param {?proto.greyhole.myid.SignUpV2Request.Facebook|undefined} value
 * @return {!proto.greyhole.myid.AddCredentialRequest} returns this
*/
proto.greyhole.myid.AddCredentialRequest.prototype.setFacebook = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.greyhole.myid.AddCredentialRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.AddCredentialRequest} returns this
 */
proto.greyhole.myid.AddCredentialRequest.prototype.clearFacebook = function() {
  return this.setFacebook(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.AddCredentialRequest.prototype.hasFacebook = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.SignInRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.SignInRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.SignInRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SignInRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    deviceName: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.SignInRequest}
 */
proto.greyhole.myid.SignInRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.SignInRequest;
  return proto.greyhole.myid.SignInRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.SignInRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.SignInRequest}
 */
proto.greyhole.myid.SignInRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.SignInRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.SignInRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.SignInRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SignInRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDeviceName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.greyhole.myid.SignInRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignInRequest} returns this
 */
proto.greyhole.myid.SignInRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.greyhole.myid.SignInRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignInRequest} returns this
 */
proto.greyhole.myid.SignInRequest.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string device_id = 3;
 * @return {string}
 */
proto.greyhole.myid.SignInRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignInRequest} returns this
 */
proto.greyhole.myid.SignInRequest.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string device_name = 4;
 * @return {string}
 */
proto.greyhole.myid.SignInRequest.prototype.getDeviceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignInRequest} returns this
 */
proto.greyhole.myid.SignInRequest.prototype.setDeviceName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.greyhole.myid.SignInV2Request.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.greyhole.myid.SignInV2Request.CredentialCase = {
  CREDENTIAL_NOT_SET: 0,
  MY_ID: 1,
  FACEBOOK: 2
};

/**
 * @return {proto.greyhole.myid.SignInV2Request.CredentialCase}
 */
proto.greyhole.myid.SignInV2Request.prototype.getCredentialCase = function() {
  return /** @type {proto.greyhole.myid.SignInV2Request.CredentialCase} */(jspb.Message.computeOneofCase(this, proto.greyhole.myid.SignInV2Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.SignInV2Request.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.SignInV2Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.SignInV2Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SignInV2Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    myId: (f = msg.getMyId()) && proto.greyhole.myid.SignInV2Request.MyID.toObject(includeInstance, f),
    facebook: (f = msg.getFacebook()) && proto.greyhole.myid.SignInV2Request.Facebook.toObject(includeInstance, f),
    deviceId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    deviceName: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.SignInV2Request}
 */
proto.greyhole.myid.SignInV2Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.SignInV2Request;
  return proto.greyhole.myid.SignInV2Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.SignInV2Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.SignInV2Request}
 */
proto.greyhole.myid.SignInV2Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.SignInV2Request.MyID;
      reader.readMessage(value,proto.greyhole.myid.SignInV2Request.MyID.deserializeBinaryFromReader);
      msg.setMyId(value);
      break;
    case 2:
      var value = new proto.greyhole.myid.SignInV2Request.Facebook;
      reader.readMessage(value,proto.greyhole.myid.SignInV2Request.Facebook.deserializeBinaryFromReader);
      msg.setFacebook(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.SignInV2Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.SignInV2Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.SignInV2Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SignInV2Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.SignInV2Request.MyID.serializeBinaryToWriter
    );
  }
  f = message.getFacebook();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.greyhole.myid.SignInV2Request.Facebook.serializeBinaryToWriter
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDeviceName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.SignInV2Request.MyID.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.SignInV2Request.MyID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.SignInV2Request.MyID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SignInV2Request.MyID.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.SignInV2Request.MyID}
 */
proto.greyhole.myid.SignInV2Request.MyID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.SignInV2Request.MyID;
  return proto.greyhole.myid.SignInV2Request.MyID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.SignInV2Request.MyID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.SignInV2Request.MyID}
 */
proto.greyhole.myid.SignInV2Request.MyID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.SignInV2Request.MyID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.SignInV2Request.MyID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.SignInV2Request.MyID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SignInV2Request.MyID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.greyhole.myid.SignInV2Request.MyID.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignInV2Request.MyID} returns this
 */
proto.greyhole.myid.SignInV2Request.MyID.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.greyhole.myid.SignInV2Request.MyID.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignInV2Request.MyID} returns this
 */
proto.greyhole.myid.SignInV2Request.MyID.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.SignInV2Request.Facebook.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.SignInV2Request.Facebook.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.SignInV2Request.Facebook} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SignInV2Request.Facebook.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.SignInV2Request.Facebook}
 */
proto.greyhole.myid.SignInV2Request.Facebook.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.SignInV2Request.Facebook;
  return proto.greyhole.myid.SignInV2Request.Facebook.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.SignInV2Request.Facebook} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.SignInV2Request.Facebook}
 */
proto.greyhole.myid.SignInV2Request.Facebook.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.SignInV2Request.Facebook.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.SignInV2Request.Facebook.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.SignInV2Request.Facebook} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SignInV2Request.Facebook.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.greyhole.myid.SignInV2Request.Facebook.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignInV2Request.Facebook} returns this
 */
proto.greyhole.myid.SignInV2Request.Facebook.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional MyID my_id = 1;
 * @return {?proto.greyhole.myid.SignInV2Request.MyID}
 */
proto.greyhole.myid.SignInV2Request.prototype.getMyId = function() {
  return /** @type{?proto.greyhole.myid.SignInV2Request.MyID} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.SignInV2Request.MyID, 1));
};


/**
 * @param {?proto.greyhole.myid.SignInV2Request.MyID|undefined} value
 * @return {!proto.greyhole.myid.SignInV2Request} returns this
*/
proto.greyhole.myid.SignInV2Request.prototype.setMyId = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.greyhole.myid.SignInV2Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.SignInV2Request} returns this
 */
proto.greyhole.myid.SignInV2Request.prototype.clearMyId = function() {
  return this.setMyId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.SignInV2Request.prototype.hasMyId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Facebook facebook = 2;
 * @return {?proto.greyhole.myid.SignInV2Request.Facebook}
 */
proto.greyhole.myid.SignInV2Request.prototype.getFacebook = function() {
  return /** @type{?proto.greyhole.myid.SignInV2Request.Facebook} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.SignInV2Request.Facebook, 2));
};


/**
 * @param {?proto.greyhole.myid.SignInV2Request.Facebook|undefined} value
 * @return {!proto.greyhole.myid.SignInV2Request} returns this
*/
proto.greyhole.myid.SignInV2Request.prototype.setFacebook = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.greyhole.myid.SignInV2Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.SignInV2Request} returns this
 */
proto.greyhole.myid.SignInV2Request.prototype.clearFacebook = function() {
  return this.setFacebook(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.SignInV2Request.prototype.hasFacebook = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string device_id = 3;
 * @return {string}
 */
proto.greyhole.myid.SignInV2Request.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignInV2Request} returns this
 */
proto.greyhole.myid.SignInV2Request.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string device_name = 4;
 * @return {string}
 */
proto.greyhole.myid.SignInV2Request.prototype.getDeviceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SignInV2Request} returns this
 */
proto.greyhole.myid.SignInV2Request.prototype.setDeviceName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.greyhole.myid.SignInReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.greyhole.myid.SignInReply.ResultCase = {
  RESULT_NOT_SET: 0,
  TOKEN_INFO: 1,
  CONFIRM_OTP: 2
};

/**
 * @return {proto.greyhole.myid.SignInReply.ResultCase}
 */
proto.greyhole.myid.SignInReply.prototype.getResultCase = function() {
  return /** @type {proto.greyhole.myid.SignInReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.greyhole.myid.SignInReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.SignInReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.SignInReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.SignInReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SignInReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenInfo: (f = msg.getTokenInfo()) && proto.greyhole.myid.TokenInfo.toObject(includeInstance, f),
    confirmOtp: (f = msg.getConfirmOtp()) && proto.greyhole.myid.OTP.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.SignInReply}
 */
proto.greyhole.myid.SignInReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.SignInReply;
  return proto.greyhole.myid.SignInReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.SignInReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.SignInReply}
 */
proto.greyhole.myid.SignInReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.TokenInfo;
      reader.readMessage(value,proto.greyhole.myid.TokenInfo.deserializeBinaryFromReader);
      msg.setTokenInfo(value);
      break;
    case 2:
      var value = new proto.greyhole.myid.OTP;
      reader.readMessage(value,proto.greyhole.myid.OTP.deserializeBinaryFromReader);
      msg.setConfirmOtp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.SignInReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.SignInReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.SignInReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SignInReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.TokenInfo.serializeBinaryToWriter
    );
  }
  f = message.getConfirmOtp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.greyhole.myid.OTP.serializeBinaryToWriter
    );
  }
};


/**
 * optional TokenInfo token_info = 1;
 * @return {?proto.greyhole.myid.TokenInfo}
 */
proto.greyhole.myid.SignInReply.prototype.getTokenInfo = function() {
  return /** @type{?proto.greyhole.myid.TokenInfo} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.TokenInfo, 1));
};


/**
 * @param {?proto.greyhole.myid.TokenInfo|undefined} value
 * @return {!proto.greyhole.myid.SignInReply} returns this
*/
proto.greyhole.myid.SignInReply.prototype.setTokenInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.greyhole.myid.SignInReply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.SignInReply} returns this
 */
proto.greyhole.myid.SignInReply.prototype.clearTokenInfo = function() {
  return this.setTokenInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.SignInReply.prototype.hasTokenInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OTP confirm_otp = 2;
 * @return {?proto.greyhole.myid.OTP}
 */
proto.greyhole.myid.SignInReply.prototype.getConfirmOtp = function() {
  return /** @type{?proto.greyhole.myid.OTP} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.OTP, 2));
};


/**
 * @param {?proto.greyhole.myid.OTP|undefined} value
 * @return {!proto.greyhole.myid.SignInReply} returns this
*/
proto.greyhole.myid.SignInReply.prototype.setConfirmOtp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.greyhole.myid.SignInReply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.SignInReply} returns this
 */
proto.greyhole.myid.SignInReply.prototype.clearConfirmOtp = function() {
  return this.setConfirmOtp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.SignInReply.prototype.hasConfirmOtp = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.ResendSignInOTPRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.ResendSignInOTPRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.ResendSignInOTPRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ResendSignInOTPRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    otpId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.ResendSignInOTPRequest}
 */
proto.greyhole.myid.ResendSignInOTPRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.ResendSignInOTPRequest;
  return proto.greyhole.myid.ResendSignInOTPRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.ResendSignInOTPRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.ResendSignInOTPRequest}
 */
proto.greyhole.myid.ResendSignInOTPRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtpId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.ResendSignInOTPRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.ResendSignInOTPRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.ResendSignInOTPRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ResendSignInOTPRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOtpId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string otp_id = 1;
 * @return {string}
 */
proto.greyhole.myid.ResendSignInOTPRequest.prototype.getOtpId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.ResendSignInOTPRequest} returns this
 */
proto.greyhole.myid.ResendSignInOTPRequest.prototype.setOtpId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.ResendSignInOTPReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.ResendSignInOTPReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.ResendSignInOTPReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ResendSignInOTPReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    confirmOtp: (f = msg.getConfirmOtp()) && proto.greyhole.myid.OTP.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.ResendSignInOTPReply}
 */
proto.greyhole.myid.ResendSignInOTPReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.ResendSignInOTPReply;
  return proto.greyhole.myid.ResendSignInOTPReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.ResendSignInOTPReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.ResendSignInOTPReply}
 */
proto.greyhole.myid.ResendSignInOTPReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.greyhole.myid.OTP;
      reader.readMessage(value,proto.greyhole.myid.OTP.deserializeBinaryFromReader);
      msg.setConfirmOtp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.ResendSignInOTPReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.ResendSignInOTPReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.ResendSignInOTPReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ResendSignInOTPReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfirmOtp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.greyhole.myid.OTP.serializeBinaryToWriter
    );
  }
};


/**
 * optional OTP confirm_otp = 2;
 * @return {?proto.greyhole.myid.OTP}
 */
proto.greyhole.myid.ResendSignInOTPReply.prototype.getConfirmOtp = function() {
  return /** @type{?proto.greyhole.myid.OTP} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.OTP, 2));
};


/**
 * @param {?proto.greyhole.myid.OTP|undefined} value
 * @return {!proto.greyhole.myid.ResendSignInOTPReply} returns this
*/
proto.greyhole.myid.ResendSignInOTPReply.prototype.setConfirmOtp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.ResendSignInOTPReply} returns this
 */
proto.greyhole.myid.ResendSignInOTPReply.prototype.clearConfirmOtp = function() {
  return this.setConfirmOtp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.ResendSignInOTPReply.prototype.hasConfirmOtp = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.ConfirmSignInRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.ConfirmSignInRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.ConfirmSignInRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ConfirmSignInRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    otpId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    otp: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.ConfirmSignInRequest}
 */
proto.greyhole.myid.ConfirmSignInRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.ConfirmSignInRequest;
  return proto.greyhole.myid.ConfirmSignInRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.ConfirmSignInRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.ConfirmSignInRequest}
 */
proto.greyhole.myid.ConfirmSignInRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtpId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.ConfirmSignInRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.ConfirmSignInRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.ConfirmSignInRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ConfirmSignInRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOtpId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOtp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string otp_id = 1;
 * @return {string}
 */
proto.greyhole.myid.ConfirmSignInRequest.prototype.getOtpId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.ConfirmSignInRequest} returns this
 */
proto.greyhole.myid.ConfirmSignInRequest.prototype.setOtpId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string otp = 2;
 * @return {string}
 */
proto.greyhole.myid.ConfirmSignInRequest.prototype.getOtp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.ConfirmSignInRequest} returns this
 */
proto.greyhole.myid.ConfirmSignInRequest.prototype.setOtp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.ConfirmSignInReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.ConfirmSignInReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.ConfirmSignInReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ConfirmSignInReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenInfo: (f = msg.getTokenInfo()) && proto.greyhole.myid.TokenInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.ConfirmSignInReply}
 */
proto.greyhole.myid.ConfirmSignInReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.ConfirmSignInReply;
  return proto.greyhole.myid.ConfirmSignInReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.ConfirmSignInReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.ConfirmSignInReply}
 */
proto.greyhole.myid.ConfirmSignInReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.TokenInfo;
      reader.readMessage(value,proto.greyhole.myid.TokenInfo.deserializeBinaryFromReader);
      msg.setTokenInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.ConfirmSignInReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.ConfirmSignInReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.ConfirmSignInReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ConfirmSignInReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.TokenInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TokenInfo token_info = 1;
 * @return {?proto.greyhole.myid.TokenInfo}
 */
proto.greyhole.myid.ConfirmSignInReply.prototype.getTokenInfo = function() {
  return /** @type{?proto.greyhole.myid.TokenInfo} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.TokenInfo, 1));
};


/**
 * @param {?proto.greyhole.myid.TokenInfo|undefined} value
 * @return {!proto.greyhole.myid.ConfirmSignInReply} returns this
*/
proto.greyhole.myid.ConfirmSignInReply.prototype.setTokenInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.ConfirmSignInReply} returns this
 */
proto.greyhole.myid.ConfirmSignInReply.prototype.clearTokenInfo = function() {
  return this.setTokenInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.ConfirmSignInReply.prototype.hasTokenInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.CreatePasswordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.CreatePasswordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.CreatePasswordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.CreatePasswordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    otpId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    otp: jspb.Message.getFieldWithDefault(msg, 2, ""),
    newPassword: jspb.Message.getFieldWithDefault(msg, 3, ""),
    confirmNewPassword: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.CreatePasswordRequest}
 */
proto.greyhole.myid.CreatePasswordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.CreatePasswordRequest;
  return proto.greyhole.myid.CreatePasswordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.CreatePasswordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.CreatePasswordRequest}
 */
proto.greyhole.myid.CreatePasswordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtpId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewPassword(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfirmNewPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.CreatePasswordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.CreatePasswordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.CreatePasswordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.CreatePasswordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOtpId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOtp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNewPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getConfirmNewPassword();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string otp_id = 1;
 * @return {string}
 */
proto.greyhole.myid.CreatePasswordRequest.prototype.getOtpId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.CreatePasswordRequest} returns this
 */
proto.greyhole.myid.CreatePasswordRequest.prototype.setOtpId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string otp = 2;
 * @return {string}
 */
proto.greyhole.myid.CreatePasswordRequest.prototype.getOtp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.CreatePasswordRequest} returns this
 */
proto.greyhole.myid.CreatePasswordRequest.prototype.setOtp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string new_password = 3;
 * @return {string}
 */
proto.greyhole.myid.CreatePasswordRequest.prototype.getNewPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.CreatePasswordRequest} returns this
 */
proto.greyhole.myid.CreatePasswordRequest.prototype.setNewPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string confirm_new_password = 4;
 * @return {string}
 */
proto.greyhole.myid.CreatePasswordRequest.prototype.getConfirmNewPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.CreatePasswordRequest} returns this
 */
proto.greyhole.myid.CreatePasswordRequest.prototype.setConfirmNewPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.CreateAccessTokenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.CreateAccessTokenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.CreateAccessTokenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.CreateAccessTokenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    idToken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.CreateAccessTokenRequest}
 */
proto.greyhole.myid.CreateAccessTokenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.CreateAccessTokenRequest;
  return proto.greyhole.myid.CreateAccessTokenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.CreateAccessTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.CreateAccessTokenRequest}
 */
proto.greyhole.myid.CreateAccessTokenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.CreateAccessTokenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.CreateAccessTokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.CreateAccessTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.CreateAccessTokenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id_token = 1;
 * @return {string}
 */
proto.greyhole.myid.CreateAccessTokenRequest.prototype.getIdToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.CreateAccessTokenRequest} returns this
 */
proto.greyhole.myid.CreateAccessTokenRequest.prototype.setIdToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.CreateAccessTokenReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.CreateAccessTokenReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.CreateAccessTokenReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.CreateAccessTokenReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessToken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.CreateAccessTokenReply}
 */
proto.greyhole.myid.CreateAccessTokenReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.CreateAccessTokenReply;
  return proto.greyhole.myid.CreateAccessTokenReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.CreateAccessTokenReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.CreateAccessTokenReply}
 */
proto.greyhole.myid.CreateAccessTokenReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.CreateAccessTokenReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.CreateAccessTokenReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.CreateAccessTokenReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.CreateAccessTokenReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string access_token = 1;
 * @return {string}
 */
proto.greyhole.myid.CreateAccessTokenReply.prototype.getAccessToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.CreateAccessTokenReply} returns this
 */
proto.greyhole.myid.CreateAccessTokenReply.prototype.setAccessToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greyhole.myid.MeReply.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.MeReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.MeReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.MeReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.MeReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.greyhole.myid.UserInfo.toObject(includeInstance, f),
    permissionsList: jspb.Message.toObjectList(msg.getPermissionsList(),
    proto.greyhole.myid.Permission.toObject, includeInstance),
    moduleIdsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.MeReply}
 */
proto.greyhole.myid.MeReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.MeReply;
  return proto.greyhole.myid.MeReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.MeReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.MeReply}
 */
proto.greyhole.myid.MeReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.UserInfo;
      reader.readMessage(value,proto.greyhole.myid.UserInfo.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = new proto.greyhole.myid.Permission;
      reader.readMessage(value,proto.greyhole.myid.Permission.deserializeBinaryFromReader);
      msg.addPermissions(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setModuleIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.MeReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.MeReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.MeReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.MeReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.UserInfo.serializeBinaryToWriter
    );
  }
  f = message.getPermissionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.greyhole.myid.Permission.serializeBinaryToWriter
    );
  }
  f = message.getModuleIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      3,
      f
    );
  }
};


/**
 * optional UserInfo user = 1;
 * @return {?proto.greyhole.myid.UserInfo}
 */
proto.greyhole.myid.MeReply.prototype.getUser = function() {
  return /** @type{?proto.greyhole.myid.UserInfo} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.UserInfo, 1));
};


/**
 * @param {?proto.greyhole.myid.UserInfo|undefined} value
 * @return {!proto.greyhole.myid.MeReply} returns this
*/
proto.greyhole.myid.MeReply.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.MeReply} returns this
 */
proto.greyhole.myid.MeReply.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.MeReply.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Permission permissions = 2;
 * @return {!Array<!proto.greyhole.myid.Permission>}
 */
proto.greyhole.myid.MeReply.prototype.getPermissionsList = function() {
  return /** @type{!Array<!proto.greyhole.myid.Permission>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greyhole.myid.Permission, 2));
};


/**
 * @param {!Array<!proto.greyhole.myid.Permission>} value
 * @return {!proto.greyhole.myid.MeReply} returns this
*/
proto.greyhole.myid.MeReply.prototype.setPermissionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.greyhole.myid.Permission=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greyhole.myid.Permission}
 */
proto.greyhole.myid.MeReply.prototype.addPermissions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.greyhole.myid.Permission, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.myid.MeReply} returns this
 */
proto.greyhole.myid.MeReply.prototype.clearPermissionsList = function() {
  return this.setPermissionsList([]);
};


/**
 * repeated int64 module_ids = 3;
 * @return {!Array<number>}
 */
proto.greyhole.myid.MeReply.prototype.getModuleIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.greyhole.myid.MeReply} returns this
 */
proto.greyhole.myid.MeReply.prototype.setModuleIdsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.greyhole.myid.MeReply} returns this
 */
proto.greyhole.myid.MeReply.prototype.addModuleIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.myid.MeReply} returns this
 */
proto.greyhole.myid.MeReply.prototype.clearModuleIdsList = function() {
  return this.setModuleIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.ChangePasswordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.ChangePasswordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.ChangePasswordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ChangePasswordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentPassword: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newPassword: jspb.Message.getFieldWithDefault(msg, 2, ""),
    confirmNewPassword: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.ChangePasswordRequest}
 */
proto.greyhole.myid.ChangePasswordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.ChangePasswordRequest;
  return proto.greyhole.myid.ChangePasswordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.ChangePasswordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.ChangePasswordRequest}
 */
proto.greyhole.myid.ChangePasswordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentPassword(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewPassword(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfirmNewPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.ChangePasswordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.ChangePasswordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.ChangePasswordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ChangePasswordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentPassword();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfirmNewPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string current_password = 1;
 * @return {string}
 */
proto.greyhole.myid.ChangePasswordRequest.prototype.getCurrentPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.ChangePasswordRequest} returns this
 */
proto.greyhole.myid.ChangePasswordRequest.prototype.setCurrentPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string new_password = 2;
 * @return {string}
 */
proto.greyhole.myid.ChangePasswordRequest.prototype.getNewPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.ChangePasswordRequest} returns this
 */
proto.greyhole.myid.ChangePasswordRequest.prototype.setNewPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string confirm_new_password = 3;
 * @return {string}
 */
proto.greyhole.myid.ChangePasswordRequest.prototype.getConfirmNewPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.ChangePasswordRequest} returns this
 */
proto.greyhole.myid.ChangePasswordRequest.prototype.setConfirmNewPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.UpdateMetadataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.UpdateMetadataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.UpdateMetadataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UpdateMetadataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.UpdateMetadataRequest}
 */
proto.greyhole.myid.UpdateMetadataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.UpdateMetadataRequest;
  return proto.greyhole.myid.UpdateMetadataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.UpdateMetadataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.UpdateMetadataRequest}
 */
proto.greyhole.myid.UpdateMetadataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.UpdateMetadataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.UpdateMetadataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.UpdateMetadataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UpdateMetadataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string metadata = 1;
 * @return {string}
 */
proto.greyhole.myid.UpdateMetadataRequest.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.UpdateMetadataRequest} returns this
 */
proto.greyhole.myid.UpdateMetadataRequest.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.UpdateEmailRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.UpdateEmailRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.UpdateEmailRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UpdateEmailRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.UpdateEmailRequest}
 */
proto.greyhole.myid.UpdateEmailRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.UpdateEmailRequest;
  return proto.greyhole.myid.UpdateEmailRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.UpdateEmailRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.UpdateEmailRequest}
 */
proto.greyhole.myid.UpdateEmailRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.UpdateEmailRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.UpdateEmailRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.UpdateEmailRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UpdateEmailRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.greyhole.myid.UpdateEmailRequest.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.UpdateEmailRequest} returns this
 */
proto.greyhole.myid.UpdateEmailRequest.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.greyhole.myid.UpdateEmailReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.greyhole.myid.UpdateEmailReply.ResultCase = {
  RESULT_NOT_SET: 0,
  OTP: 1,
  USER: 2
};

/**
 * @return {proto.greyhole.myid.UpdateEmailReply.ResultCase}
 */
proto.greyhole.myid.UpdateEmailReply.prototype.getResultCase = function() {
  return /** @type {proto.greyhole.myid.UpdateEmailReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.greyhole.myid.UpdateEmailReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.UpdateEmailReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.UpdateEmailReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.UpdateEmailReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UpdateEmailReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    otp: (f = msg.getOtp()) && proto.greyhole.myid.OTP.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.greyhole.myid.UserInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.UpdateEmailReply}
 */
proto.greyhole.myid.UpdateEmailReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.UpdateEmailReply;
  return proto.greyhole.myid.UpdateEmailReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.UpdateEmailReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.UpdateEmailReply}
 */
proto.greyhole.myid.UpdateEmailReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.OTP;
      reader.readMessage(value,proto.greyhole.myid.OTP.deserializeBinaryFromReader);
      msg.setOtp(value);
      break;
    case 2:
      var value = new proto.greyhole.myid.UserInfo;
      reader.readMessage(value,proto.greyhole.myid.UserInfo.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.UpdateEmailReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.UpdateEmailReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.UpdateEmailReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UpdateEmailReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOtp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.OTP.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.greyhole.myid.UserInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional OTP otp = 1;
 * @return {?proto.greyhole.myid.OTP}
 */
proto.greyhole.myid.UpdateEmailReply.prototype.getOtp = function() {
  return /** @type{?proto.greyhole.myid.OTP} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.OTP, 1));
};


/**
 * @param {?proto.greyhole.myid.OTP|undefined} value
 * @return {!proto.greyhole.myid.UpdateEmailReply} returns this
*/
proto.greyhole.myid.UpdateEmailReply.prototype.setOtp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.greyhole.myid.UpdateEmailReply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.UpdateEmailReply} returns this
 */
proto.greyhole.myid.UpdateEmailReply.prototype.clearOtp = function() {
  return this.setOtp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.UpdateEmailReply.prototype.hasOtp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UserInfo user = 2;
 * @return {?proto.greyhole.myid.UserInfo}
 */
proto.greyhole.myid.UpdateEmailReply.prototype.getUser = function() {
  return /** @type{?proto.greyhole.myid.UserInfo} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.UserInfo, 2));
};


/**
 * @param {?proto.greyhole.myid.UserInfo|undefined} value
 * @return {!proto.greyhole.myid.UpdateEmailReply} returns this
*/
proto.greyhole.myid.UpdateEmailReply.prototype.setUser = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.greyhole.myid.UpdateEmailReply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.UpdateEmailReply} returns this
 */
proto.greyhole.myid.UpdateEmailReply.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.UpdateEmailReply.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.VerifyEmailRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.VerifyEmailRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.VerifyEmailRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.VerifyEmailRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    otpId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    otp: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.VerifyEmailRequest}
 */
proto.greyhole.myid.VerifyEmailRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.VerifyEmailRequest;
  return proto.greyhole.myid.VerifyEmailRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.VerifyEmailRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.VerifyEmailRequest}
 */
proto.greyhole.myid.VerifyEmailRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtpId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.VerifyEmailRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.VerifyEmailRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.VerifyEmailRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.VerifyEmailRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOtpId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOtp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string otp_id = 1;
 * @return {string}
 */
proto.greyhole.myid.VerifyEmailRequest.prototype.getOtpId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.VerifyEmailRequest} returns this
 */
proto.greyhole.myid.VerifyEmailRequest.prototype.setOtpId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string otp = 2;
 * @return {string}
 */
proto.greyhole.myid.VerifyEmailRequest.prototype.getOtp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.VerifyEmailRequest} returns this
 */
proto.greyhole.myid.VerifyEmailRequest.prototype.setOtp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.VerifyEmailReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.VerifyEmailReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.VerifyEmailReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.VerifyEmailReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.greyhole.myid.UserInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.VerifyEmailReply}
 */
proto.greyhole.myid.VerifyEmailReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.VerifyEmailReply;
  return proto.greyhole.myid.VerifyEmailReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.VerifyEmailReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.VerifyEmailReply}
 */
proto.greyhole.myid.VerifyEmailReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.UserInfo;
      reader.readMessage(value,proto.greyhole.myid.UserInfo.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.VerifyEmailReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.VerifyEmailReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.VerifyEmailReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.VerifyEmailReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.UserInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserInfo user = 1;
 * @return {?proto.greyhole.myid.UserInfo}
 */
proto.greyhole.myid.VerifyEmailReply.prototype.getUser = function() {
  return /** @type{?proto.greyhole.myid.UserInfo} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.UserInfo, 1));
};


/**
 * @param {?proto.greyhole.myid.UserInfo|undefined} value
 * @return {!proto.greyhole.myid.VerifyEmailReply} returns this
*/
proto.greyhole.myid.VerifyEmailReply.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.VerifyEmailReply} returns this
 */
proto.greyhole.myid.VerifyEmailReply.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.VerifyEmailReply.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.UpdatePhoneNumberRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.UpdatePhoneNumberRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.UpdatePhoneNumberRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UpdatePhoneNumberRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.UpdatePhoneNumberRequest}
 */
proto.greyhole.myid.UpdatePhoneNumberRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.UpdatePhoneNumberRequest;
  return proto.greyhole.myid.UpdatePhoneNumberRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.UpdatePhoneNumberRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.UpdatePhoneNumberRequest}
 */
proto.greyhole.myid.UpdatePhoneNumberRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.UpdatePhoneNumberRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.UpdatePhoneNumberRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.UpdatePhoneNumberRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UpdatePhoneNumberRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string phone_number = 1;
 * @return {string}
 */
proto.greyhole.myid.UpdatePhoneNumberRequest.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.UpdatePhoneNumberRequest} returns this
 */
proto.greyhole.myid.UpdatePhoneNumberRequest.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.UpdatePhoneNumberV2Request.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.UpdatePhoneNumberV2Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.UpdatePhoneNumberV2Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UpdatePhoneNumberV2Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    phoneNumber: (f = msg.getPhoneNumber()) && proto.greyhole.myid.PhoneNumber.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.UpdatePhoneNumberV2Request}
 */
proto.greyhole.myid.UpdatePhoneNumberV2Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.UpdatePhoneNumberV2Request;
  return proto.greyhole.myid.UpdatePhoneNumberV2Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.UpdatePhoneNumberV2Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.UpdatePhoneNumberV2Request}
 */
proto.greyhole.myid.UpdatePhoneNumberV2Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.PhoneNumber;
      reader.readMessage(value,proto.greyhole.myid.PhoneNumber.deserializeBinaryFromReader);
      msg.setPhoneNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.UpdatePhoneNumberV2Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.UpdatePhoneNumberV2Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.UpdatePhoneNumberV2Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UpdatePhoneNumberV2Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhoneNumber();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.PhoneNumber.serializeBinaryToWriter
    );
  }
};


/**
 * optional PhoneNumber phone_number = 1;
 * @return {?proto.greyhole.myid.PhoneNumber}
 */
proto.greyhole.myid.UpdatePhoneNumberV2Request.prototype.getPhoneNumber = function() {
  return /** @type{?proto.greyhole.myid.PhoneNumber} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.PhoneNumber, 1));
};


/**
 * @param {?proto.greyhole.myid.PhoneNumber|undefined} value
 * @return {!proto.greyhole.myid.UpdatePhoneNumberV2Request} returns this
*/
proto.greyhole.myid.UpdatePhoneNumberV2Request.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.UpdatePhoneNumberV2Request} returns this
 */
proto.greyhole.myid.UpdatePhoneNumberV2Request.prototype.clearPhoneNumber = function() {
  return this.setPhoneNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.UpdatePhoneNumberV2Request.prototype.hasPhoneNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.greyhole.myid.UpdatePhoneNumberReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.greyhole.myid.UpdatePhoneNumberReply.ResultCase = {
  RESULT_NOT_SET: 0,
  OTP: 1,
  USER: 2
};

/**
 * @return {proto.greyhole.myid.UpdatePhoneNumberReply.ResultCase}
 */
proto.greyhole.myid.UpdatePhoneNumberReply.prototype.getResultCase = function() {
  return /** @type {proto.greyhole.myid.UpdatePhoneNumberReply.ResultCase} */(jspb.Message.computeOneofCase(this, proto.greyhole.myid.UpdatePhoneNumberReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.UpdatePhoneNumberReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.UpdatePhoneNumberReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.UpdatePhoneNumberReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UpdatePhoneNumberReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    otp: (f = msg.getOtp()) && proto.greyhole.myid.OTP.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.greyhole.myid.UserInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.UpdatePhoneNumberReply}
 */
proto.greyhole.myid.UpdatePhoneNumberReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.UpdatePhoneNumberReply;
  return proto.greyhole.myid.UpdatePhoneNumberReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.UpdatePhoneNumberReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.UpdatePhoneNumberReply}
 */
proto.greyhole.myid.UpdatePhoneNumberReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.OTP;
      reader.readMessage(value,proto.greyhole.myid.OTP.deserializeBinaryFromReader);
      msg.setOtp(value);
      break;
    case 2:
      var value = new proto.greyhole.myid.UserInfo;
      reader.readMessage(value,proto.greyhole.myid.UserInfo.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.UpdatePhoneNumberReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.UpdatePhoneNumberReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.UpdatePhoneNumberReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UpdatePhoneNumberReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOtp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.OTP.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.greyhole.myid.UserInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional OTP otp = 1;
 * @return {?proto.greyhole.myid.OTP}
 */
proto.greyhole.myid.UpdatePhoneNumberReply.prototype.getOtp = function() {
  return /** @type{?proto.greyhole.myid.OTP} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.OTP, 1));
};


/**
 * @param {?proto.greyhole.myid.OTP|undefined} value
 * @return {!proto.greyhole.myid.UpdatePhoneNumberReply} returns this
*/
proto.greyhole.myid.UpdatePhoneNumberReply.prototype.setOtp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.greyhole.myid.UpdatePhoneNumberReply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.UpdatePhoneNumberReply} returns this
 */
proto.greyhole.myid.UpdatePhoneNumberReply.prototype.clearOtp = function() {
  return this.setOtp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.UpdatePhoneNumberReply.prototype.hasOtp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UserInfo user = 2;
 * @return {?proto.greyhole.myid.UserInfo}
 */
proto.greyhole.myid.UpdatePhoneNumberReply.prototype.getUser = function() {
  return /** @type{?proto.greyhole.myid.UserInfo} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.UserInfo, 2));
};


/**
 * @param {?proto.greyhole.myid.UserInfo|undefined} value
 * @return {!proto.greyhole.myid.UpdatePhoneNumberReply} returns this
*/
proto.greyhole.myid.UpdatePhoneNumberReply.prototype.setUser = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.greyhole.myid.UpdatePhoneNumberReply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.UpdatePhoneNumberReply} returns this
 */
proto.greyhole.myid.UpdatePhoneNumberReply.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.UpdatePhoneNumberReply.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.VerifyPhoneNumberRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.VerifyPhoneNumberRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.VerifyPhoneNumberRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.VerifyPhoneNumberRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    otpId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    otp: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.VerifyPhoneNumberRequest}
 */
proto.greyhole.myid.VerifyPhoneNumberRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.VerifyPhoneNumberRequest;
  return proto.greyhole.myid.VerifyPhoneNumberRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.VerifyPhoneNumberRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.VerifyPhoneNumberRequest}
 */
proto.greyhole.myid.VerifyPhoneNumberRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtpId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.VerifyPhoneNumberRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.VerifyPhoneNumberRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.VerifyPhoneNumberRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.VerifyPhoneNumberRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOtpId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOtp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string otp_id = 1;
 * @return {string}
 */
proto.greyhole.myid.VerifyPhoneNumberRequest.prototype.getOtpId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.VerifyPhoneNumberRequest} returns this
 */
proto.greyhole.myid.VerifyPhoneNumberRequest.prototype.setOtpId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string otp = 2;
 * @return {string}
 */
proto.greyhole.myid.VerifyPhoneNumberRequest.prototype.getOtp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.VerifyPhoneNumberRequest} returns this
 */
proto.greyhole.myid.VerifyPhoneNumberRequest.prototype.setOtp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.VerifyPhoneNumberReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.VerifyPhoneNumberReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.VerifyPhoneNumberReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.VerifyPhoneNumberReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.greyhole.myid.UserInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.VerifyPhoneNumberReply}
 */
proto.greyhole.myid.VerifyPhoneNumberReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.VerifyPhoneNumberReply;
  return proto.greyhole.myid.VerifyPhoneNumberReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.VerifyPhoneNumberReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.VerifyPhoneNumberReply}
 */
proto.greyhole.myid.VerifyPhoneNumberReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.UserInfo;
      reader.readMessage(value,proto.greyhole.myid.UserInfo.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.VerifyPhoneNumberReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.VerifyPhoneNumberReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.VerifyPhoneNumberReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.VerifyPhoneNumberReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.UserInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserInfo user = 1;
 * @return {?proto.greyhole.myid.UserInfo}
 */
proto.greyhole.myid.VerifyPhoneNumberReply.prototype.getUser = function() {
  return /** @type{?proto.greyhole.myid.UserInfo} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.UserInfo, 1));
};


/**
 * @param {?proto.greyhole.myid.UserInfo|undefined} value
 * @return {!proto.greyhole.myid.VerifyPhoneNumberReply} returns this
*/
proto.greyhole.myid.VerifyPhoneNumberReply.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.VerifyPhoneNumberReply} returns this
 */
proto.greyhole.myid.VerifyPhoneNumberReply.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.VerifyPhoneNumberReply.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.greyhole.myid.ResetPasswordRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.greyhole.myid.ResetPasswordRequest.ByCase = {
  BY_NOT_SET: 0,
  EMAIL: 1,
  PHONE_NUMBER: 2
};

/**
 * @return {proto.greyhole.myid.ResetPasswordRequest.ByCase}
 */
proto.greyhole.myid.ResetPasswordRequest.prototype.getByCase = function() {
  return /** @type {proto.greyhole.myid.ResetPasswordRequest.ByCase} */(jspb.Message.computeOneofCase(this, proto.greyhole.myid.ResetPasswordRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.ResetPasswordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.ResetPasswordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.ResetPasswordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ResetPasswordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    captcha: (f = msg.getCaptcha()) && proto.greyhole.myid.Captcha.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.ResetPasswordRequest}
 */
proto.greyhole.myid.ResetPasswordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.ResetPasswordRequest;
  return proto.greyhole.myid.ResetPasswordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.ResetPasswordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.ResetPasswordRequest}
 */
proto.greyhole.myid.ResetPasswordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 3:
      var value = new proto.greyhole.myid.Captcha;
      reader.readMessage(value,proto.greyhole.myid.Captcha.deserializeBinaryFromReader);
      msg.setCaptcha(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.ResetPasswordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.ResetPasswordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.ResetPasswordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ResetPasswordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCaptcha();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.greyhole.myid.Captcha.serializeBinaryToWriter
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.greyhole.myid.ResetPasswordRequest.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.ResetPasswordRequest} returns this
 */
proto.greyhole.myid.ResetPasswordRequest.prototype.setEmail = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.greyhole.myid.ResetPasswordRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.greyhole.myid.ResetPasswordRequest} returns this
 */
proto.greyhole.myid.ResetPasswordRequest.prototype.clearEmail = function() {
  return jspb.Message.setOneofField(this, 1, proto.greyhole.myid.ResetPasswordRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.ResetPasswordRequest.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string phone_number = 2;
 * @return {string}
 */
proto.greyhole.myid.ResetPasswordRequest.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.ResetPasswordRequest} returns this
 */
proto.greyhole.myid.ResetPasswordRequest.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.greyhole.myid.ResetPasswordRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.greyhole.myid.ResetPasswordRequest} returns this
 */
proto.greyhole.myid.ResetPasswordRequest.prototype.clearPhoneNumber = function() {
  return jspb.Message.setOneofField(this, 2, proto.greyhole.myid.ResetPasswordRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.ResetPasswordRequest.prototype.hasPhoneNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Captcha captcha = 3;
 * @return {?proto.greyhole.myid.Captcha}
 */
proto.greyhole.myid.ResetPasswordRequest.prototype.getCaptcha = function() {
  return /** @type{?proto.greyhole.myid.Captcha} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.Captcha, 3));
};


/**
 * @param {?proto.greyhole.myid.Captcha|undefined} value
 * @return {!proto.greyhole.myid.ResetPasswordRequest} returns this
*/
proto.greyhole.myid.ResetPasswordRequest.prototype.setCaptcha = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.ResetPasswordRequest} returns this
 */
proto.greyhole.myid.ResetPasswordRequest.prototype.clearCaptcha = function() {
  return this.setCaptcha(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.ResetPasswordRequest.prototype.hasCaptcha = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.greyhole.myid.ResetPasswordV2Request.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.greyhole.myid.ResetPasswordV2Request.ByCase = {
  BY_NOT_SET: 0,
  EMAIL: 2,
  PHONE_NUMBER: 3
};

/**
 * @return {proto.greyhole.myid.ResetPasswordV2Request.ByCase}
 */
proto.greyhole.myid.ResetPasswordV2Request.prototype.getByCase = function() {
  return /** @type {proto.greyhole.myid.ResetPasswordV2Request.ByCase} */(jspb.Message.computeOneofCase(this, proto.greyhole.myid.ResetPasswordV2Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.ResetPasswordV2Request.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.ResetPasswordV2Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.ResetPasswordV2Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ResetPasswordV2Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    captcha: (f = msg.getCaptcha()) && proto.greyhole.myid.Captcha.toObject(includeInstance, f),
    email: jspb.Message.getFieldWithDefault(msg, 2, ""),
    phoneNumber: (f = msg.getPhoneNumber()) && proto.greyhole.myid.PhoneNumber.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.ResetPasswordV2Request}
 */
proto.greyhole.myid.ResetPasswordV2Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.ResetPasswordV2Request;
  return proto.greyhole.myid.ResetPasswordV2Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.ResetPasswordV2Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.ResetPasswordV2Request}
 */
proto.greyhole.myid.ResetPasswordV2Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.Captcha;
      reader.readMessage(value,proto.greyhole.myid.Captcha.deserializeBinaryFromReader);
      msg.setCaptcha(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 3:
      var value = new proto.greyhole.myid.PhoneNumber;
      reader.readMessage(value,proto.greyhole.myid.PhoneNumber.deserializeBinaryFromReader);
      msg.setPhoneNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.ResetPasswordV2Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.ResetPasswordV2Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.ResetPasswordV2Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ResetPasswordV2Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCaptcha();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.Captcha.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPhoneNumber();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.greyhole.myid.PhoneNumber.serializeBinaryToWriter
    );
  }
};


/**
 * optional Captcha captcha = 1;
 * @return {?proto.greyhole.myid.Captcha}
 */
proto.greyhole.myid.ResetPasswordV2Request.prototype.getCaptcha = function() {
  return /** @type{?proto.greyhole.myid.Captcha} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.Captcha, 1));
};


/**
 * @param {?proto.greyhole.myid.Captcha|undefined} value
 * @return {!proto.greyhole.myid.ResetPasswordV2Request} returns this
*/
proto.greyhole.myid.ResetPasswordV2Request.prototype.setCaptcha = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.ResetPasswordV2Request} returns this
 */
proto.greyhole.myid.ResetPasswordV2Request.prototype.clearCaptcha = function() {
  return this.setCaptcha(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.ResetPasswordV2Request.prototype.hasCaptcha = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string email = 2;
 * @return {string}
 */
proto.greyhole.myid.ResetPasswordV2Request.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.ResetPasswordV2Request} returns this
 */
proto.greyhole.myid.ResetPasswordV2Request.prototype.setEmail = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.greyhole.myid.ResetPasswordV2Request.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.greyhole.myid.ResetPasswordV2Request} returns this
 */
proto.greyhole.myid.ResetPasswordV2Request.prototype.clearEmail = function() {
  return jspb.Message.setOneofField(this, 2, proto.greyhole.myid.ResetPasswordV2Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.ResetPasswordV2Request.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PhoneNumber phone_number = 3;
 * @return {?proto.greyhole.myid.PhoneNumber}
 */
proto.greyhole.myid.ResetPasswordV2Request.prototype.getPhoneNumber = function() {
  return /** @type{?proto.greyhole.myid.PhoneNumber} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.PhoneNumber, 3));
};


/**
 * @param {?proto.greyhole.myid.PhoneNumber|undefined} value
 * @return {!proto.greyhole.myid.ResetPasswordV2Request} returns this
*/
proto.greyhole.myid.ResetPasswordV2Request.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.greyhole.myid.ResetPasswordV2Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.ResetPasswordV2Request} returns this
 */
proto.greyhole.myid.ResetPasswordV2Request.prototype.clearPhoneNumber = function() {
  return this.setPhoneNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.ResetPasswordV2Request.prototype.hasPhoneNumber = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.ResetPasswordReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.ResetPasswordReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.ResetPasswordReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ResetPasswordReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    otp: (f = msg.getOtp()) && proto.greyhole.myid.OTP.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.ResetPasswordReply}
 */
proto.greyhole.myid.ResetPasswordReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.ResetPasswordReply;
  return proto.greyhole.myid.ResetPasswordReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.ResetPasswordReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.ResetPasswordReply}
 */
proto.greyhole.myid.ResetPasswordReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.OTP;
      reader.readMessage(value,proto.greyhole.myid.OTP.deserializeBinaryFromReader);
      msg.setOtp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.ResetPasswordReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.ResetPasswordReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.ResetPasswordReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ResetPasswordReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOtp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.OTP.serializeBinaryToWriter
    );
  }
};


/**
 * optional OTP otp = 1;
 * @return {?proto.greyhole.myid.OTP}
 */
proto.greyhole.myid.ResetPasswordReply.prototype.getOtp = function() {
  return /** @type{?proto.greyhole.myid.OTP} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.OTP, 1));
};


/**
 * @param {?proto.greyhole.myid.OTP|undefined} value
 * @return {!proto.greyhole.myid.ResetPasswordReply} returns this
*/
proto.greyhole.myid.ResetPasswordReply.prototype.setOtp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.ResetPasswordReply} returns this
 */
proto.greyhole.myid.ResetPasswordReply.prototype.clearOtp = function() {
  return this.setOtp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.ResetPasswordReply.prototype.hasOtp = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.VerifyResetPasswordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.VerifyResetPasswordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.VerifyResetPasswordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.VerifyResetPasswordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    otpId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    otp: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.VerifyResetPasswordRequest}
 */
proto.greyhole.myid.VerifyResetPasswordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.VerifyResetPasswordRequest;
  return proto.greyhole.myid.VerifyResetPasswordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.VerifyResetPasswordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.VerifyResetPasswordRequest}
 */
proto.greyhole.myid.VerifyResetPasswordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtpId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.VerifyResetPasswordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.VerifyResetPasswordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.VerifyResetPasswordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.VerifyResetPasswordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOtpId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOtp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string otp_id = 1;
 * @return {string}
 */
proto.greyhole.myid.VerifyResetPasswordRequest.prototype.getOtpId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.VerifyResetPasswordRequest} returns this
 */
proto.greyhole.myid.VerifyResetPasswordRequest.prototype.setOtpId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string otp = 2;
 * @return {string}
 */
proto.greyhole.myid.VerifyResetPasswordRequest.prototype.getOtp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.VerifyResetPasswordRequest} returns this
 */
proto.greyhole.myid.VerifyResetPasswordRequest.prototype.setOtp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.SubmitResetPasswordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.SubmitResetPasswordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.SubmitResetPasswordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SubmitResetPasswordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    otpId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    otp: jspb.Message.getFieldWithDefault(msg, 2, ""),
    newPassword: jspb.Message.getFieldWithDefault(msg, 3, ""),
    confirmNewPassword: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.SubmitResetPasswordRequest}
 */
proto.greyhole.myid.SubmitResetPasswordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.SubmitResetPasswordRequest;
  return proto.greyhole.myid.SubmitResetPasswordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.SubmitResetPasswordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.SubmitResetPasswordRequest}
 */
proto.greyhole.myid.SubmitResetPasswordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtpId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewPassword(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfirmNewPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.SubmitResetPasswordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.SubmitResetPasswordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.SubmitResetPasswordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.SubmitResetPasswordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOtpId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOtp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNewPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getConfirmNewPassword();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string otp_id = 1;
 * @return {string}
 */
proto.greyhole.myid.SubmitResetPasswordRequest.prototype.getOtpId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SubmitResetPasswordRequest} returns this
 */
proto.greyhole.myid.SubmitResetPasswordRequest.prototype.setOtpId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string otp = 2;
 * @return {string}
 */
proto.greyhole.myid.SubmitResetPasswordRequest.prototype.getOtp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SubmitResetPasswordRequest} returns this
 */
proto.greyhole.myid.SubmitResetPasswordRequest.prototype.setOtp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string new_password = 3;
 * @return {string}
 */
proto.greyhole.myid.SubmitResetPasswordRequest.prototype.getNewPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SubmitResetPasswordRequest} returns this
 */
proto.greyhole.myid.SubmitResetPasswordRequest.prototype.setNewPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string confirm_new_password = 4;
 * @return {string}
 */
proto.greyhole.myid.SubmitResetPasswordRequest.prototype.getConfirmNewPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.SubmitResetPasswordRequest} returns this
 */
proto.greyhole.myid.SubmitResetPasswordRequest.prototype.setConfirmNewPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greyhole.myid.UserInfo.repeatedFields_ = [6,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.UserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.UserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.UserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    safeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    email: jspb.Message.getFieldWithDefault(msg, 3, ""),
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 4, ""),
    metadata: jspb.Message.getFieldWithDefault(msg, 5, ""),
    rolesList: jspb.Message.toObjectList(msg.getRolesList(),
    proto.greyhole.myid.Role.toObject, includeInstance),
    status: jspb.Message.getFieldWithDefault(msg, 7, 0),
    lastSignedIn: (f = msg.getLastSignedIn()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    credentialsList: jspb.Message.toObjectList(msg.getCredentialsList(),
    proto.greyhole.myid.Credential.toObject, includeInstance),
    phone: (f = msg.getPhone()) && proto.greyhole.myid.PhoneNumber.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.UserInfo}
 */
proto.greyhole.myid.UserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.UserInfo;
  return proto.greyhole.myid.UserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.UserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.UserInfo}
 */
proto.greyhole.myid.UserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSafeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    case 6:
      var value = new proto.greyhole.myid.Role;
      reader.readMessage(value,proto.greyhole.myid.Role.deserializeBinaryFromReader);
      msg.addRoles(value);
      break;
    case 7:
      var value = /** @type {!proto.greyhole.myid.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastSignedIn(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 10:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    case 11:
      var value = new proto.greyhole.myid.Credential;
      reader.readMessage(value,proto.greyhole.myid.Credential.deserializeBinaryFromReader);
      msg.addCredentials(value);
      break;
    case 12:
      var value = new proto.greyhole.myid.PhoneNumber;
      reader.readMessage(value,proto.greyhole.myid.PhoneNumber.deserializeBinaryFromReader);
      msg.setPhone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.UserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.UserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.UserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSafeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMetadata();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.greyhole.myid.Role.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getLastSignedIn();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCredentialsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.greyhole.myid.Credential.serializeBinaryToWriter
    );
  }
  f = message.getPhone();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.greyhole.myid.PhoneNumber.serializeBinaryToWriter
    );
  }
};


/**
 * optional string safe_id = 1;
 * @return {string}
 */
proto.greyhole.myid.UserInfo.prototype.getSafeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.UserInfo} returns this
 */
proto.greyhole.myid.UserInfo.prototype.setSafeId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.greyhole.myid.UserInfo.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.UserInfo} returns this
 */
proto.greyhole.myid.UserInfo.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string email = 3;
 * @return {string}
 */
proto.greyhole.myid.UserInfo.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.UserInfo} returns this
 */
proto.greyhole.myid.UserInfo.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string phone_number = 4;
 * @return {string}
 */
proto.greyhole.myid.UserInfo.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.UserInfo} returns this
 */
proto.greyhole.myid.UserInfo.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string metadata = 5;
 * @return {string}
 */
proto.greyhole.myid.UserInfo.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.UserInfo} returns this
 */
proto.greyhole.myid.UserInfo.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated Role roles = 6;
 * @return {!Array<!proto.greyhole.myid.Role>}
 */
proto.greyhole.myid.UserInfo.prototype.getRolesList = function() {
  return /** @type{!Array<!proto.greyhole.myid.Role>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greyhole.myid.Role, 6));
};


/**
 * @param {!Array<!proto.greyhole.myid.Role>} value
 * @return {!proto.greyhole.myid.UserInfo} returns this
*/
proto.greyhole.myid.UserInfo.prototype.setRolesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.greyhole.myid.Role=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greyhole.myid.Role}
 */
proto.greyhole.myid.UserInfo.prototype.addRoles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.greyhole.myid.Role, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.myid.UserInfo} returns this
 */
proto.greyhole.myid.UserInfo.prototype.clearRolesList = function() {
  return this.setRolesList([]);
};


/**
 * optional Status status = 7;
 * @return {!proto.greyhole.myid.Status}
 */
proto.greyhole.myid.UserInfo.prototype.getStatus = function() {
  return /** @type {!proto.greyhole.myid.Status} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.greyhole.myid.Status} value
 * @return {!proto.greyhole.myid.UserInfo} returns this
 */
proto.greyhole.myid.UserInfo.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional google.protobuf.Timestamp last_signed_in = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.greyhole.myid.UserInfo.prototype.getLastSignedIn = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.greyhole.myid.UserInfo} returns this
*/
proto.greyhole.myid.UserInfo.prototype.setLastSignedIn = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.UserInfo} returns this
 */
proto.greyhole.myid.UserInfo.prototype.clearLastSignedIn = function() {
  return this.setLastSignedIn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.UserInfo.prototype.hasLastSignedIn = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional google.protobuf.Timestamp created_at = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.greyhole.myid.UserInfo.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.greyhole.myid.UserInfo} returns this
*/
proto.greyhole.myid.UserInfo.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.UserInfo} returns this
 */
proto.greyhole.myid.UserInfo.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.UserInfo.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 10;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.greyhole.myid.UserInfo.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 10));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.greyhole.myid.UserInfo} returns this
*/
proto.greyhole.myid.UserInfo.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.UserInfo} returns this
 */
proto.greyhole.myid.UserInfo.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.UserInfo.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated Credential credentials = 11;
 * @return {!Array<!proto.greyhole.myid.Credential>}
 */
proto.greyhole.myid.UserInfo.prototype.getCredentialsList = function() {
  return /** @type{!Array<!proto.greyhole.myid.Credential>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greyhole.myid.Credential, 11));
};


/**
 * @param {!Array<!proto.greyhole.myid.Credential>} value
 * @return {!proto.greyhole.myid.UserInfo} returns this
*/
proto.greyhole.myid.UserInfo.prototype.setCredentialsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.greyhole.myid.Credential=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greyhole.myid.Credential}
 */
proto.greyhole.myid.UserInfo.prototype.addCredentials = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.greyhole.myid.Credential, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.myid.UserInfo} returns this
 */
proto.greyhole.myid.UserInfo.prototype.clearCredentialsList = function() {
  return this.setCredentialsList([]);
};


/**
 * optional PhoneNumber phone = 12;
 * @return {?proto.greyhole.myid.PhoneNumber}
 */
proto.greyhole.myid.UserInfo.prototype.getPhone = function() {
  return /** @type{?proto.greyhole.myid.PhoneNumber} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.PhoneNumber, 12));
};


/**
 * @param {?proto.greyhole.myid.PhoneNumber|undefined} value
 * @return {!proto.greyhole.myid.UserInfo} returns this
*/
proto.greyhole.myid.UserInfo.prototype.setPhone = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.UserInfo} returns this
 */
proto.greyhole.myid.UserInfo.prototype.clearPhone = function() {
  return this.setPhone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.UserInfo.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 12) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.TokenInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.TokenInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.TokenInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.TokenInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    safeId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    username: jspb.Message.getFieldWithDefault(msg, 3, ""),
    idToken: jspb.Message.getFieldWithDefault(msg, 4, ""),
    accessToken: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.TokenInfo}
 */
proto.greyhole.myid.TokenInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.TokenInfo;
  return proto.greyhole.myid.TokenInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.TokenInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.TokenInfo}
 */
proto.greyhole.myid.TokenInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSafeId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdToken(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.TokenInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.TokenInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.TokenInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.TokenInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSafeId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIdToken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAccessToken();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.greyhole.myid.TokenInfo.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.TokenInfo} returns this
 */
proto.greyhole.myid.TokenInfo.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string safe_id = 2;
 * @return {string}
 */
proto.greyhole.myid.TokenInfo.prototype.getSafeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.TokenInfo} returns this
 */
proto.greyhole.myid.TokenInfo.prototype.setSafeId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string username = 3;
 * @return {string}
 */
proto.greyhole.myid.TokenInfo.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.TokenInfo} returns this
 */
proto.greyhole.myid.TokenInfo.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string id_token = 4;
 * @return {string}
 */
proto.greyhole.myid.TokenInfo.prototype.getIdToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.TokenInfo} returns this
 */
proto.greyhole.myid.TokenInfo.prototype.setIdToken = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string access_token = 5;
 * @return {string}
 */
proto.greyhole.myid.TokenInfo.prototype.getAccessToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.TokenInfo} returns this
 */
proto.greyhole.myid.TokenInfo.prototype.setAccessToken = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.greyhole.myid.OTP.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.greyhole.myid.OTP.ResultCase = {
  RESULT_NOT_SET: 0,
  WAITING: 1,
  SUCCESS: 2
};

/**
 * @return {proto.greyhole.myid.OTP.ResultCase}
 */
proto.greyhole.myid.OTP.prototype.getResultCase = function() {
  return /** @type {proto.greyhole.myid.OTP.ResultCase} */(jspb.Message.computeOneofCase(this, proto.greyhole.myid.OTP.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.OTP.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.OTP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.OTP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.OTP.toObject = function(includeInstance, msg) {
  var f, obj = {
    waiting: jspb.Message.getFieldWithDefault(msg, 1, 0),
    success: (f = msg.getSuccess()) && proto.greyhole.myid.OTP.Info.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.OTP}
 */
proto.greyhole.myid.OTP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.OTP;
  return proto.greyhole.myid.OTP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.OTP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.OTP}
 */
proto.greyhole.myid.OTP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWaiting(value);
      break;
    case 2:
      var value = new proto.greyhole.myid.OTP.Info;
      reader.readMessage(value,proto.greyhole.myid.OTP.Info.deserializeBinaryFromReader);
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.OTP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.OTP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.OTP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.OTP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.greyhole.myid.OTP.Info.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.OTP.Info.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.OTP.Info.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.OTP.Info} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.OTP.Info.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    recipient: jspb.Message.getFieldWithDefault(msg, 2, ""),
    expiry: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.OTP.Info}
 */
proto.greyhole.myid.OTP.Info.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.OTP.Info;
  return proto.greyhole.myid.OTP.Info.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.OTP.Info} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.OTP.Info}
 */
proto.greyhole.myid.OTP.Info.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipient(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpiry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.OTP.Info.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.OTP.Info.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.OTP.Info} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.OTP.Info.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRecipient();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExpiry();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.greyhole.myid.OTP.Info.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.OTP.Info} returns this
 */
proto.greyhole.myid.OTP.Info.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string recipient = 2;
 * @return {string}
 */
proto.greyhole.myid.OTP.Info.prototype.getRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.OTP.Info} returns this
 */
proto.greyhole.myid.OTP.Info.prototype.setRecipient = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 expiry = 3;
 * @return {number}
 */
proto.greyhole.myid.OTP.Info.prototype.getExpiry = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.OTP.Info} returns this
 */
proto.greyhole.myid.OTP.Info.prototype.setExpiry = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 waiting = 1;
 * @return {number}
 */
proto.greyhole.myid.OTP.prototype.getWaiting = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.OTP} returns this
 */
proto.greyhole.myid.OTP.prototype.setWaiting = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.greyhole.myid.OTP.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.greyhole.myid.OTP} returns this
 */
proto.greyhole.myid.OTP.prototype.clearWaiting = function() {
  return jspb.Message.setOneofField(this, 1, proto.greyhole.myid.OTP.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.OTP.prototype.hasWaiting = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Info success = 2;
 * @return {?proto.greyhole.myid.OTP.Info}
 */
proto.greyhole.myid.OTP.prototype.getSuccess = function() {
  return /** @type{?proto.greyhole.myid.OTP.Info} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.OTP.Info, 2));
};


/**
 * @param {?proto.greyhole.myid.OTP.Info|undefined} value
 * @return {!proto.greyhole.myid.OTP} returns this
*/
proto.greyhole.myid.OTP.prototype.setSuccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.greyhole.myid.OTP.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.OTP} returns this
 */
proto.greyhole.myid.OTP.prototype.clearSuccess = function() {
  return this.setSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.OTP.prototype.hasSuccess = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.Captcha.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.Captcha.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.Captcha} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.Captcha.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.Captcha}
 */
proto.greyhole.myid.Captcha.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.Captcha;
  return proto.greyhole.myid.Captcha.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.Captcha} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.Captcha}
 */
proto.greyhole.myid.Captcha.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.Captcha.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.Captcha.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.Captcha} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.Captcha.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.greyhole.myid.Captcha.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.Captcha} returns this
 */
proto.greyhole.myid.Captcha.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.greyhole.myid.Captcha.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.Captcha} returns this
 */
proto.greyhole.myid.Captcha.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greyhole.myid.CreateUserRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.CreateUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.CreateUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.CreateUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.CreateUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    email: jspb.Message.getFieldWithDefault(msg, 2, ""),
    phoneNumber: (f = msg.getPhoneNumber()) && proto.greyhole.myid.PhoneNumber.toObject(includeInstance, f),
    metadata: jspb.Message.getFieldWithDefault(msg, 4, ""),
    rolesList: jspb.Message.toObjectList(msg.getRolesList(),
    proto.greyhole.myid.Role.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.CreateUserRequest}
 */
proto.greyhole.myid.CreateUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.CreateUserRequest;
  return proto.greyhole.myid.CreateUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.CreateUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.CreateUserRequest}
 */
proto.greyhole.myid.CreateUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 3:
      var value = new proto.greyhole.myid.PhoneNumber;
      reader.readMessage(value,proto.greyhole.myid.PhoneNumber.deserializeBinaryFromReader);
      msg.setPhoneNumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    case 5:
      var value = new proto.greyhole.myid.Role;
      reader.readMessage(value,proto.greyhole.myid.Role.deserializeBinaryFromReader);
      msg.addRoles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.CreateUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.CreateUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.CreateUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.CreateUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPhoneNumber();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.greyhole.myid.PhoneNumber.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.greyhole.myid.Role.serializeBinaryToWriter
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.greyhole.myid.CreateUserRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.CreateUserRequest} returns this
 */
proto.greyhole.myid.CreateUserRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string email = 2;
 * @return {string}
 */
proto.greyhole.myid.CreateUserRequest.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.CreateUserRequest} returns this
 */
proto.greyhole.myid.CreateUserRequest.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional PhoneNumber phone_number = 3;
 * @return {?proto.greyhole.myid.PhoneNumber}
 */
proto.greyhole.myid.CreateUserRequest.prototype.getPhoneNumber = function() {
  return /** @type{?proto.greyhole.myid.PhoneNumber} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.PhoneNumber, 3));
};


/**
 * @param {?proto.greyhole.myid.PhoneNumber|undefined} value
 * @return {!proto.greyhole.myid.CreateUserRequest} returns this
*/
proto.greyhole.myid.CreateUserRequest.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.CreateUserRequest} returns this
 */
proto.greyhole.myid.CreateUserRequest.prototype.clearPhoneNumber = function() {
  return this.setPhoneNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.CreateUserRequest.prototype.hasPhoneNumber = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string metadata = 4;
 * @return {string}
 */
proto.greyhole.myid.CreateUserRequest.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.CreateUserRequest} returns this
 */
proto.greyhole.myid.CreateUserRequest.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Role roles = 5;
 * @return {!Array<!proto.greyhole.myid.Role>}
 */
proto.greyhole.myid.CreateUserRequest.prototype.getRolesList = function() {
  return /** @type{!Array<!proto.greyhole.myid.Role>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greyhole.myid.Role, 5));
};


/**
 * @param {!Array<!proto.greyhole.myid.Role>} value
 * @return {!proto.greyhole.myid.CreateUserRequest} returns this
*/
proto.greyhole.myid.CreateUserRequest.prototype.setRolesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.greyhole.myid.Role=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greyhole.myid.Role}
 */
proto.greyhole.myid.CreateUserRequest.prototype.addRoles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.greyhole.myid.Role, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.myid.CreateUserRequest} returns this
 */
proto.greyhole.myid.CreateUserRequest.prototype.clearRolesList = function() {
  return this.setRolesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.CreateUserReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.CreateUserReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.CreateUserReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.CreateUserReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.greyhole.myid.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.CreateUserReply}
 */
proto.greyhole.myid.CreateUserReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.CreateUserReply;
  return proto.greyhole.myid.CreateUserReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.CreateUserReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.CreateUserReply}
 */
proto.greyhole.myid.CreateUserReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.User;
      reader.readMessage(value,proto.greyhole.myid.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.CreateUserReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.CreateUserReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.CreateUserReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.CreateUserReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.greyhole.myid.User}
 */
proto.greyhole.myid.CreateUserReply.prototype.getUser = function() {
  return /** @type{?proto.greyhole.myid.User} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.User, 1));
};


/**
 * @param {?proto.greyhole.myid.User|undefined} value
 * @return {!proto.greyhole.myid.CreateUserReply} returns this
*/
proto.greyhole.myid.CreateUserReply.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.CreateUserReply} returns this
 */
proto.greyhole.myid.CreateUserReply.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.CreateUserReply.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greyhole.myid.ListUsersRequest.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.ListUsersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.ListUsersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.ListUsersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ListUsersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, ""),
    groupIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    roleIdsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    statusesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    userId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    username: jspb.Message.getFieldWithDefault(msg, 6, ""),
    email: jspb.Message.getFieldWithDefault(msg, 7, ""),
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 8, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 9, 0),
    cursor: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.ListUsersRequest}
 */
proto.greyhole.myid.ListUsersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.ListUsersRequest;
  return proto.greyhole.myid.ListUsersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.ListUsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.ListUsersRequest}
 */
proto.greyhole.myid.ListUsersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setGroupIdsList(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setRoleIdsList(value);
      break;
    case 4:
      var value = /** @type {!Array<!proto.greyhole.myid.Status>} */ (reader.readPackedEnum());
      msg.setStatusesList(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCursor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.ListUsersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.ListUsersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.ListUsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ListUsersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGroupIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
  f = message.getRoleIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      3,
      f
    );
  }
  f = message.getStatusesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getCursor();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.greyhole.myid.ListUsersRequest.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.ListUsersRequest} returns this
 */
proto.greyhole.myid.ListUsersRequest.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated int64 group_ids = 2;
 * @return {!Array<number>}
 */
proto.greyhole.myid.ListUsersRequest.prototype.getGroupIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.greyhole.myid.ListUsersRequest} returns this
 */
proto.greyhole.myid.ListUsersRequest.prototype.setGroupIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.greyhole.myid.ListUsersRequest} returns this
 */
proto.greyhole.myid.ListUsersRequest.prototype.addGroupIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.myid.ListUsersRequest} returns this
 */
proto.greyhole.myid.ListUsersRequest.prototype.clearGroupIdsList = function() {
  return this.setGroupIdsList([]);
};


/**
 * repeated int64 role_ids = 3;
 * @return {!Array<number>}
 */
proto.greyhole.myid.ListUsersRequest.prototype.getRoleIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.greyhole.myid.ListUsersRequest} returns this
 */
proto.greyhole.myid.ListUsersRequest.prototype.setRoleIdsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.greyhole.myid.ListUsersRequest} returns this
 */
proto.greyhole.myid.ListUsersRequest.prototype.addRoleIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.myid.ListUsersRequest} returns this
 */
proto.greyhole.myid.ListUsersRequest.prototype.clearRoleIdsList = function() {
  return this.setRoleIdsList([]);
};


/**
 * repeated Status statuses = 4;
 * @return {!Array<!proto.greyhole.myid.Status>}
 */
proto.greyhole.myid.ListUsersRequest.prototype.getStatusesList = function() {
  return /** @type {!Array<!proto.greyhole.myid.Status>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<!proto.greyhole.myid.Status>} value
 * @return {!proto.greyhole.myid.ListUsersRequest} returns this
 */
proto.greyhole.myid.ListUsersRequest.prototype.setStatusesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.greyhole.myid.Status} value
 * @param {number=} opt_index
 * @return {!proto.greyhole.myid.ListUsersRequest} returns this
 */
proto.greyhole.myid.ListUsersRequest.prototype.addStatuses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.myid.ListUsersRequest} returns this
 */
proto.greyhole.myid.ListUsersRequest.prototype.clearStatusesList = function() {
  return this.setStatusesList([]);
};


/**
 * optional int64 user_id = 5;
 * @return {number}
 */
proto.greyhole.myid.ListUsersRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.ListUsersRequest} returns this
 */
proto.greyhole.myid.ListUsersRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string username = 6;
 * @return {string}
 */
proto.greyhole.myid.ListUsersRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.ListUsersRequest} returns this
 */
proto.greyhole.myid.ListUsersRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string email = 7;
 * @return {string}
 */
proto.greyhole.myid.ListUsersRequest.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.ListUsersRequest} returns this
 */
proto.greyhole.myid.ListUsersRequest.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string phone_number = 8;
 * @return {string}
 */
proto.greyhole.myid.ListUsersRequest.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.ListUsersRequest} returns this
 */
proto.greyhole.myid.ListUsersRequest.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 limit = 9;
 * @return {number}
 */
proto.greyhole.myid.ListUsersRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.ListUsersRequest} returns this
 */
proto.greyhole.myid.ListUsersRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 cursor = 10;
 * @return {number}
 */
proto.greyhole.myid.ListUsersRequest.prototype.getCursor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.ListUsersRequest} returns this
 */
proto.greyhole.myid.ListUsersRequest.prototype.setCursor = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greyhole.myid.ListUsersReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.ListUsersReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.ListUsersReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.ListUsersReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ListUsersReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.greyhole.myid.User.toObject, includeInstance),
    nextCursor: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hasMore: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    total: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.ListUsersReply}
 */
proto.greyhole.myid.ListUsersReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.ListUsersReply;
  return proto.greyhole.myid.ListUsersReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.ListUsersReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.ListUsersReply}
 */
proto.greyhole.myid.ListUsersReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.User;
      reader.readMessage(value,proto.greyhole.myid.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNextCursor(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasMore(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.ListUsersReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.ListUsersReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.ListUsersReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ListUsersReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.greyhole.myid.User.serializeBinaryToWriter
    );
  }
  f = message.getNextCursor();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getHasMore();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * repeated User users = 1;
 * @return {!Array<!proto.greyhole.myid.User>}
 */
proto.greyhole.myid.ListUsersReply.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.greyhole.myid.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greyhole.myid.User, 1));
};


/**
 * @param {!Array<!proto.greyhole.myid.User>} value
 * @return {!proto.greyhole.myid.ListUsersReply} returns this
*/
proto.greyhole.myid.ListUsersReply.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.greyhole.myid.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greyhole.myid.User}
 */
proto.greyhole.myid.ListUsersReply.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.greyhole.myid.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.myid.ListUsersReply} returns this
 */
proto.greyhole.myid.ListUsersReply.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};


/**
 * optional int64 next_cursor = 2;
 * @return {number}
 */
proto.greyhole.myid.ListUsersReply.prototype.getNextCursor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.ListUsersReply} returns this
 */
proto.greyhole.myid.ListUsersReply.prototype.setNextCursor = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool has_more = 3;
 * @return {boolean}
 */
proto.greyhole.myid.ListUsersReply.prototype.getHasMore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.greyhole.myid.ListUsersReply} returns this
 */
proto.greyhole.myid.ListUsersReply.prototype.setHasMore = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int64 total = 4;
 * @return {number}
 */
proto.greyhole.myid.ListUsersReply.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.ListUsersReply} returns this
 */
proto.greyhole.myid.ListUsersReply.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greyhole.myid.UpdateUserRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.UpdateUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.UpdateUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.UpdateUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UpdateUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    changesList: jspb.Message.toObjectList(msg.getChangesList(),
    proto.greyhole.myid.UserChange.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.UpdateUserRequest}
 */
proto.greyhole.myid.UpdateUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.UpdateUserRequest;
  return proto.greyhole.myid.UpdateUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.UpdateUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.UpdateUserRequest}
 */
proto.greyhole.myid.UpdateUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.greyhole.myid.UserChange;
      reader.readMessage(value,proto.greyhole.myid.UserChange.deserializeBinaryFromReader);
      msg.addChanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.UpdateUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.UpdateUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.UpdateUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UpdateUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getChangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.greyhole.myid.UserChange.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.greyhole.myid.UpdateUserRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.UpdateUserRequest} returns this
 */
proto.greyhole.myid.UpdateUserRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated UserChange changes = 2;
 * @return {!Array<!proto.greyhole.myid.UserChange>}
 */
proto.greyhole.myid.UpdateUserRequest.prototype.getChangesList = function() {
  return /** @type{!Array<!proto.greyhole.myid.UserChange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greyhole.myid.UserChange, 2));
};


/**
 * @param {!Array<!proto.greyhole.myid.UserChange>} value
 * @return {!proto.greyhole.myid.UpdateUserRequest} returns this
*/
proto.greyhole.myid.UpdateUserRequest.prototype.setChangesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.greyhole.myid.UserChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greyhole.myid.UserChange}
 */
proto.greyhole.myid.UpdateUserRequest.prototype.addChanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.greyhole.myid.UserChange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.myid.UpdateUserRequest} returns this
 */
proto.greyhole.myid.UpdateUserRequest.prototype.clearChangesList = function() {
  return this.setChangesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.UpdateUserReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.UpdateUserReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.UpdateUserReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UpdateUserReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.greyhole.myid.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.UpdateUserReply}
 */
proto.greyhole.myid.UpdateUserReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.UpdateUserReply;
  return proto.greyhole.myid.UpdateUserReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.UpdateUserReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.UpdateUserReply}
 */
proto.greyhole.myid.UpdateUserReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.User;
      reader.readMessage(value,proto.greyhole.myid.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.UpdateUserReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.UpdateUserReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.UpdateUserReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UpdateUserReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.greyhole.myid.User}
 */
proto.greyhole.myid.UpdateUserReply.prototype.getUser = function() {
  return /** @type{?proto.greyhole.myid.User} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.User, 1));
};


/**
 * @param {?proto.greyhole.myid.User|undefined} value
 * @return {!proto.greyhole.myid.UpdateUserReply} returns this
*/
proto.greyhole.myid.UpdateUserReply.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.UpdateUserReply} returns this
 */
proto.greyhole.myid.UpdateUserReply.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.UpdateUserReply.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.LockUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.LockUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.LockUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.LockUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.LockUserRequest}
 */
proto.greyhole.myid.LockUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.LockUserRequest;
  return proto.greyhole.myid.LockUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.LockUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.LockUserRequest}
 */
proto.greyhole.myid.LockUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.LockUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.LockUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.LockUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.LockUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.greyhole.myid.LockUserRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.LockUserRequest} returns this
 */
proto.greyhole.myid.LockUserRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.LockUserReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.LockUserReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.LockUserReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.LockUserReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.greyhole.myid.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.LockUserReply}
 */
proto.greyhole.myid.LockUserReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.LockUserReply;
  return proto.greyhole.myid.LockUserReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.LockUserReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.LockUserReply}
 */
proto.greyhole.myid.LockUserReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.User;
      reader.readMessage(value,proto.greyhole.myid.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.LockUserReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.LockUserReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.LockUserReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.LockUserReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.greyhole.myid.User}
 */
proto.greyhole.myid.LockUserReply.prototype.getUser = function() {
  return /** @type{?proto.greyhole.myid.User} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.User, 1));
};


/**
 * @param {?proto.greyhole.myid.User|undefined} value
 * @return {!proto.greyhole.myid.LockUserReply} returns this
*/
proto.greyhole.myid.LockUserReply.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.LockUserReply} returns this
 */
proto.greyhole.myid.LockUserReply.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.LockUserReply.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.UnlockUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.UnlockUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.UnlockUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UnlockUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.UnlockUserRequest}
 */
proto.greyhole.myid.UnlockUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.UnlockUserRequest;
  return proto.greyhole.myid.UnlockUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.UnlockUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.UnlockUserRequest}
 */
proto.greyhole.myid.UnlockUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.UnlockUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.UnlockUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.UnlockUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UnlockUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.greyhole.myid.UnlockUserRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.UnlockUserRequest} returns this
 */
proto.greyhole.myid.UnlockUserRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.UnlockUserReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.UnlockUserReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.UnlockUserReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UnlockUserReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.greyhole.myid.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.UnlockUserReply}
 */
proto.greyhole.myid.UnlockUserReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.UnlockUserReply;
  return proto.greyhole.myid.UnlockUserReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.UnlockUserReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.UnlockUserReply}
 */
proto.greyhole.myid.UnlockUserReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.User;
      reader.readMessage(value,proto.greyhole.myid.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.UnlockUserReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.UnlockUserReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.UnlockUserReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UnlockUserReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.greyhole.myid.User}
 */
proto.greyhole.myid.UnlockUserReply.prototype.getUser = function() {
  return /** @type{?proto.greyhole.myid.User} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.User, 1));
};


/**
 * @param {?proto.greyhole.myid.User|undefined} value
 * @return {!proto.greyhole.myid.UnlockUserReply} returns this
*/
proto.greyhole.myid.UnlockUserReply.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.UnlockUserReply} returns this
 */
proto.greyhole.myid.UnlockUserReply.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.UnlockUserReply.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.BanUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.BanUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.BanUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.BanUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.BanUserRequest}
 */
proto.greyhole.myid.BanUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.BanUserRequest;
  return proto.greyhole.myid.BanUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.BanUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.BanUserRequest}
 */
proto.greyhole.myid.BanUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.BanUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.BanUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.BanUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.BanUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.greyhole.myid.BanUserRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.BanUserRequest} returns this
 */
proto.greyhole.myid.BanUserRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.BanUserReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.BanUserReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.BanUserReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.BanUserReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.greyhole.myid.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.BanUserReply}
 */
proto.greyhole.myid.BanUserReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.BanUserReply;
  return proto.greyhole.myid.BanUserReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.BanUserReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.BanUserReply}
 */
proto.greyhole.myid.BanUserReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.User;
      reader.readMessage(value,proto.greyhole.myid.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.BanUserReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.BanUserReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.BanUserReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.BanUserReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.greyhole.myid.User}
 */
proto.greyhole.myid.BanUserReply.prototype.getUser = function() {
  return /** @type{?proto.greyhole.myid.User} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.User, 1));
};


/**
 * @param {?proto.greyhole.myid.User|undefined} value
 * @return {!proto.greyhole.myid.BanUserReply} returns this
*/
proto.greyhole.myid.BanUserReply.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.BanUserReply} returns this
 */
proto.greyhole.myid.BanUserReply.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.BanUserReply.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.UnbanUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.UnbanUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.UnbanUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UnbanUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.UnbanUserRequest}
 */
proto.greyhole.myid.UnbanUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.UnbanUserRequest;
  return proto.greyhole.myid.UnbanUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.UnbanUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.UnbanUserRequest}
 */
proto.greyhole.myid.UnbanUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.UnbanUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.UnbanUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.UnbanUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UnbanUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.greyhole.myid.UnbanUserRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.UnbanUserRequest} returns this
 */
proto.greyhole.myid.UnbanUserRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.UnbanUserReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.UnbanUserReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.UnbanUserReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UnbanUserReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.greyhole.myid.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.UnbanUserReply}
 */
proto.greyhole.myid.UnbanUserReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.UnbanUserReply;
  return proto.greyhole.myid.UnbanUserReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.UnbanUserReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.UnbanUserReply}
 */
proto.greyhole.myid.UnbanUserReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.User;
      reader.readMessage(value,proto.greyhole.myid.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.UnbanUserReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.UnbanUserReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.UnbanUserReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UnbanUserReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.greyhole.myid.User}
 */
proto.greyhole.myid.UnbanUserReply.prototype.getUser = function() {
  return /** @type{?proto.greyhole.myid.User} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.User, 1));
};


/**
 * @param {?proto.greyhole.myid.User|undefined} value
 * @return {!proto.greyhole.myid.UnbanUserReply} returns this
*/
proto.greyhole.myid.UnbanUserReply.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.UnbanUserReply} returns this
 */
proto.greyhole.myid.UnbanUserReply.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.UnbanUserReply.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.GetUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.GetUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.GetUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.GetUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.GetUserRequest}
 */
proto.greyhole.myid.GetUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.GetUserRequest;
  return proto.greyhole.myid.GetUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.GetUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.GetUserRequest}
 */
proto.greyhole.myid.GetUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.GetUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.GetUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.GetUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.GetUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.greyhole.myid.GetUserRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.GetUserRequest} returns this
 */
proto.greyhole.myid.GetUserRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.GetUserReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.GetUserReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.GetUserReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.GetUserReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.greyhole.myid.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.GetUserReply}
 */
proto.greyhole.myid.GetUserReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.GetUserReply;
  return proto.greyhole.myid.GetUserReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.GetUserReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.GetUserReply}
 */
proto.greyhole.myid.GetUserReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.User;
      reader.readMessage(value,proto.greyhole.myid.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.GetUserReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.GetUserReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.GetUserReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.GetUserReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.greyhole.myid.User}
 */
proto.greyhole.myid.GetUserReply.prototype.getUser = function() {
  return /** @type{?proto.greyhole.myid.User} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.User, 1));
};


/**
 * @param {?proto.greyhole.myid.User|undefined} value
 * @return {!proto.greyhole.myid.GetUserReply} returns this
*/
proto.greyhole.myid.GetUserReply.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.GetUserReply} returns this
 */
proto.greyhole.myid.GetUserReply.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.GetUserReply.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.ResendCreatePasswordOTPRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.ResendCreatePasswordOTPRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.ResendCreatePasswordOTPRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ResendCreatePasswordOTPRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.ResendCreatePasswordOTPRequest}
 */
proto.greyhole.myid.ResendCreatePasswordOTPRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.ResendCreatePasswordOTPRequest;
  return proto.greyhole.myid.ResendCreatePasswordOTPRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.ResendCreatePasswordOTPRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.ResendCreatePasswordOTPRequest}
 */
proto.greyhole.myid.ResendCreatePasswordOTPRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.ResendCreatePasswordOTPRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.ResendCreatePasswordOTPRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.ResendCreatePasswordOTPRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ResendCreatePasswordOTPRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.greyhole.myid.ResendCreatePasswordOTPRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.ResendCreatePasswordOTPRequest} returns this
 */
proto.greyhole.myid.ResendCreatePasswordOTPRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.ResendCreatePasswordOTPReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.ResendCreatePasswordOTPReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.ResendCreatePasswordOTPReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ResendCreatePasswordOTPReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.ResendCreatePasswordOTPReply}
 */
proto.greyhole.myid.ResendCreatePasswordOTPReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.ResendCreatePasswordOTPReply;
  return proto.greyhole.myid.ResendCreatePasswordOTPReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.ResendCreatePasswordOTPReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.ResendCreatePasswordOTPReply}
 */
proto.greyhole.myid.ResendCreatePasswordOTPReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.ResendCreatePasswordOTPReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.ResendCreatePasswordOTPReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.ResendCreatePasswordOTPReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ResendCreatePasswordOTPReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greyhole.myid.GetUsersRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.GetUsersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.GetUsersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.GetUsersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.GetUsersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.GetUsersRequest}
 */
proto.greyhole.myid.GetUsersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.GetUsersRequest;
  return proto.greyhole.myid.GetUsersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.GetUsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.GetUsersRequest}
 */
proto.greyhole.myid.GetUsersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setUserIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.GetUsersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.GetUsersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.GetUsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.GetUsersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserIdsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
};


/**
 * repeated int64 user_ids = 1;
 * @return {!Array<number>}
 */
proto.greyhole.myid.GetUsersRequest.prototype.getUserIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.greyhole.myid.GetUsersRequest} returns this
 */
proto.greyhole.myid.GetUsersRequest.prototype.setUserIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.greyhole.myid.GetUsersRequest} returns this
 */
proto.greyhole.myid.GetUsersRequest.prototype.addUserIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.myid.GetUsersRequest} returns this
 */
proto.greyhole.myid.GetUsersRequest.prototype.clearUserIdsList = function() {
  return this.setUserIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greyhole.myid.GetUsersReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.GetUsersReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.GetUsersReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.GetUsersReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.GetUsersReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.greyhole.myid.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.GetUsersReply}
 */
proto.greyhole.myid.GetUsersReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.GetUsersReply;
  return proto.greyhole.myid.GetUsersReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.GetUsersReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.GetUsersReply}
 */
proto.greyhole.myid.GetUsersReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.User;
      reader.readMessage(value,proto.greyhole.myid.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.GetUsersReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.GetUsersReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.GetUsersReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.GetUsersReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.greyhole.myid.User.serializeBinaryToWriter
    );
  }
};


/**
 * repeated User users = 1;
 * @return {!Array<!proto.greyhole.myid.User>}
 */
proto.greyhole.myid.GetUsersReply.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.greyhole.myid.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greyhole.myid.User, 1));
};


/**
 * @param {!Array<!proto.greyhole.myid.User>} value
 * @return {!proto.greyhole.myid.GetUsersReply} returns this
*/
proto.greyhole.myid.GetUsersReply.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.greyhole.myid.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greyhole.myid.User}
 */
proto.greyhole.myid.GetUsersReply.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.greyhole.myid.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.myid.GetUsersReply} returns this
 */
proto.greyhole.myid.GetUsersReply.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greyhole.myid.GetUserIDsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.GetUserIDsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.GetUserIDsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.GetUserIDsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.GetUserIDsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    safeIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.GetUserIDsRequest}
 */
proto.greyhole.myid.GetUserIDsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.GetUserIDsRequest;
  return proto.greyhole.myid.GetUserIDsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.GetUserIDsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.GetUserIDsRequest}
 */
proto.greyhole.myid.GetUserIDsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addSafeIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.GetUserIDsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.GetUserIDsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.GetUserIDsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.GetUserIDsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSafeIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string safe_ids = 1;
 * @return {!Array<string>}
 */
proto.greyhole.myid.GetUserIDsRequest.prototype.getSafeIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.greyhole.myid.GetUserIDsRequest} returns this
 */
proto.greyhole.myid.GetUserIDsRequest.prototype.setSafeIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.greyhole.myid.GetUserIDsRequest} returns this
 */
proto.greyhole.myid.GetUserIDsRequest.prototype.addSafeIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.myid.GetUserIDsRequest} returns this
 */
proto.greyhole.myid.GetUserIDsRequest.prototype.clearSafeIdsList = function() {
  return this.setSafeIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.GetUserIDsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.GetUserIDsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.GetUserIDsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.GetUserIDsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    userIdsMap: (f = msg.getUserIdsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.GetUserIDsReply}
 */
proto.greyhole.myid.GetUserIDsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.GetUserIDsReply;
  return proto.greyhole.myid.GetUserIDsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.GetUserIDsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.GetUserIDsReply}
 */
proto.greyhole.myid.GetUserIDsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getUserIdsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt64, null, "", 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.GetUserIDsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.GetUserIDsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.GetUserIDsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.GetUserIDsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserIdsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt64);
  }
};


/**
 * map<string, int64> user_ids = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.greyhole.myid.GetUserIDsReply.prototype.getUserIdsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.greyhole.myid.GetUserIDsReply} returns this
 */
proto.greyhole.myid.GetUserIDsReply.prototype.clearUserIdsMap = function() {
  this.getUserIdsMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greyhole.myid.GetUsersByUsernameRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.GetUsersByUsernameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.GetUsersByUsernameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.GetUsersByUsernameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.GetUsersByUsernameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    usernamesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.GetUsersByUsernameRequest}
 */
proto.greyhole.myid.GetUsersByUsernameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.GetUsersByUsernameRequest;
  return proto.greyhole.myid.GetUsersByUsernameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.GetUsersByUsernameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.GetUsersByUsernameRequest}
 */
proto.greyhole.myid.GetUsersByUsernameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUsernames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.GetUsersByUsernameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.GetUsersByUsernameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.GetUsersByUsernameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.GetUsersByUsernameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsernamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string usernames = 1;
 * @return {!Array<string>}
 */
proto.greyhole.myid.GetUsersByUsernameRequest.prototype.getUsernamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.greyhole.myid.GetUsersByUsernameRequest} returns this
 */
proto.greyhole.myid.GetUsersByUsernameRequest.prototype.setUsernamesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.greyhole.myid.GetUsersByUsernameRequest} returns this
 */
proto.greyhole.myid.GetUsersByUsernameRequest.prototype.addUsernames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.myid.GetUsersByUsernameRequest} returns this
 */
proto.greyhole.myid.GetUsersByUsernameRequest.prototype.clearUsernamesList = function() {
  return this.setUsernamesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.GetUsersByUsernameReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.GetUsersByUsernameReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.GetUsersByUsernameReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.GetUsersByUsernameReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersMap: (f = msg.getUsersMap()) ? f.toObject(includeInstance, proto.greyhole.myid.User.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.GetUsersByUsernameReply}
 */
proto.greyhole.myid.GetUsersByUsernameReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.GetUsersByUsernameReply;
  return proto.greyhole.myid.GetUsersByUsernameReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.GetUsersByUsernameReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.GetUsersByUsernameReply}
 */
proto.greyhole.myid.GetUsersByUsernameReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getUsersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.greyhole.myid.User.deserializeBinaryFromReader, "", new proto.greyhole.myid.User());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.GetUsersByUsernameReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.GetUsersByUsernameReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.GetUsersByUsernameReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.GetUsersByUsernameReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.greyhole.myid.User.serializeBinaryToWriter);
  }
};


/**
 * map<string, User> users = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.greyhole.myid.User>}
 */
proto.greyhole.myid.GetUsersByUsernameReply.prototype.getUsersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.greyhole.myid.User>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.greyhole.myid.User));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.greyhole.myid.GetUsersByUsernameReply} returns this
 */
proto.greyhole.myid.GetUsersByUsernameReply.prototype.clearUsersMap = function() {
  this.getUsersMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greyhole.myid.User.repeatedFields_ = [6,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.User.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    safeId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    username: jspb.Message.getFieldWithDefault(msg, 3, ""),
    email: jspb.Message.getFieldWithDefault(msg, 4, ""),
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 5, ""),
    rolesList: jspb.Message.toObjectList(msg.getRolesList(),
    proto.greyhole.myid.Role.toObject, includeInstance),
    metadata: jspb.Message.getFieldWithDefault(msg, 7, ""),
    status: jspb.Message.getFieldWithDefault(msg, 8, 0),
    universalId: jspb.Message.getFieldWithDefault(msg, 9, ""),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    lastSignedIn: (f = msg.getLastSignedIn()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    credentialsList: jspb.Message.toObjectList(msg.getCredentialsList(),
    proto.greyhole.myid.Credential.toObject, includeInstance),
    phone: (f = msg.getPhone()) && proto.greyhole.myid.PhoneNumber.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.User}
 */
proto.greyhole.myid.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.User;
  return proto.greyhole.myid.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.User}
 */
proto.greyhole.myid.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSafeId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 6:
      var value = new proto.greyhole.myid.Role;
      reader.readMessage(value,proto.greyhole.myid.Role.deserializeBinaryFromReader);
      msg.addRoles(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    case 8:
      var value = /** @type {!proto.greyhole.myid.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUniversalId(value);
      break;
    case 10:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 11:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastSignedIn(value);
      break;
    case 12:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    case 14:
      var value = new proto.greyhole.myid.Credential;
      reader.readMessage(value,proto.greyhole.myid.Credential.deserializeBinaryFromReader);
      msg.addCredentials(value);
      break;
    case 15:
      var value = new proto.greyhole.myid.PhoneNumber;
      reader.readMessage(value,proto.greyhole.myid.PhoneNumber.deserializeBinaryFromReader);
      msg.setPhone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSafeId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.greyhole.myid.Role.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getUniversalId();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastSignedIn();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCredentialsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.greyhole.myid.Credential.serializeBinaryToWriter
    );
  }
  f = message.getPhone();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.greyhole.myid.PhoneNumber.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.greyhole.myid.User.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.User} returns this
 */
proto.greyhole.myid.User.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string safe_id = 2;
 * @return {string}
 */
proto.greyhole.myid.User.prototype.getSafeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.User} returns this
 */
proto.greyhole.myid.User.prototype.setSafeId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string username = 3;
 * @return {string}
 */
proto.greyhole.myid.User.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.User} returns this
 */
proto.greyhole.myid.User.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string email = 4;
 * @return {string}
 */
proto.greyhole.myid.User.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.User} returns this
 */
proto.greyhole.myid.User.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string phone_number = 5;
 * @return {string}
 */
proto.greyhole.myid.User.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.User} returns this
 */
proto.greyhole.myid.User.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated Role roles = 6;
 * @return {!Array<!proto.greyhole.myid.Role>}
 */
proto.greyhole.myid.User.prototype.getRolesList = function() {
  return /** @type{!Array<!proto.greyhole.myid.Role>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greyhole.myid.Role, 6));
};


/**
 * @param {!Array<!proto.greyhole.myid.Role>} value
 * @return {!proto.greyhole.myid.User} returns this
*/
proto.greyhole.myid.User.prototype.setRolesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.greyhole.myid.Role=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greyhole.myid.Role}
 */
proto.greyhole.myid.User.prototype.addRoles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.greyhole.myid.Role, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.myid.User} returns this
 */
proto.greyhole.myid.User.prototype.clearRolesList = function() {
  return this.setRolesList([]);
};


/**
 * optional string metadata = 7;
 * @return {string}
 */
proto.greyhole.myid.User.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.User} returns this
 */
proto.greyhole.myid.User.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional Status status = 8;
 * @return {!proto.greyhole.myid.Status}
 */
proto.greyhole.myid.User.prototype.getStatus = function() {
  return /** @type {!proto.greyhole.myid.Status} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.greyhole.myid.Status} value
 * @return {!proto.greyhole.myid.User} returns this
 */
proto.greyhole.myid.User.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional string universal_id = 9;
 * @return {string}
 */
proto.greyhole.myid.User.prototype.getUniversalId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.User} returns this
 */
proto.greyhole.myid.User.prototype.setUniversalId = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 10;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.greyhole.myid.User.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 10));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.greyhole.myid.User} returns this
*/
proto.greyhole.myid.User.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.User} returns this
 */
proto.greyhole.myid.User.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.User.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional google.protobuf.Timestamp last_signed_in = 11;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.greyhole.myid.User.prototype.getLastSignedIn = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 11));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.greyhole.myid.User} returns this
*/
proto.greyhole.myid.User.prototype.setLastSignedIn = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.User} returns this
 */
proto.greyhole.myid.User.prototype.clearLastSignedIn = function() {
  return this.setLastSignedIn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.User.prototype.hasLastSignedIn = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 12;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.greyhole.myid.User.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 12));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.greyhole.myid.User} returns this
*/
proto.greyhole.myid.User.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.User} returns this
 */
proto.greyhole.myid.User.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.User.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated Credential credentials = 14;
 * @return {!Array<!proto.greyhole.myid.Credential>}
 */
proto.greyhole.myid.User.prototype.getCredentialsList = function() {
  return /** @type{!Array<!proto.greyhole.myid.Credential>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greyhole.myid.Credential, 14));
};


/**
 * @param {!Array<!proto.greyhole.myid.Credential>} value
 * @return {!proto.greyhole.myid.User} returns this
*/
proto.greyhole.myid.User.prototype.setCredentialsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.greyhole.myid.Credential=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greyhole.myid.Credential}
 */
proto.greyhole.myid.User.prototype.addCredentials = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.greyhole.myid.Credential, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.myid.User} returns this
 */
proto.greyhole.myid.User.prototype.clearCredentialsList = function() {
  return this.setCredentialsList([]);
};


/**
 * optional PhoneNumber phone = 15;
 * @return {?proto.greyhole.myid.PhoneNumber}
 */
proto.greyhole.myid.User.prototype.getPhone = function() {
  return /** @type{?proto.greyhole.myid.PhoneNumber} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.PhoneNumber, 15));
};


/**
 * @param {?proto.greyhole.myid.PhoneNumber|undefined} value
 * @return {!proto.greyhole.myid.User} returns this
*/
proto.greyhole.myid.User.prototype.setPhone = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.User} returns this
 */
proto.greyhole.myid.User.prototype.clearPhone = function() {
  return this.setPhone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.User.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 15) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.PhoneNumber.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.PhoneNumber.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.PhoneNumber} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.PhoneNumber.toObject = function(includeInstance, msg) {
  var f, obj = {
    countryCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nationalNumber: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.PhoneNumber}
 */
proto.greyhole.myid.PhoneNumber.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.PhoneNumber;
  return proto.greyhole.myid.PhoneNumber.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.PhoneNumber} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.PhoneNumber}
 */
proto.greyhole.myid.PhoneNumber.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNationalNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.PhoneNumber.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.PhoneNumber.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.PhoneNumber} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.PhoneNumber.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountryCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNationalNumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string country_code = 1;
 * @return {string}
 */
proto.greyhole.myid.PhoneNumber.prototype.getCountryCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.PhoneNumber} returns this
 */
proto.greyhole.myid.PhoneNumber.prototype.setCountryCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string national_number = 2;
 * @return {string}
 */
proto.greyhole.myid.PhoneNumber.prototype.getNationalNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.PhoneNumber} returns this
 */
proto.greyhole.myid.PhoneNumber.prototype.setNationalNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.Role.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.Role.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.Role} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.Role.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roleId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.Role}
 */
proto.greyhole.myid.Role.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.Role;
  return proto.greyhole.myid.Role.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.Role} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.Role}
 */
proto.greyhole.myid.Role.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGroupId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRoleId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.Role.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.Role.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.Role} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.Role.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRoleId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 group_id = 1;
 * @return {number}
 */
proto.greyhole.myid.Role.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.Role} returns this
 */
proto.greyhole.myid.Role.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 role_id = 2;
 * @return {number}
 */
proto.greyhole.myid.Role.prototype.getRoleId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.Role} returns this
 */
proto.greyhole.myid.Role.prototype.setRoleId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greyhole.myid.Roles.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.Roles.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.Roles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.Roles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.Roles.toObject = function(includeInstance, msg) {
  var f, obj = {
    rolesList: jspb.Message.toObjectList(msg.getRolesList(),
    proto.greyhole.myid.Role.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.Roles}
 */
proto.greyhole.myid.Roles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.Roles;
  return proto.greyhole.myid.Roles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.Roles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.Roles}
 */
proto.greyhole.myid.Roles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.Role;
      reader.readMessage(value,proto.greyhole.myid.Role.deserializeBinaryFromReader);
      msg.addRoles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.Roles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.Roles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.Roles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.Roles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.greyhole.myid.Role.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Role roles = 1;
 * @return {!Array<!proto.greyhole.myid.Role>}
 */
proto.greyhole.myid.Roles.prototype.getRolesList = function() {
  return /** @type{!Array<!proto.greyhole.myid.Role>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greyhole.myid.Role, 1));
};


/**
 * @param {!Array<!proto.greyhole.myid.Role>} value
 * @return {!proto.greyhole.myid.Roles} returns this
*/
proto.greyhole.myid.Roles.prototype.setRolesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.greyhole.myid.Role=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greyhole.myid.Role}
 */
proto.greyhole.myid.Roles.prototype.addRoles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.greyhole.myid.Role, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.myid.Roles} returns this
 */
proto.greyhole.myid.Roles.prototype.clearRolesList = function() {
  return this.setRolesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.greyhole.myid.UserChange.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.greyhole.myid.UserChange.FieldCase = {
  FIELD_NOT_SET: 0,
  EMAIL: 1,
  PHONE_NUMBER: 2,
  ROLES: 3,
  METADATA: 4
};

/**
 * @return {proto.greyhole.myid.UserChange.FieldCase}
 */
proto.greyhole.myid.UserChange.prototype.getFieldCase = function() {
  return /** @type {proto.greyhole.myid.UserChange.FieldCase} */(jspb.Message.computeOneofCase(this, proto.greyhole.myid.UserChange.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.UserChange.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.UserChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.UserChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UserChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    phoneNumber: (f = msg.getPhoneNumber()) && proto.greyhole.myid.PhoneNumber.toObject(includeInstance, f),
    roles: (f = msg.getRoles()) && proto.greyhole.myid.Roles.toObject(includeInstance, f),
    metadata: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.UserChange}
 */
proto.greyhole.myid.UserChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.UserChange;
  return proto.greyhole.myid.UserChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.UserChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.UserChange}
 */
proto.greyhole.myid.UserChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = new proto.greyhole.myid.PhoneNumber;
      reader.readMessage(value,proto.greyhole.myid.PhoneNumber.deserializeBinaryFromReader);
      msg.setPhoneNumber(value);
      break;
    case 3:
      var value = new proto.greyhole.myid.Roles;
      reader.readMessage(value,proto.greyhole.myid.Roles.deserializeBinaryFromReader);
      msg.setRoles(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.UserChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.UserChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.UserChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.UserChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPhoneNumber();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.greyhole.myid.PhoneNumber.serializeBinaryToWriter
    );
  }
  f = message.getRoles();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.greyhole.myid.Roles.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.greyhole.myid.UserChange.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.UserChange} returns this
 */
proto.greyhole.myid.UserChange.prototype.setEmail = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.greyhole.myid.UserChange.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.greyhole.myid.UserChange} returns this
 */
proto.greyhole.myid.UserChange.prototype.clearEmail = function() {
  return jspb.Message.setOneofField(this, 1, proto.greyhole.myid.UserChange.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.UserChange.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PhoneNumber phone_number = 2;
 * @return {?proto.greyhole.myid.PhoneNumber}
 */
proto.greyhole.myid.UserChange.prototype.getPhoneNumber = function() {
  return /** @type{?proto.greyhole.myid.PhoneNumber} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.PhoneNumber, 2));
};


/**
 * @param {?proto.greyhole.myid.PhoneNumber|undefined} value
 * @return {!proto.greyhole.myid.UserChange} returns this
*/
proto.greyhole.myid.UserChange.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.greyhole.myid.UserChange.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.UserChange} returns this
 */
proto.greyhole.myid.UserChange.prototype.clearPhoneNumber = function() {
  return this.setPhoneNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.UserChange.prototype.hasPhoneNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Roles roles = 3;
 * @return {?proto.greyhole.myid.Roles}
 */
proto.greyhole.myid.UserChange.prototype.getRoles = function() {
  return /** @type{?proto.greyhole.myid.Roles} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.Roles, 3));
};


/**
 * @param {?proto.greyhole.myid.Roles|undefined} value
 * @return {!proto.greyhole.myid.UserChange} returns this
*/
proto.greyhole.myid.UserChange.prototype.setRoles = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.greyhole.myid.UserChange.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.UserChange} returns this
 */
proto.greyhole.myid.UserChange.prototype.clearRoles = function() {
  return this.setRoles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.UserChange.prototype.hasRoles = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string metadata = 4;
 * @return {string}
 */
proto.greyhole.myid.UserChange.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.UserChange} returns this
 */
proto.greyhole.myid.UserChange.prototype.setMetadata = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.greyhole.myid.UserChange.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.greyhole.myid.UserChange} returns this
 */
proto.greyhole.myid.UserChange.prototype.clearMetadata = function() {
  return jspb.Message.setOneofField(this, 4, proto.greyhole.myid.UserChange.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.UserChange.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greyhole.myid.Permission.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.Permission.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.Permission.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.Permission} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.Permission.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.greyhole.myid.Action.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.Permission}
 */
proto.greyhole.myid.Permission.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.Permission;
  return proto.greyhole.myid.Permission.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.Permission} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.Permission}
 */
proto.greyhole.myid.Permission.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.Action;
      reader.readMessage(value,proto.greyhole.myid.Action.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.Permission.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.Permission.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.Permission} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.Permission.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.greyhole.myid.Action.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Action actions = 1;
 * @return {!Array<!proto.greyhole.myid.Action>}
 */
proto.greyhole.myid.Permission.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.greyhole.myid.Action>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greyhole.myid.Action, 1));
};


/**
 * @param {!Array<!proto.greyhole.myid.Action>} value
 * @return {!proto.greyhole.myid.Permission} returns this
*/
proto.greyhole.myid.Permission.prototype.setActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.greyhole.myid.Action=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greyhole.myid.Action}
 */
proto.greyhole.myid.Permission.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.greyhole.myid.Action, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.myid.Permission} returns this
 */
proto.greyhole.myid.Permission.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.Resource.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.Resource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.Resource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.Resource.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.Resource}
 */
proto.greyhole.myid.Resource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.Resource;
  return proto.greyhole.myid.Resource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.Resource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.Resource}
 */
proto.greyhole.myid.Resource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.Resource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.Resource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.Resource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.Resource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.greyhole.myid.Resource.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.Resource} returns this
 */
proto.greyhole.myid.Resource.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.greyhole.myid.Resource.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.Resource} returns this
 */
proto.greyhole.myid.Resource.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.greyhole.myid.Resource.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.Resource} returns this
 */
proto.greyhole.myid.Resource.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    resource: (f = msg.getResource()) && proto.greyhole.myid.Resource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.Action}
 */
proto.greyhole.myid.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.Action;
  return proto.greyhole.myid.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.Action}
 */
proto.greyhole.myid.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = new proto.greyhole.myid.Resource;
      reader.readMessage(value,proto.greyhole.myid.Resource.deserializeBinaryFromReader);
      msg.setResource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResource();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.greyhole.myid.Resource.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.greyhole.myid.Action.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.Action} returns this
 */
proto.greyhole.myid.Action.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.greyhole.myid.Action.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.Action} returns this
 */
proto.greyhole.myid.Action.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.greyhole.myid.Action.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.Action} returns this
 */
proto.greyhole.myid.Action.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Resource resource = 4;
 * @return {?proto.greyhole.myid.Resource}
 */
proto.greyhole.myid.Action.prototype.getResource = function() {
  return /** @type{?proto.greyhole.myid.Resource} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.Resource, 4));
};


/**
 * @param {?proto.greyhole.myid.Resource|undefined} value
 * @return {!proto.greyhole.myid.Action} returns this
*/
proto.greyhole.myid.Action.prototype.setResource = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.Action} returns this
 */
proto.greyhole.myid.Action.prototype.clearResource = function() {
  return this.setResource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.Action.prototype.hasResource = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.ResetResendOTPRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.ResetResendOTPRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.ResetResendOTPRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ResetResendOTPRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.ResetResendOTPRequest}
 */
proto.greyhole.myid.ResetResendOTPRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.ResetResendOTPRequest;
  return proto.greyhole.myid.ResetResendOTPRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.ResetResendOTPRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.ResetResendOTPRequest}
 */
proto.greyhole.myid.ResetResendOTPRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.ResetResendOTPRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.ResetResendOTPRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.ResetResendOTPRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ResetResendOTPRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.greyhole.myid.ResetResendOTPRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.ResetResendOTPRequest} returns this
 */
proto.greyhole.myid.ResetResendOTPRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.ResetResendOTPReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.ResetResendOTPReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.ResetResendOTPReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ResetResendOTPReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.greyhole.myid.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.ResetResendOTPReply}
 */
proto.greyhole.myid.ResetResendOTPReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.ResetResendOTPReply;
  return proto.greyhole.myid.ResetResendOTPReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.ResetResendOTPReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.ResetResendOTPReply}
 */
proto.greyhole.myid.ResetResendOTPReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.User;
      reader.readMessage(value,proto.greyhole.myid.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.ResetResendOTPReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.ResetResendOTPReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.ResetResendOTPReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ResetResendOTPReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.greyhole.myid.User}
 */
proto.greyhole.myid.ResetResendOTPReply.prototype.getUser = function() {
  return /** @type{?proto.greyhole.myid.User} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.User, 1));
};


/**
 * @param {?proto.greyhole.myid.User|undefined} value
 * @return {!proto.greyhole.myid.ResetResendOTPReply} returns this
*/
proto.greyhole.myid.ResetResendOTPReply.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.ResetResendOTPReply} returns this
 */
proto.greyhole.myid.ResetResendOTPReply.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.ResetResendOTPReply.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.greyhole.myid.Credential.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.greyhole.myid.Credential.MethodCase = {
  METHOD_NOT_SET: 0,
  MY_ID: 1,
  FACEBOOK: 2
};

/**
 * @return {proto.greyhole.myid.Credential.MethodCase}
 */
proto.greyhole.myid.Credential.prototype.getMethodCase = function() {
  return /** @type {proto.greyhole.myid.Credential.MethodCase} */(jspb.Message.computeOneofCase(this, proto.greyhole.myid.Credential.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.Credential.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.Credential.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.Credential} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.Credential.toObject = function(includeInstance, msg) {
  var f, obj = {
    myId: (f = msg.getMyId()) && proto.greyhole.myid.Credential.MyID.toObject(includeInstance, f),
    facebook: (f = msg.getFacebook()) && proto.greyhole.myid.Credential.Facebook.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.Credential}
 */
proto.greyhole.myid.Credential.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.Credential;
  return proto.greyhole.myid.Credential.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.Credential} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.Credential}
 */
proto.greyhole.myid.Credential.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.Credential.MyID;
      reader.readMessage(value,proto.greyhole.myid.Credential.MyID.deserializeBinaryFromReader);
      msg.setMyId(value);
      break;
    case 2:
      var value = new proto.greyhole.myid.Credential.Facebook;
      reader.readMessage(value,proto.greyhole.myid.Credential.Facebook.deserializeBinaryFromReader);
      msg.setFacebook(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.Credential.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.Credential.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.Credential} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.Credential.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMyId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.greyhole.myid.Credential.MyID.serializeBinaryToWriter
    );
  }
  f = message.getFacebook();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.greyhole.myid.Credential.Facebook.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.Credential.MyID.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.Credential.MyID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.Credential.MyID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.Credential.MyID.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.Credential.MyID}
 */
proto.greyhole.myid.Credential.MyID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.Credential.MyID;
  return proto.greyhole.myid.Credential.MyID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.Credential.MyID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.Credential.MyID}
 */
proto.greyhole.myid.Credential.MyID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.Credential.MyID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.Credential.MyID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.Credential.MyID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.Credential.MyID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.greyhole.myid.Credential.MyID.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.Credential.MyID} returns this
 */
proto.greyhole.myid.Credential.MyID.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.Credential.Facebook.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.Credential.Facebook.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.Credential.Facebook} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.Credential.Facebook.toObject = function(includeInstance, msg) {
  var f, obj = {
    fbId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.Credential.Facebook}
 */
proto.greyhole.myid.Credential.Facebook.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.Credential.Facebook;
  return proto.greyhole.myid.Credential.Facebook.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.Credential.Facebook} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.Credential.Facebook}
 */
proto.greyhole.myid.Credential.Facebook.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFbId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.Credential.Facebook.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.Credential.Facebook.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.Credential.Facebook} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.Credential.Facebook.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFbId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string fb_id = 1;
 * @return {string}
 */
proto.greyhole.myid.Credential.Facebook.prototype.getFbId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.Credential.Facebook} returns this
 */
proto.greyhole.myid.Credential.Facebook.prototype.setFbId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional MyID my_id = 1;
 * @return {?proto.greyhole.myid.Credential.MyID}
 */
proto.greyhole.myid.Credential.prototype.getMyId = function() {
  return /** @type{?proto.greyhole.myid.Credential.MyID} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.Credential.MyID, 1));
};


/**
 * @param {?proto.greyhole.myid.Credential.MyID|undefined} value
 * @return {!proto.greyhole.myid.Credential} returns this
*/
proto.greyhole.myid.Credential.prototype.setMyId = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.greyhole.myid.Credential.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.Credential} returns this
 */
proto.greyhole.myid.Credential.prototype.clearMyId = function() {
  return this.setMyId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.Credential.prototype.hasMyId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Facebook facebook = 2;
 * @return {?proto.greyhole.myid.Credential.Facebook}
 */
proto.greyhole.myid.Credential.prototype.getFacebook = function() {
  return /** @type{?proto.greyhole.myid.Credential.Facebook} */ (
    jspb.Message.getWrapperField(this, proto.greyhole.myid.Credential.Facebook, 2));
};


/**
 * @param {?proto.greyhole.myid.Credential.Facebook|undefined} value
 * @return {!proto.greyhole.myid.Credential} returns this
*/
proto.greyhole.myid.Credential.prototype.setFacebook = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.greyhole.myid.Credential.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.Credential} returns this
 */
proto.greyhole.myid.Credential.prototype.clearFacebook = function() {
  return this.setFacebook(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.Credential.prototype.hasFacebook = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.ListSignInEventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.ListSignInEventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.ListSignInEventsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ListSignInEventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cursor: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.ListSignInEventsRequest}
 */
proto.greyhole.myid.ListSignInEventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.ListSignInEventsRequest;
  return proto.greyhole.myid.ListSignInEventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.ListSignInEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.ListSignInEventsRequest}
 */
proto.greyhole.myid.ListSignInEventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLimit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCursor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.ListSignInEventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.ListSignInEventsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.ListSignInEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ListSignInEventsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCursor();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 limit = 1;
 * @return {number}
 */
proto.greyhole.myid.ListSignInEventsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.ListSignInEventsRequest} returns this
 */
proto.greyhole.myid.ListSignInEventsRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 cursor = 2;
 * @return {number}
 */
proto.greyhole.myid.ListSignInEventsRequest.prototype.getCursor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.ListSignInEventsRequest} returns this
 */
proto.greyhole.myid.ListSignInEventsRequest.prototype.setCursor = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greyhole.myid.ListSignInEventsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.ListSignInEventsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.ListSignInEventsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.ListSignInEventsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ListSignInEventsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.greyhole.myid.ListSignInEventsReply.Event.toObject, includeInstance),
    nextCursor: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hasMore: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    total: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.ListSignInEventsReply}
 */
proto.greyhole.myid.ListSignInEventsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.ListSignInEventsReply;
  return proto.greyhole.myid.ListSignInEventsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.ListSignInEventsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.ListSignInEventsReply}
 */
proto.greyhole.myid.ListSignInEventsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.ListSignInEventsReply.Event;
      reader.readMessage(value,proto.greyhole.myid.ListSignInEventsReply.Event.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNextCursor(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasMore(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.ListSignInEventsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.ListSignInEventsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.ListSignInEventsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ListSignInEventsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.greyhole.myid.ListSignInEventsReply.Event.serializeBinaryToWriter
    );
  }
  f = message.getNextCursor();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getHasMore();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.ListSignInEventsReply.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.ListSignInEventsReply.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.ListSignInEventsReply.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ListSignInEventsReply.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    deviceId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    deviceName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.ListSignInEventsReply.Event}
 */
proto.greyhole.myid.ListSignInEventsReply.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.ListSignInEventsReply.Event;
  return proto.greyhole.myid.ListSignInEventsReply.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.ListSignInEventsReply.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.ListSignInEventsReply.Event}
 */
proto.greyhole.myid.ListSignInEventsReply.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceName(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.ListSignInEventsReply.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.ListSignInEventsReply.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.ListSignInEventsReply.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ListSignInEventsReply.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDeviceName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.greyhole.myid.ListSignInEventsReply.Event.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.ListSignInEventsReply.Event} returns this
 */
proto.greyhole.myid.ListSignInEventsReply.Event.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 user_id = 2;
 * @return {number}
 */
proto.greyhole.myid.ListSignInEventsReply.Event.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.ListSignInEventsReply.Event} returns this
 */
proto.greyhole.myid.ListSignInEventsReply.Event.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string device_id = 3;
 * @return {string}
 */
proto.greyhole.myid.ListSignInEventsReply.Event.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.ListSignInEventsReply.Event} returns this
 */
proto.greyhole.myid.ListSignInEventsReply.Event.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string device_name = 4;
 * @return {string}
 */
proto.greyhole.myid.ListSignInEventsReply.Event.prototype.getDeviceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.ListSignInEventsReply.Event} returns this
 */
proto.greyhole.myid.ListSignInEventsReply.Event.prototype.setDeviceName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.greyhole.myid.ListSignInEventsReply.Event.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.greyhole.myid.ListSignInEventsReply.Event} returns this
*/
proto.greyhole.myid.ListSignInEventsReply.Event.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.ListSignInEventsReply.Event} returns this
 */
proto.greyhole.myid.ListSignInEventsReply.Event.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.ListSignInEventsReply.Event.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated Event events = 1;
 * @return {!Array<!proto.greyhole.myid.ListSignInEventsReply.Event>}
 */
proto.greyhole.myid.ListSignInEventsReply.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.greyhole.myid.ListSignInEventsReply.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greyhole.myid.ListSignInEventsReply.Event, 1));
};


/**
 * @param {!Array<!proto.greyhole.myid.ListSignInEventsReply.Event>} value
 * @return {!proto.greyhole.myid.ListSignInEventsReply} returns this
*/
proto.greyhole.myid.ListSignInEventsReply.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.greyhole.myid.ListSignInEventsReply.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greyhole.myid.ListSignInEventsReply.Event}
 */
proto.greyhole.myid.ListSignInEventsReply.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.greyhole.myid.ListSignInEventsReply.Event, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.myid.ListSignInEventsReply} returns this
 */
proto.greyhole.myid.ListSignInEventsReply.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};


/**
 * optional int64 next_cursor = 2;
 * @return {number}
 */
proto.greyhole.myid.ListSignInEventsReply.prototype.getNextCursor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.ListSignInEventsReply} returns this
 */
proto.greyhole.myid.ListSignInEventsReply.prototype.setNextCursor = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool has_more = 3;
 * @return {boolean}
 */
proto.greyhole.myid.ListSignInEventsReply.prototype.getHasMore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.greyhole.myid.ListSignInEventsReply} returns this
 */
proto.greyhole.myid.ListSignInEventsReply.prototype.setHasMore = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int64 total = 4;
 * @return {number}
 */
proto.greyhole.myid.ListSignInEventsReply.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.ListSignInEventsReply} returns this
 */
proto.greyhole.myid.ListSignInEventsReply.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.ListSignUpEventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.ListSignUpEventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.ListSignUpEventsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ListSignUpEventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cursor: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.ListSignUpEventsRequest}
 */
proto.greyhole.myid.ListSignUpEventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.ListSignUpEventsRequest;
  return proto.greyhole.myid.ListSignUpEventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.ListSignUpEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.ListSignUpEventsRequest}
 */
proto.greyhole.myid.ListSignUpEventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLimit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCursor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.ListSignUpEventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.ListSignUpEventsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.ListSignUpEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ListSignUpEventsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCursor();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 limit = 1;
 * @return {number}
 */
proto.greyhole.myid.ListSignUpEventsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.ListSignUpEventsRequest} returns this
 */
proto.greyhole.myid.ListSignUpEventsRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 cursor = 2;
 * @return {number}
 */
proto.greyhole.myid.ListSignUpEventsRequest.prototype.getCursor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.ListSignUpEventsRequest} returns this
 */
proto.greyhole.myid.ListSignUpEventsRequest.prototype.setCursor = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.greyhole.myid.ListSignUpEventsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.ListSignUpEventsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.ListSignUpEventsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.ListSignUpEventsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ListSignUpEventsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.greyhole.myid.ListSignUpEventsReply.Event.toObject, includeInstance),
    nextCursor: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hasMore: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    total: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.ListSignUpEventsReply}
 */
proto.greyhole.myid.ListSignUpEventsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.ListSignUpEventsReply;
  return proto.greyhole.myid.ListSignUpEventsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.ListSignUpEventsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.ListSignUpEventsReply}
 */
proto.greyhole.myid.ListSignUpEventsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.greyhole.myid.ListSignUpEventsReply.Event;
      reader.readMessage(value,proto.greyhole.myid.ListSignUpEventsReply.Event.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNextCursor(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasMore(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.ListSignUpEventsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.ListSignUpEventsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.ListSignUpEventsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ListSignUpEventsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.greyhole.myid.ListSignUpEventsReply.Event.serializeBinaryToWriter
    );
  }
  f = message.getNextCursor();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getHasMore();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.greyhole.myid.ListSignUpEventsReply.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.greyhole.myid.ListSignUpEventsReply.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.greyhole.myid.ListSignUpEventsReply.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ListSignUpEventsReply.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    deviceId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    deviceName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.greyhole.myid.ListSignUpEventsReply.Event}
 */
proto.greyhole.myid.ListSignUpEventsReply.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.greyhole.myid.ListSignUpEventsReply.Event;
  return proto.greyhole.myid.ListSignUpEventsReply.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.greyhole.myid.ListSignUpEventsReply.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.greyhole.myid.ListSignUpEventsReply.Event}
 */
proto.greyhole.myid.ListSignUpEventsReply.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceName(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.greyhole.myid.ListSignUpEventsReply.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.greyhole.myid.ListSignUpEventsReply.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.greyhole.myid.ListSignUpEventsReply.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.greyhole.myid.ListSignUpEventsReply.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDeviceName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.greyhole.myid.ListSignUpEventsReply.Event.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.ListSignUpEventsReply.Event} returns this
 */
proto.greyhole.myid.ListSignUpEventsReply.Event.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 user_id = 2;
 * @return {number}
 */
proto.greyhole.myid.ListSignUpEventsReply.Event.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.ListSignUpEventsReply.Event} returns this
 */
proto.greyhole.myid.ListSignUpEventsReply.Event.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string device_id = 3;
 * @return {string}
 */
proto.greyhole.myid.ListSignUpEventsReply.Event.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.ListSignUpEventsReply.Event} returns this
 */
proto.greyhole.myid.ListSignUpEventsReply.Event.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string device_name = 4;
 * @return {string}
 */
proto.greyhole.myid.ListSignUpEventsReply.Event.prototype.getDeviceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.greyhole.myid.ListSignUpEventsReply.Event} returns this
 */
proto.greyhole.myid.ListSignUpEventsReply.Event.prototype.setDeviceName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.greyhole.myid.ListSignUpEventsReply.Event.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.greyhole.myid.ListSignUpEventsReply.Event} returns this
*/
proto.greyhole.myid.ListSignUpEventsReply.Event.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.greyhole.myid.ListSignUpEventsReply.Event} returns this
 */
proto.greyhole.myid.ListSignUpEventsReply.Event.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.greyhole.myid.ListSignUpEventsReply.Event.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated Event events = 1;
 * @return {!Array<!proto.greyhole.myid.ListSignUpEventsReply.Event>}
 */
proto.greyhole.myid.ListSignUpEventsReply.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.greyhole.myid.ListSignUpEventsReply.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.greyhole.myid.ListSignUpEventsReply.Event, 1));
};


/**
 * @param {!Array<!proto.greyhole.myid.ListSignUpEventsReply.Event>} value
 * @return {!proto.greyhole.myid.ListSignUpEventsReply} returns this
*/
proto.greyhole.myid.ListSignUpEventsReply.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.greyhole.myid.ListSignUpEventsReply.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.greyhole.myid.ListSignUpEventsReply.Event}
 */
proto.greyhole.myid.ListSignUpEventsReply.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.greyhole.myid.ListSignUpEventsReply.Event, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.greyhole.myid.ListSignUpEventsReply} returns this
 */
proto.greyhole.myid.ListSignUpEventsReply.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};


/**
 * optional int64 next_cursor = 2;
 * @return {number}
 */
proto.greyhole.myid.ListSignUpEventsReply.prototype.getNextCursor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.ListSignUpEventsReply} returns this
 */
proto.greyhole.myid.ListSignUpEventsReply.prototype.setNextCursor = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool has_more = 3;
 * @return {boolean}
 */
proto.greyhole.myid.ListSignUpEventsReply.prototype.getHasMore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.greyhole.myid.ListSignUpEventsReply} returns this
 */
proto.greyhole.myid.ListSignUpEventsReply.prototype.setHasMore = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int64 total = 4;
 * @return {number}
 */
proto.greyhole.myid.ListSignUpEventsReply.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.greyhole.myid.ListSignUpEventsReply} returns this
 */
proto.greyhole.myid.ListSignUpEventsReply.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.greyhole.myid.Status = {
  UNSPECIFIED: 0,
  INACTIVE: 1,
  ACTIVE: 2,
  LOCKED: 3,
  BANNED: 4
};

goog.object.extend(exports, proto.greyhole.myid);
