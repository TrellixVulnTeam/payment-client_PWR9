"use strict";
/**
 * @fileoverview gRPC-Web generated client stub for greyhole.myid
 * @enhanceable
 * @public
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColdBrewClient = exports.WaitressClient = exports.TheCoffeeHouseClient = exports.MyIDClient = void 0;
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
var grpcWeb = __importStar(require("grpc-web"));
var google_protobuf_empty_pb = __importStar(require("google-protobuf/google/protobuf/empty_pb"));
var myid_api_myid_pb = __importStar(require("./myid_pb"));
var MyIDClient = /** @class */ (function () {
    function MyIDClient(hostname, credentials, options) {
        this.methodInfoSignUp = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.SignUpReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.SignUpReply.deserializeBinary);
        this.methodInfoSignIn = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.SignInReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.SignInReply.deserializeBinary);
        this.methodInfoSignUpV2 = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.SignUpReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.SignUpReply.deserializeBinary);
        this.methodInfoSignInV2 = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.SignInReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.SignInReply.deserializeBinary);
        this.methodInfoAddCredential = new grpcWeb.AbstractClientBase.MethodInfo(google_protobuf_empty_pb.Empty, function (request) {
            return request.serializeBinary();
        }, google_protobuf_empty_pb.Empty.deserializeBinary);
        this.methodInfoResendSignInOTP = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.ResendSignInOTPReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.ResendSignInOTPReply.deserializeBinary);
        this.methodInfoConfirmSignIn = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.ConfirmSignInReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.ConfirmSignInReply.deserializeBinary);
        this.methodInfoSignOut = new grpcWeb.AbstractClientBase.MethodInfo(google_protobuf_empty_pb.Empty, function (request) {
            return request.serializeBinary();
        }, google_protobuf_empty_pb.Empty.deserializeBinary);
        this.methodInfoCreatePassword = new grpcWeb.AbstractClientBase.MethodInfo(google_protobuf_empty_pb.Empty, function (request) {
            return request.serializeBinary();
        }, google_protobuf_empty_pb.Empty.deserializeBinary);
        this.methodInfoCreateAccessToken = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.CreateAccessTokenReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.CreateAccessTokenReply.deserializeBinary);
        this.methodInfoMe = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.MeReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.MeReply.deserializeBinary);
        this.methodInfoChangePassword = new grpcWeb.AbstractClientBase.MethodInfo(google_protobuf_empty_pb.Empty, function (request) {
            return request.serializeBinary();
        }, google_protobuf_empty_pb.Empty.deserializeBinary);
        this.methodInfoUpdateMetadata = new grpcWeb.AbstractClientBase.MethodInfo(google_protobuf_empty_pb.Empty, function (request) {
            return request.serializeBinary();
        }, google_protobuf_empty_pb.Empty.deserializeBinary);
        this.methodInfoUpdateEmail = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.UpdateEmailReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.UpdateEmailReply.deserializeBinary);
        this.methodInfoVerifyEmail = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.VerifyEmailReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.VerifyEmailReply.deserializeBinary);
        this.methodInfoUpdatePhoneNumber = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.UpdatePhoneNumberReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.UpdatePhoneNumberReply.deserializeBinary);
        this.methodInfoUpdatePhoneNumberV2 = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.UpdatePhoneNumberReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.UpdatePhoneNumberReply.deserializeBinary);
        this.methodInfoVerifyPhoneNumber = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.VerifyPhoneNumberReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.VerifyPhoneNumberReply.deserializeBinary);
        this.methodInfoResetPassword = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.ResetPasswordReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.ResetPasswordReply.deserializeBinary);
        this.methodInfoResetPasswordV2 = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.ResetPasswordReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.ResetPasswordReply.deserializeBinary);
        this.methodInfoVerifyResetPassword = new grpcWeb.AbstractClientBase.MethodInfo(google_protobuf_empty_pb.Empty, function (request) {
            return request.serializeBinary();
        }, google_protobuf_empty_pb.Empty.deserializeBinary);
        this.methodInfoSubmitResetPassword = new grpcWeb.AbstractClientBase.MethodInfo(google_protobuf_empty_pb.Empty, function (request) {
            return request.serializeBinary();
        }, google_protobuf_empty_pb.Empty.deserializeBinary);
        if (!options)
            options = {};
        if (!credentials)
            credentials = {};
        options['format'] = 'text';
        this.client_ = new grpcWeb.GrpcWebClientBase(options);
        this.hostname_ = hostname;
        this.credentials_ = credentials;
        this.options_ = options;
    }
    MyIDClient.prototype.signUp = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/SignUp', request, metadata || {}, this.methodInfoSignUp, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/SignUp', request, metadata || {}, this.methodInfoSignUp);
    };
    MyIDClient.prototype.signIn = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/SignIn', request, metadata || {}, this.methodInfoSignIn, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/SignIn', request, metadata || {}, this.methodInfoSignIn);
    };
    MyIDClient.prototype.signUpV2 = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/SignUpV2', request, metadata || {}, this.methodInfoSignUpV2, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/SignUpV2', request, metadata || {}, this.methodInfoSignUpV2);
    };
    MyIDClient.prototype.signInV2 = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/SignInV2', request, metadata || {}, this.methodInfoSignInV2, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/SignInV2', request, metadata || {}, this.methodInfoSignInV2);
    };
    MyIDClient.prototype.addCredential = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/AddCredential', request, metadata || {}, this.methodInfoAddCredential, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/AddCredential', request, metadata || {}, this.methodInfoAddCredential);
    };
    MyIDClient.prototype.resendSignInOTP = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/ResendSignInOTP', request, metadata || {}, this.methodInfoResendSignInOTP, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/ResendSignInOTP', request, metadata || {}, this.methodInfoResendSignInOTP);
    };
    MyIDClient.prototype.confirmSignIn = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/ConfirmSignIn', request, metadata || {}, this.methodInfoConfirmSignIn, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/ConfirmSignIn', request, metadata || {}, this.methodInfoConfirmSignIn);
    };
    MyIDClient.prototype.signOut = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/SignOut', request, metadata || {}, this.methodInfoSignOut, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/SignOut', request, metadata || {}, this.methodInfoSignOut);
    };
    MyIDClient.prototype.createPassword = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/CreatePassword', request, metadata || {}, this.methodInfoCreatePassword, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/CreatePassword', request, metadata || {}, this.methodInfoCreatePassword);
    };
    MyIDClient.prototype.createAccessToken = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/CreateAccessToken', request, metadata || {}, this.methodInfoCreateAccessToken, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/CreateAccessToken', request, metadata || {}, this.methodInfoCreateAccessToken);
    };
    MyIDClient.prototype.me = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/Me', request, metadata || {}, this.methodInfoMe, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/Me', request, metadata || {}, this.methodInfoMe);
    };
    MyIDClient.prototype.changePassword = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/ChangePassword', request, metadata || {}, this.methodInfoChangePassword, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/ChangePassword', request, metadata || {}, this.methodInfoChangePassword);
    };
    MyIDClient.prototype.updateMetadata = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/UpdateMetadata', request, metadata || {}, this.methodInfoUpdateMetadata, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/UpdateMetadata', request, metadata || {}, this.methodInfoUpdateMetadata);
    };
    MyIDClient.prototype.updateEmail = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/UpdateEmail', request, metadata || {}, this.methodInfoUpdateEmail, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/UpdateEmail', request, metadata || {}, this.methodInfoUpdateEmail);
    };
    MyIDClient.prototype.verifyEmail = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/VerifyEmail', request, metadata || {}, this.methodInfoVerifyEmail, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/VerifyEmail', request, metadata || {}, this.methodInfoVerifyEmail);
    };
    MyIDClient.prototype.updatePhoneNumber = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/UpdatePhoneNumber', request, metadata || {}, this.methodInfoUpdatePhoneNumber, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/UpdatePhoneNumber', request, metadata || {}, this.methodInfoUpdatePhoneNumber);
    };
    MyIDClient.prototype.updatePhoneNumberV2 = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/UpdatePhoneNumberV2', request, metadata || {}, this.methodInfoUpdatePhoneNumberV2, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/UpdatePhoneNumberV2', request, metadata || {}, this.methodInfoUpdatePhoneNumberV2);
    };
    MyIDClient.prototype.verifyPhoneNumber = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/VerifyPhoneNumber', request, metadata || {}, this.methodInfoVerifyPhoneNumber, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/VerifyPhoneNumber', request, metadata || {}, this.methodInfoVerifyPhoneNumber);
    };
    MyIDClient.prototype.resetPassword = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/ResetPassword', request, metadata || {}, this.methodInfoResetPassword, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/ResetPassword', request, metadata || {}, this.methodInfoResetPassword);
    };
    MyIDClient.prototype.resetPasswordV2 = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/ResetPasswordV2', request, metadata || {}, this.methodInfoResetPasswordV2, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/ResetPasswordV2', request, metadata || {}, this.methodInfoResetPasswordV2);
    };
    MyIDClient.prototype.verifyResetPassword = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/VerifyResetPassword', request, metadata || {}, this.methodInfoVerifyResetPassword, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/VerifyResetPassword', request, metadata || {}, this.methodInfoVerifyResetPassword);
    };
    MyIDClient.prototype.submitResetPassword = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.MyID/SubmitResetPassword', request, metadata || {}, this.methodInfoSubmitResetPassword, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.MyID/SubmitResetPassword', request, metadata || {}, this.methodInfoSubmitResetPassword);
    };
    return MyIDClient;
}());
exports.MyIDClient = MyIDClient;
var TheCoffeeHouseClient = /** @class */ (function () {
    function TheCoffeeHouseClient(hostname, credentials, options) {
        this.methodInfoCreateUser = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.CreateUserReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.CreateUserReply.deserializeBinary);
        this.methodInfoListUsers = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.ListUsersReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.ListUsersReply.deserializeBinary);
        this.methodInfoUpdateUser = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.UpdateUserReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.UpdateUserReply.deserializeBinary);
        this.methodInfoLockUser = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.LockUserReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.LockUserReply.deserializeBinary);
        this.methodInfoUnlockUser = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.UnlockUserReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.UnlockUserReply.deserializeBinary);
        this.methodInfoBanUser = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.BanUserReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.BanUserReply.deserializeBinary);
        this.methodInfoUnbanUser = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.UnbanUserReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.UnbanUserReply.deserializeBinary);
        this.methodInfoGetUser = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.GetUserReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.GetUserReply.deserializeBinary);
        this.methodInfoResendCreatePasswordOTP = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.ResendCreatePasswordOTPReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.ResendCreatePasswordOTPReply.deserializeBinary);
        this.methodInfoGetUsers = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.GetUsersReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.GetUsersReply.deserializeBinary);
        this.methodInfoResetResendOTP = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.ResetResendOTPReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.ResetResendOTPReply.deserializeBinary);
        if (!options)
            options = {};
        if (!credentials)
            credentials = {};
        options['format'] = 'text';
        this.client_ = new grpcWeb.GrpcWebClientBase(options);
        this.hostname_ = hostname;
        this.credentials_ = credentials;
        this.options_ = options;
    }
    TheCoffeeHouseClient.prototype.createUser = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.TheCoffeeHouse/CreateUser', request, metadata || {}, this.methodInfoCreateUser, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.TheCoffeeHouse/CreateUser', request, metadata || {}, this.methodInfoCreateUser);
    };
    TheCoffeeHouseClient.prototype.listUsers = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.TheCoffeeHouse/ListUsers', request, metadata || {}, this.methodInfoListUsers, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.TheCoffeeHouse/ListUsers', request, metadata || {}, this.methodInfoListUsers);
    };
    TheCoffeeHouseClient.prototype.updateUser = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.TheCoffeeHouse/UpdateUser', request, metadata || {}, this.methodInfoUpdateUser, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.TheCoffeeHouse/UpdateUser', request, metadata || {}, this.methodInfoUpdateUser);
    };
    TheCoffeeHouseClient.prototype.lockUser = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.TheCoffeeHouse/LockUser', request, metadata || {}, this.methodInfoLockUser, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.TheCoffeeHouse/LockUser', request, metadata || {}, this.methodInfoLockUser);
    };
    TheCoffeeHouseClient.prototype.unlockUser = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.TheCoffeeHouse/UnlockUser', request, metadata || {}, this.methodInfoUnlockUser, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.TheCoffeeHouse/UnlockUser', request, metadata || {}, this.methodInfoUnlockUser);
    };
    TheCoffeeHouseClient.prototype.banUser = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.TheCoffeeHouse/BanUser', request, metadata || {}, this.methodInfoBanUser, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.TheCoffeeHouse/BanUser', request, metadata || {}, this.methodInfoBanUser);
    };
    TheCoffeeHouseClient.prototype.unbanUser = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.TheCoffeeHouse/UnbanUser', request, metadata || {}, this.methodInfoUnbanUser, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.TheCoffeeHouse/UnbanUser', request, metadata || {}, this.methodInfoUnbanUser);
    };
    TheCoffeeHouseClient.prototype.getUser = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.TheCoffeeHouse/GetUser', request, metadata || {}, this.methodInfoGetUser, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.TheCoffeeHouse/GetUser', request, metadata || {}, this.methodInfoGetUser);
    };
    TheCoffeeHouseClient.prototype.resendCreatePasswordOTP = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.TheCoffeeHouse/ResendCreatePasswordOTP', request, metadata || {}, this.methodInfoResendCreatePasswordOTP, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.TheCoffeeHouse/ResendCreatePasswordOTP', request, metadata || {}, this.methodInfoResendCreatePasswordOTP);
    };
    TheCoffeeHouseClient.prototype.getUsers = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.TheCoffeeHouse/GetUsers', request, metadata || {}, this.methodInfoGetUsers, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.TheCoffeeHouse/GetUsers', request, metadata || {}, this.methodInfoGetUsers);
    };
    TheCoffeeHouseClient.prototype.resetResendOTP = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.TheCoffeeHouse/ResetResendOTP', request, metadata || {}, this.methodInfoResetResendOTP, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.TheCoffeeHouse/ResetResendOTP', request, metadata || {}, this.methodInfoResetResendOTP);
    };
    return TheCoffeeHouseClient;
}());
exports.TheCoffeeHouseClient = TheCoffeeHouseClient;
var WaitressClient = /** @class */ (function () {
    function WaitressClient(hostname, credentials, options) {
        this.methodInfoGetUsers = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.GetUsersReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.GetUsersReply.deserializeBinary);
        this.methodInfoGetUserIDs = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.GetUserIDsReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.GetUserIDsReply.deserializeBinary);
        this.methodInfoGetUsersByUsername = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.GetUsersByUsernameReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.GetUsersByUsernameReply.deserializeBinary);
        if (!options)
            options = {};
        if (!credentials)
            credentials = {};
        options['format'] = 'text';
        this.client_ = new grpcWeb.GrpcWebClientBase(options);
        this.hostname_ = hostname;
        this.credentials_ = credentials;
        this.options_ = options;
    }
    WaitressClient.prototype.getUsers = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.Waitress/GetUsers', request, metadata || {}, this.methodInfoGetUsers, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.Waitress/GetUsers', request, metadata || {}, this.methodInfoGetUsers);
    };
    WaitressClient.prototype.getUserIDs = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.Waitress/GetUserIDs', request, metadata || {}, this.methodInfoGetUserIDs, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.Waitress/GetUserIDs', request, metadata || {}, this.methodInfoGetUserIDs);
    };
    WaitressClient.prototype.getUsersByUsername = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.Waitress/GetUsersByUsername', request, metadata || {}, this.methodInfoGetUsersByUsername, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.Waitress/GetUsersByUsername', request, metadata || {}, this.methodInfoGetUsersByUsername);
    };
    return WaitressClient;
}());
exports.WaitressClient = WaitressClient;
var ColdBrewClient = /** @class */ (function () {
    function ColdBrewClient(hostname, credentials, options) {
        this.methodInfoListSignInEvents = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.ListSignInEventsReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.ListSignInEventsReply.deserializeBinary);
        this.methodInfoListSignUpEvents = new grpcWeb.AbstractClientBase.MethodInfo(myid_api_myid_pb.ListSignUpEventsReply, function (request) {
            return request.serializeBinary();
        }, myid_api_myid_pb.ListSignUpEventsReply.deserializeBinary);
        if (!options)
            options = {};
        if (!credentials)
            credentials = {};
        options['format'] = 'text';
        this.client_ = new grpcWeb.GrpcWebClientBase(options);
        this.hostname_ = hostname;
        this.credentials_ = credentials;
        this.options_ = options;
    }
    ColdBrewClient.prototype.listSignInEvents = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.ColdBrew/ListSignInEvents', request, metadata || {}, this.methodInfoListSignInEvents, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.ColdBrew/ListSignInEvents', request, metadata || {}, this.methodInfoListSignInEvents);
    };
    ColdBrewClient.prototype.listSignUpEvents = function (request, metadata, callback) {
        if (callback !== undefined) {
            return this.client_.rpcCall(this.hostname_ +
                '/greyhole.myid.ColdBrew/ListSignUpEvents', request, metadata || {}, this.methodInfoListSignUpEvents, callback);
        }
        return this.client_.unaryCall(this.hostname_ +
            '/greyhole.myid.ColdBrew/ListSignUpEvents', request, metadata || {}, this.methodInfoListSignUpEvents);
    };
    return ColdBrewClient;
}());
exports.ColdBrewClient = ColdBrewClient;
