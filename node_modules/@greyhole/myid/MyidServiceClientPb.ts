/**
 * @fileoverview gRPC-Web generated client stub for greyhole.myid
 * @enhanceable
 * @public
 */

// GENERATED CODE -- DO NOT EDIT!


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';
import * as myid_api_myid_pb from './myid_pb';


export class MyIDClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname;
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodInfoSignUp = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.SignUpReply,
    (request: myid_api_myid_pb.SignUpRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.SignUpReply.deserializeBinary
  );

  signUp(
    request: myid_api_myid_pb.SignUpRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.SignUpReply>;

  signUp(
    request: myid_api_myid_pb.SignUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.SignUpReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.SignUpReply>;

  signUp(
    request: myid_api_myid_pb.SignUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.SignUpReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/SignUp',
        request,
        metadata || {},
        this.methodInfoSignUp,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/SignUp',
    request,
    metadata || {},
    this.methodInfoSignUp);
  }

  methodInfoSignIn = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.SignInReply,
    (request: myid_api_myid_pb.SignInRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.SignInReply.deserializeBinary
  );

  signIn(
    request: myid_api_myid_pb.SignInRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.SignInReply>;

  signIn(
    request: myid_api_myid_pb.SignInRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.SignInReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.SignInReply>;

  signIn(
    request: myid_api_myid_pb.SignInRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.SignInReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/SignIn',
        request,
        metadata || {},
        this.methodInfoSignIn,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/SignIn',
    request,
    metadata || {},
    this.methodInfoSignIn);
  }

  methodInfoSignUpV2 = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.SignUpReply,
    (request: myid_api_myid_pb.SignUpV2Request) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.SignUpReply.deserializeBinary
  );

  signUpV2(
    request: myid_api_myid_pb.SignUpV2Request,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.SignUpReply>;

  signUpV2(
    request: myid_api_myid_pb.SignUpV2Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.SignUpReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.SignUpReply>;

  signUpV2(
    request: myid_api_myid_pb.SignUpV2Request,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.SignUpReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/SignUpV2',
        request,
        metadata || {},
        this.methodInfoSignUpV2,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/SignUpV2',
    request,
    metadata || {},
    this.methodInfoSignUpV2);
  }

  methodInfoSignInV2 = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.SignInReply,
    (request: myid_api_myid_pb.SignInV2Request) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.SignInReply.deserializeBinary
  );

  signInV2(
    request: myid_api_myid_pb.SignInV2Request,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.SignInReply>;

  signInV2(
    request: myid_api_myid_pb.SignInV2Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.SignInReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.SignInReply>;

  signInV2(
    request: myid_api_myid_pb.SignInV2Request,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.SignInReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/SignInV2',
        request,
        metadata || {},
        this.methodInfoSignInV2,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/SignInV2',
    request,
    metadata || {},
    this.methodInfoSignInV2);
  }

  methodInfoAddCredential = new grpcWeb.AbstractClientBase.MethodInfo(
    google_protobuf_empty_pb.Empty,
    (request: myid_api_myid_pb.AddCredentialRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  addCredential(
    request: myid_api_myid_pb.AddCredentialRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  addCredential(
    request: myid_api_myid_pb.AddCredentialRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  addCredential(
    request: myid_api_myid_pb.AddCredentialRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/AddCredential',
        request,
        metadata || {},
        this.methodInfoAddCredential,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/AddCredential',
    request,
    metadata || {},
    this.methodInfoAddCredential);
  }

  methodInfoResendSignInOTP = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.ResendSignInOTPReply,
    (request: myid_api_myid_pb.ResendSignInOTPRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.ResendSignInOTPReply.deserializeBinary
  );

  resendSignInOTP(
    request: myid_api_myid_pb.ResendSignInOTPRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.ResendSignInOTPReply>;

  resendSignInOTP(
    request: myid_api_myid_pb.ResendSignInOTPRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.ResendSignInOTPReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.ResendSignInOTPReply>;

  resendSignInOTP(
    request: myid_api_myid_pb.ResendSignInOTPRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.ResendSignInOTPReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/ResendSignInOTP',
        request,
        metadata || {},
        this.methodInfoResendSignInOTP,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/ResendSignInOTP',
    request,
    metadata || {},
    this.methodInfoResendSignInOTP);
  }

  methodInfoConfirmSignIn = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.ConfirmSignInReply,
    (request: myid_api_myid_pb.ConfirmSignInRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.ConfirmSignInReply.deserializeBinary
  );

  confirmSignIn(
    request: myid_api_myid_pb.ConfirmSignInRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.ConfirmSignInReply>;

  confirmSignIn(
    request: myid_api_myid_pb.ConfirmSignInRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.ConfirmSignInReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.ConfirmSignInReply>;

  confirmSignIn(
    request: myid_api_myid_pb.ConfirmSignInRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.ConfirmSignInReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/ConfirmSignIn',
        request,
        metadata || {},
        this.methodInfoConfirmSignIn,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/ConfirmSignIn',
    request,
    metadata || {},
    this.methodInfoConfirmSignIn);
  }

  methodInfoSignOut = new grpcWeb.AbstractClientBase.MethodInfo(
    google_protobuf_empty_pb.Empty,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  signOut(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  signOut(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  signOut(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/SignOut',
        request,
        metadata || {},
        this.methodInfoSignOut,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/SignOut',
    request,
    metadata || {},
    this.methodInfoSignOut);
  }

  methodInfoCreatePassword = new grpcWeb.AbstractClientBase.MethodInfo(
    google_protobuf_empty_pb.Empty,
    (request: myid_api_myid_pb.CreatePasswordRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  createPassword(
    request: myid_api_myid_pb.CreatePasswordRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  createPassword(
    request: myid_api_myid_pb.CreatePasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  createPassword(
    request: myid_api_myid_pb.CreatePasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/CreatePassword',
        request,
        metadata || {},
        this.methodInfoCreatePassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/CreatePassword',
    request,
    metadata || {},
    this.methodInfoCreatePassword);
  }

  methodInfoCreateAccessToken = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.CreateAccessTokenReply,
    (request: myid_api_myid_pb.CreateAccessTokenRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.CreateAccessTokenReply.deserializeBinary
  );

  createAccessToken(
    request: myid_api_myid_pb.CreateAccessTokenRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.CreateAccessTokenReply>;

  createAccessToken(
    request: myid_api_myid_pb.CreateAccessTokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.CreateAccessTokenReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.CreateAccessTokenReply>;

  createAccessToken(
    request: myid_api_myid_pb.CreateAccessTokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.CreateAccessTokenReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/CreateAccessToken',
        request,
        metadata || {},
        this.methodInfoCreateAccessToken,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/CreateAccessToken',
    request,
    metadata || {},
    this.methodInfoCreateAccessToken);
  }

  methodInfoMe = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.MeReply,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.MeReply.deserializeBinary
  );

  me(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.MeReply>;

  me(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.MeReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.MeReply>;

  me(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.MeReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/Me',
        request,
        metadata || {},
        this.methodInfoMe,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/Me',
    request,
    metadata || {},
    this.methodInfoMe);
  }

  methodInfoChangePassword = new grpcWeb.AbstractClientBase.MethodInfo(
    google_protobuf_empty_pb.Empty,
    (request: myid_api_myid_pb.ChangePasswordRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  changePassword(
    request: myid_api_myid_pb.ChangePasswordRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  changePassword(
    request: myid_api_myid_pb.ChangePasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  changePassword(
    request: myid_api_myid_pb.ChangePasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/ChangePassword',
        request,
        metadata || {},
        this.methodInfoChangePassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/ChangePassword',
    request,
    metadata || {},
    this.methodInfoChangePassword);
  }

  methodInfoUpdateMetadata = new grpcWeb.AbstractClientBase.MethodInfo(
    google_protobuf_empty_pb.Empty,
    (request: myid_api_myid_pb.UpdateMetadataRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  updateMetadata(
    request: myid_api_myid_pb.UpdateMetadataRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  updateMetadata(
    request: myid_api_myid_pb.UpdateMetadataRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  updateMetadata(
    request: myid_api_myid_pb.UpdateMetadataRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/UpdateMetadata',
        request,
        metadata || {},
        this.methodInfoUpdateMetadata,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/UpdateMetadata',
    request,
    metadata || {},
    this.methodInfoUpdateMetadata);
  }

  methodInfoUpdateEmail = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.UpdateEmailReply,
    (request: myid_api_myid_pb.UpdateEmailRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.UpdateEmailReply.deserializeBinary
  );

  updateEmail(
    request: myid_api_myid_pb.UpdateEmailRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.UpdateEmailReply>;

  updateEmail(
    request: myid_api_myid_pb.UpdateEmailRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.UpdateEmailReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.UpdateEmailReply>;

  updateEmail(
    request: myid_api_myid_pb.UpdateEmailRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.UpdateEmailReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/UpdateEmail',
        request,
        metadata || {},
        this.methodInfoUpdateEmail,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/UpdateEmail',
    request,
    metadata || {},
    this.methodInfoUpdateEmail);
  }

  methodInfoVerifyEmail = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.VerifyEmailReply,
    (request: myid_api_myid_pb.VerifyEmailRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.VerifyEmailReply.deserializeBinary
  );

  verifyEmail(
    request: myid_api_myid_pb.VerifyEmailRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.VerifyEmailReply>;

  verifyEmail(
    request: myid_api_myid_pb.VerifyEmailRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.VerifyEmailReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.VerifyEmailReply>;

  verifyEmail(
    request: myid_api_myid_pb.VerifyEmailRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.VerifyEmailReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/VerifyEmail',
        request,
        metadata || {},
        this.methodInfoVerifyEmail,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/VerifyEmail',
    request,
    metadata || {},
    this.methodInfoVerifyEmail);
  }

  methodInfoUpdatePhoneNumber = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.UpdatePhoneNumberReply,
    (request: myid_api_myid_pb.UpdatePhoneNumberRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.UpdatePhoneNumberReply.deserializeBinary
  );

  updatePhoneNumber(
    request: myid_api_myid_pb.UpdatePhoneNumberRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.UpdatePhoneNumberReply>;

  updatePhoneNumber(
    request: myid_api_myid_pb.UpdatePhoneNumberRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.UpdatePhoneNumberReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.UpdatePhoneNumberReply>;

  updatePhoneNumber(
    request: myid_api_myid_pb.UpdatePhoneNumberRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.UpdatePhoneNumberReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/UpdatePhoneNumber',
        request,
        metadata || {},
        this.methodInfoUpdatePhoneNumber,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/UpdatePhoneNumber',
    request,
    metadata || {},
    this.methodInfoUpdatePhoneNumber);
  }

  methodInfoUpdatePhoneNumberV2 = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.UpdatePhoneNumberReply,
    (request: myid_api_myid_pb.UpdatePhoneNumberV2Request) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.UpdatePhoneNumberReply.deserializeBinary
  );

  updatePhoneNumberV2(
    request: myid_api_myid_pb.UpdatePhoneNumberV2Request,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.UpdatePhoneNumberReply>;

  updatePhoneNumberV2(
    request: myid_api_myid_pb.UpdatePhoneNumberV2Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.UpdatePhoneNumberReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.UpdatePhoneNumberReply>;

  updatePhoneNumberV2(
    request: myid_api_myid_pb.UpdatePhoneNumberV2Request,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.UpdatePhoneNumberReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/UpdatePhoneNumberV2',
        request,
        metadata || {},
        this.methodInfoUpdatePhoneNumberV2,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/UpdatePhoneNumberV2',
    request,
    metadata || {},
    this.methodInfoUpdatePhoneNumberV2);
  }

  methodInfoVerifyPhoneNumber = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.VerifyPhoneNumberReply,
    (request: myid_api_myid_pb.VerifyPhoneNumberRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.VerifyPhoneNumberReply.deserializeBinary
  );

  verifyPhoneNumber(
    request: myid_api_myid_pb.VerifyPhoneNumberRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.VerifyPhoneNumberReply>;

  verifyPhoneNumber(
    request: myid_api_myid_pb.VerifyPhoneNumberRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.VerifyPhoneNumberReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.VerifyPhoneNumberReply>;

  verifyPhoneNumber(
    request: myid_api_myid_pb.VerifyPhoneNumberRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.VerifyPhoneNumberReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/VerifyPhoneNumber',
        request,
        metadata || {},
        this.methodInfoVerifyPhoneNumber,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/VerifyPhoneNumber',
    request,
    metadata || {},
    this.methodInfoVerifyPhoneNumber);
  }

  methodInfoResetPassword = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.ResetPasswordReply,
    (request: myid_api_myid_pb.ResetPasswordRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.ResetPasswordReply.deserializeBinary
  );

  resetPassword(
    request: myid_api_myid_pb.ResetPasswordRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.ResetPasswordReply>;

  resetPassword(
    request: myid_api_myid_pb.ResetPasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.ResetPasswordReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.ResetPasswordReply>;

  resetPassword(
    request: myid_api_myid_pb.ResetPasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.ResetPasswordReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/ResetPassword',
        request,
        metadata || {},
        this.methodInfoResetPassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/ResetPassword',
    request,
    metadata || {},
    this.methodInfoResetPassword);
  }

  methodInfoResetPasswordV2 = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.ResetPasswordReply,
    (request: myid_api_myid_pb.ResetPasswordV2Request) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.ResetPasswordReply.deserializeBinary
  );

  resetPasswordV2(
    request: myid_api_myid_pb.ResetPasswordV2Request,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.ResetPasswordReply>;

  resetPasswordV2(
    request: myid_api_myid_pb.ResetPasswordV2Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.ResetPasswordReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.ResetPasswordReply>;

  resetPasswordV2(
    request: myid_api_myid_pb.ResetPasswordV2Request,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.ResetPasswordReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/ResetPasswordV2',
        request,
        metadata || {},
        this.methodInfoResetPasswordV2,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/ResetPasswordV2',
    request,
    metadata || {},
    this.methodInfoResetPasswordV2);
  }

  methodInfoVerifyResetPassword = new grpcWeb.AbstractClientBase.MethodInfo(
    google_protobuf_empty_pb.Empty,
    (request: myid_api_myid_pb.VerifyResetPasswordRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  verifyResetPassword(
    request: myid_api_myid_pb.VerifyResetPasswordRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  verifyResetPassword(
    request: myid_api_myid_pb.VerifyResetPasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  verifyResetPassword(
    request: myid_api_myid_pb.VerifyResetPasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/VerifyResetPassword',
        request,
        metadata || {},
        this.methodInfoVerifyResetPassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/VerifyResetPassword',
    request,
    metadata || {},
    this.methodInfoVerifyResetPassword);
  }

  methodInfoSubmitResetPassword = new grpcWeb.AbstractClientBase.MethodInfo(
    google_protobuf_empty_pb.Empty,
    (request: myid_api_myid_pb.SubmitResetPasswordRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  submitResetPassword(
    request: myid_api_myid_pb.SubmitResetPasswordRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  submitResetPassword(
    request: myid_api_myid_pb.SubmitResetPasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  submitResetPassword(
    request: myid_api_myid_pb.SubmitResetPasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.MyID/SubmitResetPassword',
        request,
        metadata || {},
        this.methodInfoSubmitResetPassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.MyID/SubmitResetPassword',
    request,
    metadata || {},
    this.methodInfoSubmitResetPassword);
  }

}

export class TheCoffeeHouseClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname;
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodInfoCreateUser = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.CreateUserReply,
    (request: myid_api_myid_pb.CreateUserRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.CreateUserReply.deserializeBinary
  );

  createUser(
    request: myid_api_myid_pb.CreateUserRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.CreateUserReply>;

  createUser(
    request: myid_api_myid_pb.CreateUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.CreateUserReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.CreateUserReply>;

  createUser(
    request: myid_api_myid_pb.CreateUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.CreateUserReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.TheCoffeeHouse/CreateUser',
        request,
        metadata || {},
        this.methodInfoCreateUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.TheCoffeeHouse/CreateUser',
    request,
    metadata || {},
    this.methodInfoCreateUser);
  }

  methodInfoListUsers = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.ListUsersReply,
    (request: myid_api_myid_pb.ListUsersRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.ListUsersReply.deserializeBinary
  );

  listUsers(
    request: myid_api_myid_pb.ListUsersRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.ListUsersReply>;

  listUsers(
    request: myid_api_myid_pb.ListUsersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.ListUsersReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.ListUsersReply>;

  listUsers(
    request: myid_api_myid_pb.ListUsersRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.ListUsersReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.TheCoffeeHouse/ListUsers',
        request,
        metadata || {},
        this.methodInfoListUsers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.TheCoffeeHouse/ListUsers',
    request,
    metadata || {},
    this.methodInfoListUsers);
  }

  methodInfoUpdateUser = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.UpdateUserReply,
    (request: myid_api_myid_pb.UpdateUserRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.UpdateUserReply.deserializeBinary
  );

  updateUser(
    request: myid_api_myid_pb.UpdateUserRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.UpdateUserReply>;

  updateUser(
    request: myid_api_myid_pb.UpdateUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.UpdateUserReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.UpdateUserReply>;

  updateUser(
    request: myid_api_myid_pb.UpdateUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.UpdateUserReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.TheCoffeeHouse/UpdateUser',
        request,
        metadata || {},
        this.methodInfoUpdateUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.TheCoffeeHouse/UpdateUser',
    request,
    metadata || {},
    this.methodInfoUpdateUser);
  }

  methodInfoLockUser = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.LockUserReply,
    (request: myid_api_myid_pb.LockUserRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.LockUserReply.deserializeBinary
  );

  lockUser(
    request: myid_api_myid_pb.LockUserRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.LockUserReply>;

  lockUser(
    request: myid_api_myid_pb.LockUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.LockUserReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.LockUserReply>;

  lockUser(
    request: myid_api_myid_pb.LockUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.LockUserReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.TheCoffeeHouse/LockUser',
        request,
        metadata || {},
        this.methodInfoLockUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.TheCoffeeHouse/LockUser',
    request,
    metadata || {},
    this.methodInfoLockUser);
  }

  methodInfoUnlockUser = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.UnlockUserReply,
    (request: myid_api_myid_pb.UnlockUserRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.UnlockUserReply.deserializeBinary
  );

  unlockUser(
    request: myid_api_myid_pb.UnlockUserRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.UnlockUserReply>;

  unlockUser(
    request: myid_api_myid_pb.UnlockUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.UnlockUserReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.UnlockUserReply>;

  unlockUser(
    request: myid_api_myid_pb.UnlockUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.UnlockUserReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.TheCoffeeHouse/UnlockUser',
        request,
        metadata || {},
        this.methodInfoUnlockUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.TheCoffeeHouse/UnlockUser',
    request,
    metadata || {},
    this.methodInfoUnlockUser);
  }

  methodInfoBanUser = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.BanUserReply,
    (request: myid_api_myid_pb.BanUserRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.BanUserReply.deserializeBinary
  );

  banUser(
    request: myid_api_myid_pb.BanUserRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.BanUserReply>;

  banUser(
    request: myid_api_myid_pb.BanUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.BanUserReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.BanUserReply>;

  banUser(
    request: myid_api_myid_pb.BanUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.BanUserReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.TheCoffeeHouse/BanUser',
        request,
        metadata || {},
        this.methodInfoBanUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.TheCoffeeHouse/BanUser',
    request,
    metadata || {},
    this.methodInfoBanUser);
  }

  methodInfoUnbanUser = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.UnbanUserReply,
    (request: myid_api_myid_pb.UnbanUserRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.UnbanUserReply.deserializeBinary
  );

  unbanUser(
    request: myid_api_myid_pb.UnbanUserRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.UnbanUserReply>;

  unbanUser(
    request: myid_api_myid_pb.UnbanUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.UnbanUserReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.UnbanUserReply>;

  unbanUser(
    request: myid_api_myid_pb.UnbanUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.UnbanUserReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.TheCoffeeHouse/UnbanUser',
        request,
        metadata || {},
        this.methodInfoUnbanUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.TheCoffeeHouse/UnbanUser',
    request,
    metadata || {},
    this.methodInfoUnbanUser);
  }

  methodInfoGetUser = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.GetUserReply,
    (request: myid_api_myid_pb.GetUserRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.GetUserReply.deserializeBinary
  );

  getUser(
    request: myid_api_myid_pb.GetUserRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.GetUserReply>;

  getUser(
    request: myid_api_myid_pb.GetUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.GetUserReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.GetUserReply>;

  getUser(
    request: myid_api_myid_pb.GetUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.GetUserReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.TheCoffeeHouse/GetUser',
        request,
        metadata || {},
        this.methodInfoGetUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.TheCoffeeHouse/GetUser',
    request,
    metadata || {},
    this.methodInfoGetUser);
  }

  methodInfoResendCreatePasswordOTP = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.ResendCreatePasswordOTPReply,
    (request: myid_api_myid_pb.ResendCreatePasswordOTPRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.ResendCreatePasswordOTPReply.deserializeBinary
  );

  resendCreatePasswordOTP(
    request: myid_api_myid_pb.ResendCreatePasswordOTPRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.ResendCreatePasswordOTPReply>;

  resendCreatePasswordOTP(
    request: myid_api_myid_pb.ResendCreatePasswordOTPRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.ResendCreatePasswordOTPReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.ResendCreatePasswordOTPReply>;

  resendCreatePasswordOTP(
    request: myid_api_myid_pb.ResendCreatePasswordOTPRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.ResendCreatePasswordOTPReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.TheCoffeeHouse/ResendCreatePasswordOTP',
        request,
        metadata || {},
        this.methodInfoResendCreatePasswordOTP,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.TheCoffeeHouse/ResendCreatePasswordOTP',
    request,
    metadata || {},
    this.methodInfoResendCreatePasswordOTP);
  }

  methodInfoGetUsers = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.GetUsersReply,
    (request: myid_api_myid_pb.GetUsersRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.GetUsersReply.deserializeBinary
  );

  getUsers(
    request: myid_api_myid_pb.GetUsersRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.GetUsersReply>;

  getUsers(
    request: myid_api_myid_pb.GetUsersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.GetUsersReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.GetUsersReply>;

  getUsers(
    request: myid_api_myid_pb.GetUsersRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.GetUsersReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.TheCoffeeHouse/GetUsers',
        request,
        metadata || {},
        this.methodInfoGetUsers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.TheCoffeeHouse/GetUsers',
    request,
    metadata || {},
    this.methodInfoGetUsers);
  }

  methodInfoResetResendOTP = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.ResetResendOTPReply,
    (request: myid_api_myid_pb.ResetResendOTPRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.ResetResendOTPReply.deserializeBinary
  );

  resetResendOTP(
    request: myid_api_myid_pb.ResetResendOTPRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.ResetResendOTPReply>;

  resetResendOTP(
    request: myid_api_myid_pb.ResetResendOTPRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.ResetResendOTPReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.ResetResendOTPReply>;

  resetResendOTP(
    request: myid_api_myid_pb.ResetResendOTPRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.ResetResendOTPReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.TheCoffeeHouse/ResetResendOTP',
        request,
        metadata || {},
        this.methodInfoResetResendOTP,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.TheCoffeeHouse/ResetResendOTP',
    request,
    metadata || {},
    this.methodInfoResetResendOTP);
  }

}

export class WaitressClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname;
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodInfoGetUsers = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.GetUsersReply,
    (request: myid_api_myid_pb.GetUsersRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.GetUsersReply.deserializeBinary
  );

  getUsers(
    request: myid_api_myid_pb.GetUsersRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.GetUsersReply>;

  getUsers(
    request: myid_api_myid_pb.GetUsersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.GetUsersReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.GetUsersReply>;

  getUsers(
    request: myid_api_myid_pb.GetUsersRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.GetUsersReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.Waitress/GetUsers',
        request,
        metadata || {},
        this.methodInfoGetUsers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.Waitress/GetUsers',
    request,
    metadata || {},
    this.methodInfoGetUsers);
  }

  methodInfoGetUserIDs = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.GetUserIDsReply,
    (request: myid_api_myid_pb.GetUserIDsRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.GetUserIDsReply.deserializeBinary
  );

  getUserIDs(
    request: myid_api_myid_pb.GetUserIDsRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.GetUserIDsReply>;

  getUserIDs(
    request: myid_api_myid_pb.GetUserIDsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.GetUserIDsReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.GetUserIDsReply>;

  getUserIDs(
    request: myid_api_myid_pb.GetUserIDsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.GetUserIDsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.Waitress/GetUserIDs',
        request,
        metadata || {},
        this.methodInfoGetUserIDs,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.Waitress/GetUserIDs',
    request,
    metadata || {},
    this.methodInfoGetUserIDs);
  }

  methodInfoGetUsersByUsername = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.GetUsersByUsernameReply,
    (request: myid_api_myid_pb.GetUsersByUsernameRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.GetUsersByUsernameReply.deserializeBinary
  );

  getUsersByUsername(
    request: myid_api_myid_pb.GetUsersByUsernameRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.GetUsersByUsernameReply>;

  getUsersByUsername(
    request: myid_api_myid_pb.GetUsersByUsernameRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.GetUsersByUsernameReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.GetUsersByUsernameReply>;

  getUsersByUsername(
    request: myid_api_myid_pb.GetUsersByUsernameRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.GetUsersByUsernameReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.Waitress/GetUsersByUsername',
        request,
        metadata || {},
        this.methodInfoGetUsersByUsername,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.Waitress/GetUsersByUsername',
    request,
    metadata || {},
    this.methodInfoGetUsersByUsername);
  }

}

export class ColdBrewClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname;
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodInfoListSignInEvents = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.ListSignInEventsReply,
    (request: myid_api_myid_pb.ListSignInEventsRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.ListSignInEventsReply.deserializeBinary
  );

  listSignInEvents(
    request: myid_api_myid_pb.ListSignInEventsRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.ListSignInEventsReply>;

  listSignInEvents(
    request: myid_api_myid_pb.ListSignInEventsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.ListSignInEventsReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.ListSignInEventsReply>;

  listSignInEvents(
    request: myid_api_myid_pb.ListSignInEventsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.ListSignInEventsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.ColdBrew/ListSignInEvents',
        request,
        metadata || {},
        this.methodInfoListSignInEvents,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.ColdBrew/ListSignInEvents',
    request,
    metadata || {},
    this.methodInfoListSignInEvents);
  }

  methodInfoListSignUpEvents = new grpcWeb.AbstractClientBase.MethodInfo(
    myid_api_myid_pb.ListSignUpEventsReply,
    (request: myid_api_myid_pb.ListSignUpEventsRequest) => {
      return request.serializeBinary();
    },
    myid_api_myid_pb.ListSignUpEventsReply.deserializeBinary
  );

  listSignUpEvents(
    request: myid_api_myid_pb.ListSignUpEventsRequest,
    metadata: grpcWeb.Metadata | null): Promise<myid_api_myid_pb.ListSignUpEventsReply>;

  listSignUpEvents(
    request: myid_api_myid_pb.ListSignUpEventsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.Error,
               response: myid_api_myid_pb.ListSignUpEventsReply) => void): grpcWeb.ClientReadableStream<myid_api_myid_pb.ListSignUpEventsReply>;

  listSignUpEvents(
    request: myid_api_myid_pb.ListSignUpEventsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.Error,
               response: myid_api_myid_pb.ListSignUpEventsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/greyhole.myid.ColdBrew/ListSignUpEvents',
        request,
        metadata || {},
        this.methodInfoListSignUpEvents,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/greyhole.myid.ColdBrew/ListSignUpEvents',
    request,
    metadata || {},
    this.methodInfoListSignUpEvents);
  }

}

