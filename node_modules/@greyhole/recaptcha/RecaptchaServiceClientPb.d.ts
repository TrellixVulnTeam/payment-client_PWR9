/**
 * @fileoverview gRPC-Web generated client stub for recaptcha
 * @enhanceable
 * @public
 */
import * as grpcWeb from 'grpc-web';
import * as api_recaptcha_pb from './recaptcha_pb';
export declare class RecaptchaClient {
    client_: grpcWeb.AbstractClientBase;
    hostname_: string;
    credentials_: null | {
        [index: string]: string;
    };
    options_: null | {
        [index: string]: any;
    };
    constructor(hostname: string, credentials?: null | {
        [index: string]: string;
    }, options?: null | {
        [index: string]: any;
    });
    methodInfoGetCaptcha: any;
    getCaptcha(request: api_recaptcha_pb.GetCaptchaRequest, metadata: grpcWeb.Metadata | null): Promise<api_recaptcha_pb.GetCaptchaReply>;
    getCaptcha(request: api_recaptcha_pb.GetCaptchaRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: api_recaptcha_pb.GetCaptchaReply) => void): grpcWeb.ClientReadableStream<api_recaptcha_pb.GetCaptchaReply>;
}
export declare class StewardClient {
    client_: grpcWeb.AbstractClientBase;
    hostname_: string;
    credentials_: null | {
        [index: string]: string;
    };
    options_: null | {
        [index: string]: any;
    };
    constructor(hostname: string, credentials?: null | {
        [index: string]: string;
    }, options?: null | {
        [index: string]: any;
    });
    methodInfoVerifyCaptcha: any;
    verifyCaptcha(request: api_recaptcha_pb.VerifyCaptchaRequest, metadata: grpcWeb.Metadata | null): Promise<api_recaptcha_pb.VerifyCaptchaReply>;
    verifyCaptcha(request: api_recaptcha_pb.VerifyCaptchaRequest, metadata: grpcWeb.Metadata | null, callback: (err: grpcWeb.Error, response: api_recaptcha_pb.VerifyCaptchaReply) => void): grpcWeb.ClientReadableStream<api_recaptcha_pb.VerifyCaptchaReply>;
}
