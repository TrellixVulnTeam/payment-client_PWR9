"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isLegalPermission = void 0;
var react_1 = __importStar(require("react"));
var difference_1 = __importDefault(require("lodash-es/difference"));
var isEmpty_1 = __importDefault(require("lodash-es/isEmpty"));
var intersection_1 = __importDefault(require("lodash-es/intersection"));
var YorickRoutes_1 = require("../YorickRoutes");
var AllowedTo = function (_a) {
    var _b = _a.perform, perform = _b === void 0 ? [] : _b, children = _a.children, _c = _a.renderYes, RenderYes = _c === void 0 ? function () { return react_1.default.createElement(react_1.default.Fragment, null, children); } : _c, _d = _a.renderNo, RenderNo = _d === void 0 ? function () { return null; } : _d, _e = _a.logic, logic = _e === void 0 ? 'and' : _e;
    var userPermissions = react_1.useContext(YorickRoutes_1.TemplateContext).userPermissions;
    if (exports.isLegalPermission(perform, userPermissions, logic)) {
        return react_1.default.createElement(RenderYes, null);
    }
    return react_1.default.createElement(RenderNo, null);
};
var isLegalPermission = function (perform, permissions, logic) {
    if (logic === void 0) { logic = 'and'; }
    if (isEmpty_1.default(perform))
        return true;
    if (typeof perform === 'string') {
        return permissions.includes(perform);
    }
    if (Array.isArray(perform)) {
        // all perform entries are into permissions
        return logic === 'and'
            ? difference_1.default(perform, permissions).length === 0
            : intersection_1.default(perform, permissions).length > 0;
    }
    return false;
};
exports.isLegalPermission = isLegalPermission;
/*
  * @param perform
  ! In case we want it to render when changing @perform or any other PROPS change then use the function below
  =>
  const areEqual = (prevProps: AllowedToType, nextProps: AllowedToType) => {
    return prevProps.perform === nextProps.perform;
  };
*/
/*
  ! Because we only need it to render once
  * @pram: watch => Use in case when we need it to re-render when the value in watch changes
  *
*/
var areEqual = function (prevProps, nextProps) {
    return difference_1.default(prevProps.watch, (nextProps === null || nextProps === void 0 ? void 0 : nextProps.watch) || []).length === 0;
};
exports.default = react_1.default.memo(AllowedTo, areEqual);
