var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { useMemo, useContext, useState } from 'react';
import ScopedCssBaseline from '@material-ui/core/ScopedCssBaseline';
import { createMuiTheme, createStyles, makeStyles, ThemeProvider, Toolbar, } from '@material-ui/core';
import { TemplateContext } from '../../../YorickRoutes';
import DefaultHeader from '../../Default/Header';
import DefaultSidebar from '../../Default/Sidebar';
import DefaultBreadcrumbs from '../../Breadcrumb';
import { ProfileConfig, } from '../../Default/Header/ToggleMenu';
export var DRAWER_WIDTH = 240;
export var APP_BAR_HEIGHT = 56;
export var getConfiguredTheme = function (config) {
    var color = config.color, appBar = config.appBar, drawer = config.drawer;
    return createMuiTheme({
        palette: {
            primary: {
                main: (color === null || color === void 0 ? void 0 : color.primary) || '#F9912B', // orange
            },
            secondary: {
                main: (color === null || color === void 0 ? void 0 : color.secondary) || '#333E4B',
                light: '#516177',
            },
            warning: {
                main: (color === null || color === void 0 ? void 0 : color.hover) || '#FFF7F0', // light orange
            },
        },
        typography: {
            fontFamily: 'inherit',
            body1: {
                fontFamily: 'inherit',
            },
            body2: {
                fontFamily: 'inherit',
            },
        },
        overrides: {
            MuiToolbar: {
                regular: {
                    minHeight: (appBar === null || appBar === void 0 ? void 0 : appBar.height) || APP_BAR_HEIGHT,
                    '@media(min-width:600px)': {
                        minHeight: (appBar === null || appBar === void 0 ? void 0 : appBar.height) || APP_BAR_HEIGHT,
                    },
                },
            },
            MuiDrawer: {
                root: {
                    minWidth: (drawer === null || drawer === void 0 ? void 0 : drawer.width) || DRAWER_WIDTH,
                    // maxWidth: drawer?.width || DRAWER_WIDTH,
                },
                paper: {
                    background: (drawer === null || drawer === void 0 ? void 0 : drawer.background) || '#fff',
                    padding: '0px 24px',
                    position: 'unset',
                },
                paperAnchorDockedLeft: {
                    borderRight: (drawer === null || drawer === void 0 ? void 0 : drawer.border) || '1px solid #ebebeb',
                },
            },
            // MuiAppBar: {
            //   colorPrimary: {
            //     borderBottom: appBar?.border || '1px solid #ebebeb',
            //     boxShadow: 'none',
            //   },
            // },
            MuiListItemIcon: {
                root: {
                    color: 'inherit',
                    minWidth: 32,
                },
            },
            MuiListItemText: {
                inset: {
                    paddingLeft: 36,
                },
            },
            MuiTypography: {
                body1: {
                    fontSize: 'inherit',
                    fontWeight: 'inherit',
                    color: 'inherit',
                    lineHeight: '20.3px',
                    letterSpacing: 0.75,
                    fontFamily: 'inherit',
                },
            },
            MuiButton: {
                root: {
                    fontFamily: 'inherit',
                },
            },
        },
    });
};
var useStyles = makeStyles(function () {
    return createStyles({
        root: {
            display: 'flex',
            width: '100%',
            height: '100%',
        },
        main: {
            flexGrow: 1,
            overflow: 'auto',
        },
    });
});
export var useUpdateProfile = function () {
    var updateConfig = useContext(ProfileConfig).updateConfig;
    var updateProfile = function (name, avatar) {
        if (updateConfig) {
            updateConfig(name, avatar);
        }
    };
    return { updateProfile: updateProfile };
};
var DefaultLayout = function (_a) {
    var _b;
    var children = _a.children;
    var classes = useStyles();
    var _c = useContext(TemplateContext), config = _c.config, sidebar = _c.sidebar, subSidebar = _c.subSidebar;
    var _d = config.renderBreadcrumbs, renderBreadcrumbs = _d === void 0 ? true : _d;
    var _e = useState({
        name: '',
        avatar: '',
    }), profile = _e[0], setProfile = _e[1];
    var updateConfig = function (name, avatar) {
        setProfile({ name: name, avatar: avatar || profile.avatar || '' });
    };
    var showMenu = ((_b = config === null || config === void 0 ? void 0 : config.menu) === null || _b === void 0 ? void 0 : _b.show) !== undefined ? config.menu.show : true;
    var theme = useMemo(function () { return getConfiguredTheme(config); }, []);
    return (React.createElement(ProfileConfig.Provider, { value: __assign(__assign({}, profile), { updateConfig: updateConfig }) },
        React.createElement("div", { className: classes.root },
            React.createElement(ScopedCssBaseline, null),
            React.createElement(DefaultHeader, null),
            React.createElement(ThemeProvider, { theme: theme }, showMenu && (React.createElement(DefaultSidebar, { sidebar: sidebar, subSidebar: subSidebar }))),
            React.createElement("main", { className: classes.main },
                React.createElement(ThemeProvider, { theme: theme },
                    React.createElement(Toolbar, null)),
                renderBreadcrumbs && (React.createElement(DefaultBreadcrumbs, { sidebar: sidebar, subSidebar: subSidebar })),
                children))));
};
export default DefaultLayout;
