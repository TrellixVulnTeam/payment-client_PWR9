var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { useContext, useMemo } from 'react';
import { Link as RouterLink, useLocation } from 'react-router-dom';
import { Breadcrumbs, createStyles, makeStyles } from '@material-ui/core';
import Link from '@material-ui/core/Link';
import Typography from '@material-ui/core/Typography';
import { TemplateContext } from '../../YorickRoutes';
import RightArrow from '../icons/ILT/Stroke/RightArrow';
var LinkRouter = function (props) { return React.createElement(Link, __assign({}, props, { component: RouterLink })); };
var getSidebarMapingName = function (sidebar) {
    var res = {};
    sidebar === null || sidebar === void 0 ? void 0 : sidebar.map(function (_a) {
        var path = _a.path, title = _a.title, children = _a.children;
        res[path] = title;
        if (children === null || children === void 0 ? void 0 : children.length) {
            for (var _i = 0, _b = Object.entries(getSidebarMapingName(children)); _i < _b.length; _i++) {
                var _c = _b[_i], key = _c[0], value = _c[1];
                res[key] = value;
            }
        }
    });
    return res;
};
var DefaultBreadcrumbs = function (_a) {
    var sidebar = _a.sidebar, subSidebar = _a.subSidebar;
    var classes = useStyles();
    var pathname = useLocation().pathname;
    var breadcrumbsCfg = useContext(TemplateContext).config.breadcrumbs;
    var breadcrumbs = pathname.split('/').filter(function (x) { return x; });
    var mappingName = useMemo(function () { return (__assign(__assign({}, getSidebarMapingName(sidebar)), getSidebarMapingName(subSidebar))); }, [sidebar, subSidebar]);
    return (React.createElement(Breadcrumbs, { "aria-label": "breadcrumb", className: classes.root, separator: React.createElement(RightArrow, null) },
        React.createElement(LinkRouter, { color: "inherit", to: "/", className: classes.normal }, (breadcrumbsCfg === null || breadcrumbsCfg === void 0 ? void 0 : breadcrumbsCfg.homeText) || 'Home'), breadcrumbs === null || breadcrumbs === void 0 ? void 0 :
        breadcrumbs.map(function (_, index) {
            // console.log('path', _);
            var last = index === breadcrumbs.length - 1;
            var to = "/" + breadcrumbs.slice(0, index + 1).join('/');
            var displayName = mappingName[to] || '';
            return last ? (React.createElement(Typography, { key: to, className: classes.last }, displayName)) : (React.createElement(LinkRouter, { to: to, key: to, className: classes.normal }, displayName));
        })));
};
export default DefaultBreadcrumbs;
var useStyles = makeStyles(function () {
    var breadcrumbs = useContext(TemplateContext).config.breadcrumbs;
    return createStyles({
        root: {
            padding: (breadcrumbs === null || breadcrumbs === void 0 ? void 0 : breadcrumbs.padding) || '32px 0 0 32px',
            '& .MuiBreadcrumbs-separator': {
                margin: '0px 24px',
            },
        },
        normal: {
            fontSize: '14px',
            fontWeight: 600,
            color: '#333E4B',
            lineHeight: '146%',
        },
        last: {
            fontSize: '14px',
            fontWeight: 600,
            color: '#1789FC',
            lineHeight: '146%',
        },
    });
});
