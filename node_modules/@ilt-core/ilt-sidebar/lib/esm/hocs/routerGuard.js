var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import React, { useCallback, useContext, useEffect, useState } from 'react';
import { CircularProgress, createMuiTheme, createStyles, makeStyles, MuiThemeProvider, } from '@material-ui/core';
import { Redirect } from 'react-router';
import { LoadingBarContext } from '../components/LoadingProgressBar';
import { TemplateContext } from '../YorickRoutes';
import { Guard } from './guard';
import { APP_BAR_HEIGHT } from '../components/Layout/Default';
export var RouteStatus;
(function (RouteStatus) {
    RouteStatus[RouteStatus["IDLE"] = 0] = "IDLE";
    RouteStatus[RouteStatus["PENDING"] = 1] = "PENDING";
    RouteStatus[RouteStatus["COMPLETE"] = 2] = "COMPLETE";
})(RouteStatus || (RouteStatus = {}));
export var beforeRouteEnter = function (WrapperComponent) { return function (props) {
    var onLoadingBarChange = useContext(LoadingBarContext).onChange;
    var loadingBarContext = useContext(LoadingBarContext);
    var config = useContext(TemplateContext).config;
    var _a = useState(true), isMounted = _a[0], setIsMounted = _a[1];
    var _b = useState(''), redirect = _b[0], setRedirect = _b[1];
    var _c = useState(RouteStatus.IDLE), status = _c[0], setStatus = _c[1];
    var route = props.route;
    var classes = useStyles();
    var theme = getTheme();
    var validateRoute = useCallback(function (guard) { return __awaiter(void 0, void 0, void 0, function () {
        var redirectTo;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!((_a = route === null || route === void 0 ? void 0 : route.guards) === null || _a === void 0 ? void 0 : _a.length))
                        return [2 /*return*/];
                    setStatus(function () { return RouteStatus.PENDING; });
                    return [4 /*yield*/, guard.resolveAllGuards()];
                case 1:
                    redirectTo = (_b.sent()).redirectTo;
                    if (redirectTo && isMounted) {
                        setRedirect(redirectTo);
                    }
                    if (isMounted)
                        setStatus(function () { return RouteStatus.COMPLETE; });
                    return [2 /*return*/];
            }
        });
    }); }, []);
    useEffect(function () {
        onLoadingChange(false);
        var guard = new Guard(route.guards, route);
        validateRoute(guard);
        return function () {
            console.log('Unmounted');
            onLoadingChange(false);
            setIsMounted(false);
            loadingBarContext.firstLoad = false;
        };
    }, []);
    var onLoadingChange = function (val) {
        onLoadingBarChange && onLoadingBarChange(val);
    };
    if (!isMounted)
        return React.createElement(React.Fragment, null);
    if (redirect) {
        return React.createElement(Redirect, { to: redirect });
    }
    if (status === RouteStatus.PENDING) {
        onLoadingChange(true);
        // TODO: change another Loading component
        var defaultLoading = (React.createElement(MuiThemeProvider, { theme: theme },
            React.createElement("div", { className: classes.container },
                React.createElement(CircularProgress, { color: "primary", size: 60, disableShrink: true }))));
        var loadingComponent = (config === null || config === void 0 ? void 0 : config.loadingComponent) || defaultLoading;
        return React.createElement(React.Fragment, null, loadingComponent);
    }
    else {
        onLoadingChange(false);
    }
    return React.createElement(WrapperComponent, __assign({}, props));
}; };
var useStyles = makeStyles(function () {
    var appBar = useContext(TemplateContext).config.appBar;
    return createStyles({
        container: {
            position: 'relative',
            width: '100%',
            height: "calc(100vh - " + ((appBar === null || appBar === void 0 ? void 0 : appBar.height) || APP_BAR_HEIGHT) + "px)",
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
        },
    });
});
var getTheme = function () {
    var color = useContext(TemplateContext).config.color;
    return createMuiTheme({
        palette: {
            primary: {
                main: (color === null || color === void 0 ? void 0 : color.loading) || (color === null || color === void 0 ? void 0 : color.primary) || '#F9930B', //ILT orange
            },
        },
    });
};
