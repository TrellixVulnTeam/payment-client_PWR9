import React, { useContext } from 'react';
import _difference from 'lodash-es/difference';
import _isEmpty from 'lodash-es/isEmpty';
import _intersection from 'lodash-es/intersection';
import { TemplateContext } from '../YorickRoutes';
var AllowedTo = function (_a) {
    var _b = _a.perform, perform = _b === void 0 ? [] : _b, children = _a.children, _c = _a.renderYes, RenderYes = _c === void 0 ? function () { return React.createElement(React.Fragment, null, children); } : _c, _d = _a.renderNo, RenderNo = _d === void 0 ? function () { return null; } : _d, _e = _a.logic, logic = _e === void 0 ? 'and' : _e;
    var userPermissions = useContext(TemplateContext).userPermissions;
    if (isLegalPermission(perform, userPermissions, logic)) {
        return React.createElement(RenderYes, null);
    }
    return React.createElement(RenderNo, null);
};
export var isLegalPermission = function (perform, permissions, logic) {
    if (logic === void 0) { logic = 'and'; }
    if (_isEmpty(perform))
        return true;
    if (typeof perform === 'string') {
        return permissions.includes(perform);
    }
    if (Array.isArray(perform)) {
        // all perform entries are into permissions
        return logic === 'and'
            ? _difference(perform, permissions).length === 0
            : _intersection(perform, permissions).length > 0;
    }
    return false;
};
/*
  * @param perform
  ! In case we want it to render when changing @perform or any other PROPS change then use the function below
  =>
  const areEqual = (prevProps: AllowedToType, nextProps: AllowedToType) => {
    return prevProps.perform === nextProps.perform;
  };
*/
/*
  ! Because we only need it to render once
  * @pram: watch => Use in case when we need it to re-render when the value in watch changes
  *
*/
var areEqual = function (prevProps, nextProps) {
    return _difference(prevProps.watch, (nextProps === null || nextProps === void 0 ? void 0 : nextProps.watch) || []).length === 0;
};
export default React.memo(AllowedTo, areEqual);
