var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import { Controller, useFormContext } from 'react-hook-form';
import { FormTypes } from '../Inputs';
import { FormAutoComplete } from '../Inputs/FormAutoComplete';
import { FormCheckBox } from '../Inputs/FormCheckBox';
import { FormDatePicker } from '../Inputs/FormDatePicker';
import { FormInput } from '../Inputs/FormInput';
import { FormInputNumber } from '../Inputs/FormInputNumber';
import { FormPhoneNumber } from '../Inputs/FormPhoneNumber';
import { FormRadio } from '../Inputs/FormRadio';
import { FormSelect } from '../Inputs/FormSelect';
import { FormCheckBoxGroup } from '../Inputs/FormCheckBoxGroup';
import FormAutoCompleteMulti from '../Inputs/FormAutoComplete/Multi';
import FormAutoCompleteCheckBox from '../Inputs/FormAutoComplete/CheckBox';
export var NestedInput = function (props) {
    var control = useFormContext().control;
    var name = props.name, rules = props.rules, type = props.type, defaultValue = props.defaultValue, Component = props.component, checkboxGroupProps = props.checkboxGroupProps;
    return (React.createElement(Controller, { name: name, rules: rules, control: control, defaultValue: defaultValue, render: function (_a) {
            var field = _a.field;
            var rest = __assign(__assign({}, props), field);
            switch (type) {
                case FormTypes.INPUT:
                case FormTypes.INPUT_PASSWORD:
                    return React.createElement(FormInput, __assign({}, rest));
                case FormTypes.INPUT_NUMBER:
                    return React.createElement(FormInputNumber, __assign({}, rest));
                case FormTypes.SELECT:
                    return React.createElement(FormSelect, __assign({}, rest));
                case FormTypes.DATE:
                    return React.createElement(FormDatePicker, __assign({}, rest));
                case FormTypes.AUTOCOMPLETE:
                    return React.createElement(FormAutoComplete, __assign({}, rest));
                case FormTypes.AUTOCOMPLETE_MULTI:
                    //TODO (huyhuynh) merge it into AUTOCOMPLETE type
                    return React.createElement(FormAutoCompleteMulti, __assign({}, rest));
                case FormTypes.AUTOCOMPLETE_CHECKBOX:
                    //TODO (khanhdh) merge it into AUTOCOMPLETE type
                    return React.createElement(FormAutoCompleteCheckBox, __assign({}, rest));
                case FormTypes.RADIO:
                    return React.createElement(FormRadio, __assign({}, rest));
                case FormTypes.CHECKBOX:
                    return React.createElement(FormCheckBox, __assign({}, rest));
                case FormTypes.CHECKBOX_GROUP:
                    return React.createElement(FormCheckBoxGroup, __assign({}, rest, checkboxGroupProps));
                case FormTypes.PHONE_NUMBER:
                    return React.createElement(FormPhoneNumber, __assign({}, rest));
                case FormTypes.COMPONENT:
                    return (Component && React.createElement(Component, __assign({}, rest))) || React.createElement(React.Fragment, null);
                default:
                    return React.createElement(React.Fragment, null);
            }
        } }));
};
