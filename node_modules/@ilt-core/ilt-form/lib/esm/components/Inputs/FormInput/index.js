import React, { useState } from 'react';
import { IconButton, InputAdornment, makeStyles, TextField, } from '@material-ui/core';
import { useFormContext } from 'react-hook-form';
import { FormTypes } from '..';
import { Close, Visibility, VisibilityOff } from '../../icons';
import MyHelperText from '../../helper/FormHelperText';
var useStyles = makeStyles({
    root: {
        '&:active': {
            '& $btnClose, & $splash': {
                display: 'block',
            },
        },
        '&$focused': {
            '& $btnShowPass': {
                color: '#2194F3',
            },
            '& $btnClose, & $splash': {
                display: 'block',
            },
        },
    },
    focused: {},
    btnClose: {
        display: 'none',
    },
    splash: {
        height: '24px',
        borderRight: '1px solid #DBDBDB',
        display: 'none',
    },
    btnShowPass: {},
});
export var FormInput = React.forwardRef(function (props, ref) {
    var _a;
    var classes = useStyles();
    var _b = useFormContext(), setValue = _b.setValue, setFocus = _b.setFocus, errors = _b.formState.errors;
    var name = props.name, label = props.label, placeholder = props.placeholder, value = props.value, type = props.type, 
    // helperText,
    disabled = props.disabled, onChange = props.onChange, onBlur = props.onBlur, onSync = props.onSync;
    var isPasswordField = type == FormTypes.INPUT_PASSWORD;
    var _c = useState(isPasswordField ? false : true), showPass = _c[0], setShowPass = _c[1];
    var handleChange = function (event) {
        onChange(event);
        onSync();
    };
    var toggleShowPass = function () {
        if (!!disabled)
            return;
        setShowPass(function (prev) { return !prev; });
        setFocus(name);
    };
    var clearField = function () {
        setValue(name, '');
        setFocus(name);
        onSync();
    };
    return (React.createElement(TextField, { fullWidth: true, label: label, value: value || '', placeholder: placeholder, inputRef: ref, disabled: !!disabled, onBlur: onBlur, onChange: handleChange, type: showPass ? 'text' : 'password', error: !!errors[name], helperText: React.createElement(MyHelperText, { message: (_a = errors[name]) === null || _a === void 0 ? void 0 : _a.message }), InputLabelProps: {
            shrink: true,
        }, InputProps: {
            classes: {
                root: classes.root,
                focused: classes.focused,
            },
            endAdornment: (React.createElement(InputAdornment, { position: "end" },
                (value === null || value === void 0 ? void 0 : value.length) ? (React.createElement(React.Fragment, null,
                    React.createElement(IconButton, { "aria-label": "Quick clear field", tabIndex: -1, onClick: clearField, className: classes.btnClose, disabled: !!disabled },
                        React.createElement(Close, null)),
                    isPasswordField && React.createElement("div", { className: classes.splash }))) : null,
                isPasswordField && (React.createElement(IconButton, { "aria-label": "Toggle password visibility", tabIndex: -1, onClick: toggleShowPass, className: classes.btnShowPass, disabled: !!disabled }, showPass ? React.createElement(Visibility, null) : React.createElement(VisibilityOff, null))))),
        } }));
});
