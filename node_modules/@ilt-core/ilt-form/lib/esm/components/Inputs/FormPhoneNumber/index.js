var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { useRef, useState } from 'react';
import { Button, ClickAwayListener, FormControl, FormHelperText, Grow, InputBase, InputLabel, ListItemIcon, makeStyles, MenuItem, MenuList, Paper, Popper, Typography, } from '@material-ui/core';
import { useFormContext } from 'react-hook-form';
import MyHelperText from '../../helper/FormHelperText';
import { ArrowDropDown } from '../../icons';
export var FormPhoneNumber = React.forwardRef(function (props, ref) {
    var _a;
    var _b = useFormContext(), setValue = _b.setValue, getValues = _b.getValues, errors = _b.formState.errors;
    var register = useFormContext().register;
    var name = props.name, label = props.label, placeholder = props.placeholder, _c = props.value, value = _c === void 0 ? {} : _c, options = props.options, 
    // helperText,
    disabled = props.disabled, 
    // onChange,
    onBlur = props.onBlur, onSync = props.onSync;
    var classes = useStyles();
    var _d = useState(value.selectValue || '+84'), selectValue = _d[0], setSelectValue = _d[1];
    var _e = useState(value.inputValue || ''), inputValue = _e[0], setInputValue = _e[1];
    var _f = useState(false), open = _f[0], setOpen = _f[1];
    var anchorRef = useRef(null);
    var handleToggle = function () {
        setOpen(function (prevOpen) { return !prevOpen; });
    };
    var handleClose = function (event) {
        if (anchorRef.current &&
            anchorRef.current.contains(event.target)) {
            return;
        }
        setOpen(false);
    };
    function handleListKeyDown(event) {
        if (event.key === 'Tab') {
            event.preventDefault();
            setOpen(false);
        }
    }
    // return focus to the button when we transitioned from !open -> open
    var prevOpen = React.useRef(open);
    React.useEffect(function () {
        if (prevOpen.current === true && open === false) {
            anchorRef.current.focus();
        }
        prevOpen.current = open;
    }, [open]);
    var handleInputChange = function (event) {
        var val = event.target.value;
        var newValue = { selectValue: selectValue, inputValue: val };
        setValue(name, newValue);
        setInputValue(val);
        onSync();
    };
    var handleSelectChange = function (value) {
        var newValue = { selectValue: value, inputValue: inputValue };
        setValue(name, newValue, { shouldValidate: false });
        setSelectValue(value);
        setOpen(false);
        onSync();
    };
    var displayFlag = options === null || options === void 0 ? void 0 : options.find(function (item) { return item.value == selectValue; });
    console.log(errors[name]);
    console.log(getValues());
    return (React.createElement(FormControl, { fullWidth: true, component: "div", error: !!errors[name], disabled: disabled, onBlur: onBlur },
        React.createElement(InputLabel, { shrink: true }, label),
        React.createElement(Popper, { open: open, anchorEl: anchorRef.current, role: '', transition: true, placement: "bottom-end", modifiers: {
                offset: {
                    enabled: true,
                    offset: '0, 8', // https://popper.js.org/docs/v1/#modifiersoffset
                },
            }, style: { zIndex: 9999 } }, function (_a) {
            var _b;
            var TransitionProps = _a.TransitionProps, placement = _a.placement;
            return (React.createElement(Grow, __assign({}, TransitionProps, { style: {
                    transformOrigin: placement === 'bottom' ? 'top-end' : 'bottom-end',
                    minWidth: (_b = anchorRef.current) === null || _b === void 0 ? void 0 : _b.offsetWidth,
                } }),
                React.createElement(Paper, { className: classes.paper },
                    React.createElement(ClickAwayListener, { onClickAway: handleClose },
                        React.createElement(MenuList, { id: "menu-list-grow", variant: "selectedMenu", autoFocusItem: open, onKeyDown: handleListKeyDown }, (options === null || options === void 0 ? void 0 : options.length) &&
                            options.map(function (_a, index) {
                                var label = _a.label, icon = _a.icon, value = _a.value;
                                return (React.createElement(MenuItem, { onClick: function () { return handleSelectChange(value); }, key: index },
                                    React.createElement(ListItemIcon, { className: classes.listItemIcon }, icon),
                                    React.createElement(Typography, null,
                                        React.createElement("span", null, label),
                                        "\u00A0",
                                        React.createElement("span", { className: classes.listItemValue }, value))));
                            }))))));
        }),
        React.createElement(InputBase, __assign({}, register(name, {
            required: 'This field is required',
            minLength: { value: 5, message: 'min length 5' },
        }), { fullWidth: true, value: inputValue, inputRef: ref, ref: anchorRef, placeholder: placeholder, onChange: handleInputChange, className: classes.inputBase, inputProps: {
                type: 'number',
                // ...register(name, {
                //   required: 'This field is required',
                //   minLength: { value: 5, message: 'min length 5' },
                // })
            }, startAdornment: React.createElement(React.Fragment, null,
                React.createElement(Button, { startIcon: displayFlag === null || displayFlag === void 0 ? void 0 : displayFlag.icon, endIcon: React.createElement(ArrowDropDown, null), className: classes.selectButton, classes: {
                        startIcon: classes.startIcon,
                        endIcon: classes.endIcon,
                    }, onClick: handleToggle }),
                React.createElement(Typography, { className: classes.displaySelectValue },
                    "(",
                    selectValue,
                    ")")) })),
        React.createElement(FormHelperText, null,
            React.createElement(MyHelperText, { message: (_a = errors[name]) === null || _a === void 0 ? void 0 : _a.message }))));
});
var useStyles = makeStyles({
    selectButton: {
        minWidth: 48,
        color: '#67677A',
        margin: '0px 8px 0px 12px',
        '&:hover': {
            backgroundColor: 'transparent',
        },
    },
    displaySelectValue: {
        width: 45,
        fontStyle: 'normal',
        fontWeight: 'normal',
        fontSize: 16,
        letterSpacing: 0.5,
        // color: '#CCCCCC',
    },
    inputBase: {
        // hide default button increase/decrease
        '& input[type=number]::-webkit-inner-spin-button, & input[type=number]::-webkit-outer-spin-button': {
            '-webkit-appearance': 'none',
            margin: 0,
        },
    },
    listItemIcon: {
        minWidth: 32,
    },
    listItemValue: {
        opacity: 0.5,
    },
    startIcon: {
        marginLeft: -12,
    },
    endIcon: {
        marginLeft: -2,
    },
    paper: {
        border: '1px solid #F5F5F5',
        boxSizing: 'border-box',
        boxShadow: '0px 8px 16px rgba(37, 37, 51, 0.24)',
    },
});
