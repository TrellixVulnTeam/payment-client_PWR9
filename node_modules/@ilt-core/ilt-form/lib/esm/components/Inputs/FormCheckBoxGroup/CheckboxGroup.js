var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
import React, { useCallback } from 'react';
import { FormControlLabel, makeStyles, } from '@material-ui/core';
// import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import { CustomCheckbox } from '../FormCheckBox/CustomCheckbox';
export var CheckboxGroup = React.forwardRef(function (props /* ref: React.Ref<HTMLInputElement>*/) {
    var value = props.value, checkList = props.checkList, onChange = props.onChange, onSync = props.onSync, 
    // accordionProps,
    // accordionSummaryProps,
    // accordionDetailsProps,
    // accordionTitle,
    checkboxProps = props.checkboxProps, _a = props.colNum, colNum = _a === void 0 ? 3 : _a;
    var classes = useStyles();
    var handleChange = useCallback(function (option, e) {
        var _a;
        var v = (_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.checked;
        if (option === 'root') {
            if (v)
                onChange(checkList);
            else
                onChange([]);
            return;
        }
        var newValue = [];
        if (Array.isArray(value))
            newValue = __spreadArray([], value);
        if (v) {
            newValue === null || newValue === void 0 ? void 0 : newValue.push(option);
        }
        else {
            newValue = newValue === null || newValue === void 0 ? void 0 : newValue.filter(function (f) { return f.value !== option.value; });
        }
        if ((newValue === null || newValue === void 0 ? void 0 : newValue.length) === (checkList === null || checkList === void 0 ? void 0 : checkList.length))
            onChange(checkList);
        else if ((newValue === null || newValue === void 0 ? void 0 : newValue.length) === 0)
            onChange([]);
        else
            onChange(newValue);
        onSync();
    }, [onChange, onSync, value, value === null || value === void 0 ? void 0 : value.length]);
    return (React.createElement(React.Fragment, null,
        React.createElement("input", { hidden: true }),
        React.createElement("div", { className: classes.MuiAccordionRoot },
            React.createElement("div", { className: classes.MuiAccordionDetailsRoot }, checkList === null || checkList === void 0 ? void 0 : checkList.map(function (o, index) {
                var _a;
                return (React.createElement(FormControlLabel, { key: index, label: o.description ? (React.createElement("div", { style: {
                            display: 'flex',
                            flexDirection: 'column',
                            marginTop: 4,
                        } },
                        React.createElement("span", { className: classes.Body1 }, o.label),
                        React.createElement("span", { className: classes.Body4 }, o.description))) : (React.createElement("span", { className: classes.Body2 }, o.label)), control: React.createElement(CustomCheckbox, __assign({ key: index, checked: (_a = value === null || value === void 0 ? void 0 : value.find) === null || _a === void 0 ? void 0 : _a.call(value, function (f) { return f.value === o.value; }), onChange: function (e) {
                            return handleChange(o, e);
                        } }, checkboxProps)), classes: {
                        root: o.description
                            ? classes.MuiFormControlLabelDescriptionRoot
                            : classes.MuiFormControlLabelRoot,
                    }, style: {
                        maxWidth: "calc(" + 100 / colNum + "%)",
                        flex: "0 0 calc(" + 100 / colNum + "% )",
                    }, onClick: function (e) {
                        e.stopPropagation();
                    } }));
            })))));
});
var useStyles = makeStyles({
    MuiAccordionRoot: {
        margin: '0 0 0 !important',
        boxShadow: 'none',
        width: '100%',
        '&::before': {
            content: 'none !important',
        },
    },
    MuiAccordionSummaryRoot: {
        padding: '0px 32px',
        height: '40px !important',
        minHeight: '0px !important',
        backgroundColor: '#F6F8FC',
    },
    MuiAccordionSummaryContent: {
        padding: 0,
        margin: 0,
        display: 'flex',
        alignItems: 'center',
    },
    MuiAccordionSummaryExpandIcon: {
        padding: 4,
        marginRight: '12px',
        marginLeft: '12px',
    },
    MuiAccordionDetailsRoot: {
        display: 'flex',
        width: 'auto !important',
        padding: 0,
        margin: 0,
        flexFlow: 'row wrap',
        rowGap: 16,
    },
    MuiFormControlLabelRoot: {
        margin: 0,
        marginLeft: -6,
    },
    MuiFormControlLabelDescriptionRoot: {
        margin: 0,
        marginLeft: -6,
        display: 'flex',
        alignItems: 'flex-start',
    },
    Body1: {
        fontFamily: 'Inter',
        fontSize: '16px',
        fontStyle: 'normal',
        fontWeight: 600,
        lineHeight: '24px',
        letterSpacing: '0.5px',
        color: '#516177',
    },
    Body2: {
        fontFamily: 'Inter',
        fontSize: '16px',
        fontStyle: 'normal',
        fontWeight: 'normal',
        lineHeight: '24px',
        letterSpacing: '0.5px',
        color: '#333E4B',
    },
    Body4: {
        fontFamily: 'Inter',
        fontSize: '14px',
        fontStyle: 'normal',
        fontWeight: 400,
        lineHeight: '20px',
        letterSpacing: '0.75px',
        color: '#516177',
    },
});
