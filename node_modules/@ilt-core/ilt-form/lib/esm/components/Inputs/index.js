var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { useContext, useEffect } from 'react';
import { FormProvider, useForm, } from 'react-hook-form';
import { createMuiTheme, ThemeProvider } from '@material-ui/core';
import { Form } from '../Form';
import { NestedInput } from '../NestedInput';
var theme = createMuiTheme({
    props: {
        MuiButtonBase: {
            disableRipple: true,
            disableTouchRipple: true,
        },
    },
    palette: {
        primary: {
            main: '#F9930B',
        },
    },
    typography: {
        fontFamily: 'inherit',
        body1: {
            color: '#252533',
        },
    },
    overrides: {
        MuiFormControl: {
            root: {
                marginTop: '16px',
            },
        },
        MuiFormLabel: {
            root: {
                fontSize: '14px',
                color: '#67677A !important',
                fontWeight: 500,
                lineHeight: 1.45,
                letterSpacing: '0.75px',
                margin: '4px 0px',
            },
        },
        MuiInputBase: {
            root: {
                borderRadius: '8px',
                boxSizing: 'border-box',
                boxShadow: '0 0 0 1px #C1C9D5',
                '&:hover, &:active': {
                    boxShadow: '0 0 0 1px #67677A',
                },
                '&$focused': {
                    boxShadow: '0 0 0 2px #2194F3',
                },
                '&.Mui-disabled': {
                    background: '#EDF0F3',
                    boxShadow: 'none',
                    '& $input, & .MuiIconButton-root': {
                        color: '#C1C9D5',
                    },
                },
                '&$error': {
                    boxShadow: '0 0 0 1px #FF4322',
                    background: '#FCE8E7',
                    '& $input': {
                        color: '#FF4322',
                    },
                    '& .MuiIconButton-root': {
                        color: '#FF4322 !important',
                    },
                },
                '& .MuiIconButton-root': {
                    color: '#67677A',
                },
            },
            input: {
                height: '24px',
                fontStyle: 'normal',
                fontWeight: 'normal',
                fontSize: '16px',
                lineHeight: '150%',
                letterSpacing: '0.5px',
                color: '#252533',
                padding: '12px',
            },
            formControl: {
                marginTop: '24px !important',
            },
        },
        MuiInput: {
            underline: {
                '&:before, &:after': {
                    display: 'none',
                },
            },
        },
        MuiInputLabel: {
            shrink: {
                transform: 'translate(0, -4px) scale(1)',
                width: '100%',
            },
        },
        MuiFormHelperText: {
            root: {
                fontStyle: 'normal',
                fontWeight: 600,
                fontSize: '12px',
                lineHeight: '160%',
                letterSpacing: '1.25px',
                display: 'flex',
                '& :first-child': {
                    marginRight: '8px',
                },
                '&$error': {
                    color: '#FF4322',
                },
            },
        },
        MuiSelect: {
            select: {
                '&:focus': {
                    backgroundColor: 'transparent',
                },
            },
        },
        MuiIconButton: {
            root: {
                '&:hover': {
                    backgroundColor: 'transparent',
                },
            },
            label: {
                width: '24px',
                height: '24px',
            },
        },
    },
});
export var FormTypes;
(function (FormTypes) {
    FormTypes[FormTypes["INPUT"] = 0] = "INPUT";
    FormTypes[FormTypes["INPUT_NUMBER"] = 1] = "INPUT_NUMBER";
    FormTypes[FormTypes["INPUT_PASSWORD"] = 2] = "INPUT_PASSWORD";
    FormTypes[FormTypes["SELECT"] = 3] = "SELECT";
    FormTypes[FormTypes["COMPONENT"] = 4] = "COMPONENT";
    FormTypes[FormTypes["DATE"] = 5] = "DATE";
    FormTypes[FormTypes["AUTOCOMPLETE"] = 6] = "AUTOCOMPLETE";
    FormTypes[FormTypes["RADIO"] = 7] = "RADIO";
    FormTypes[FormTypes["CHECKBOX"] = 8] = "CHECKBOX";
    FormTypes[FormTypes["CHECKBOX_GROUP"] = 9] = "CHECKBOX_GROUP";
    FormTypes[FormTypes["PHONE_NUMBER"] = 10] = "PHONE_NUMBER";
    FormTypes[FormTypes["AUTOCOMPLETE_MULTI"] = 11] = "AUTOCOMPLETE_MULTI";
    FormTypes[FormTypes["AUTOCOMPLETE_CHECKBOX"] = 12] = "AUTOCOMPLETE_CHECKBOX";
})(FormTypes || (FormTypes = {}));
var InputsContext = React.createContext({
    onSync: function () { },
    getValues: function () { },
});
export var useInputsContext = function () {
    return useContext(InputsContext);
};
export var DynamicForm = React.memo(function (_a) {
    var id = _a.id, fields = _a.fields, defaultValues = _a.defaultValues, onSubmit = _a.onSubmit, valueControl = _a.valueControl, errorControl = _a.errorControl, syncFormData = _a.syncFormData, children = _a.children, isChildren = _a.isChildren;
    var methods = useForm({ defaultValues: defaultValues, mode: 'onBlur' });
    var handleSubmit = methods.handleSubmit, setError = methods.setError, setValue = methods.setValue, getValues = methods.getValues;
    var onSync = function () {
        if (syncFormData) {
            syncFormData(getValues());
        }
    };
    useEffect(function () {
        (valueControl === null || valueControl === void 0 ? void 0 : valueControl.length) &&
            valueControl.map(function (_a) {
                var name = _a.name, value = _a.value;
                setValue(name, value, { shouldValidate: true });
            });
        (errorControl === null || errorControl === void 0 ? void 0 : errorControl.length) &&
            errorControl.map(function (_a) {
                var name = _a.name, message = _a.message;
                setError(name, { type: 'manual', message: message });
            });
    }, [errorControl, valueControl]);
    return (React.createElement(React.Fragment, null,
        React.createElement(ThemeProvider, { theme: theme },
            React.createElement(FormProvider, __assign({}, methods),
                React.createElement(Form, { id: id, onSubmit: handleSubmit(onSubmit) },
                    isChildren ? (React.createElement(InputsContext.Provider, { value: { onSync: onSync, setValue: setValue, getValues: getValues } }, children)) : (React.createElement(React.Fragment, null)),
                    !isChildren &&
                        (fields === null || fields === void 0 ? void 0 : fields.length) &&
                        (fields === null || fields === void 0 ? void 0 : fields.map(function (field, index) { return (React.createElement(NestedInput, __assign({}, field, { onSync: onSync, key: index }))); }))))),
        isChildren ? React.createElement(React.Fragment, null) : children));
}, areEqual);
function areEqual(prev, next) {
    return (prev.fields === next.fields &&
        prev.valueControl === next.valueControl &&
        prev.errorControl === next.errorControl &&
        prev.reRender === next.reRender);
}
