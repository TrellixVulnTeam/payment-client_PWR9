var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { useEffect, useMemo, useState } from 'react';
import { Box, makeStyles, TextField } from '@material-ui/core';
import { useFormContext } from 'react-hook-form';
import { Autocomplete } from '@material-ui/lab';
import { Close, Search } from '../../icons';
import MyHelperText from '../../helper/FormHelperText';
var useStyles = makeStyles({
    option: {
        height: 40,
        paddingLeft: 8,
        marginBottom: 8,
        backgroundColor: '#FFFFFF',
        '&:first-child': {
            marginTop: 8,
        },
        '&[aria-selected="true"] ': {
            backgroundColor: 'white',
        },
        '&[data-focus="true"]': {
            backgroundColor: '#EDF0F3',
        },
    },
    inputRoot: {
        paddingRight: '1px !important',
        paddingBottom: '0px !important',
        '& $input': {
            padding: '12px 24px !important',
        },
    },
    endAdornment: {
        top: 0,
        position: 'unset',
    },
    clearIndicator: {
        padding: '11px',
        margin: '0px',
    },
    popupIndicator: {
        padding: '11px',
        margin: '0px',
    },
    popupIndicatorOpen: {
        transform: 'rotate(0deg)',
    },
    listbox: {
        padding: 0,
    },
});
export var FormAutoCompleteCheckBox = React.forwardRef(function (props, ref) {
    var classes = useStyles();
    var _a = useFormContext(), setValue = _a.setValue, errors = _a.formState.errors;
    var name = props.name, label = props.label, placeholder = props.placeholder, value = props.value, options = props.options, disabled = props.disabled, popupIcon = props.popupIcon, onBlur = props.onBlur, onSync = props.onSync, renderOption = props.renderOption, renderTags = props.renderTags, renderGroup = props.renderGroup, renderReset = props.renderReset;
    var _b = useState(useMemo(function () { return value || []; }, [])), val = _b[0], setVal = _b[1];
    useEffect(function () {
        if (value !== val)
            setVal(value || []);
    }, [value]);
    var resetSelection = function () {
        setValue(name, []);
        setVal([]);
        onSync();
    };
    return (React.createElement(Autocomplete, { multiple: true, disableCloseOnSelect: true, fullWidth: true, autoComplete: true, autoHighlight: true, value: val, classes: classes, options: options || [], groupBy: function (_a) {
            var category = _a.category;
            return category || '';
        }, getOptionLabel: function (option) { return option.label; }, getOptionDisabled: function (_a) {
            var disabled = _a.disabled;
            return !!disabled;
        }, disabled: !!disabled, onChange: function (e, options) {
            e.preventDefault();
            setValue(name, options);
            setVal(options);
            onSync();
        }, onBlur: onBlur, popupIcon: popupIcon || React.createElement(Search, null), closeIcon: React.createElement(Close, null), renderOption: renderOption, renderGroup: function (params) {
            return (React.createElement(React.Fragment, null,
                !params.key && (React.createElement(Box, { padding: 2, paddingBottom: 0, onClick: resetSelection }, val.length > 0 && renderReset ? renderReset() : '')),
                renderGroup && renderGroup(params)));
        }, renderTags: renderTags, renderInput: function (params) {
            var _a;
            return (React.createElement(TextField, __assign({}, params, { label: label, placeholder: placeholder, inputRef: ref, InputLabelProps: {
                    shrink: true,
                }, error: !!errors[name], helperText: React.createElement(MyHelperText, { message: (_a = errors[name]) === null || _a === void 0 ? void 0 : _a.message }) })));
        } }));
});
export default FormAutoCompleteCheckBox;
