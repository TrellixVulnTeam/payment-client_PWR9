import React, { useState } from 'react';
import { useFormContext } from 'react-hook-form';
import { FormControl, FormHelperText, IconButton, InputLabel, MenuItem, Select, makeStyles, } from '@material-ui/core';
import { ArrowDropDown } from '../../icons';
import MyHelperText from '../../helper/FormHelperText';
export var FormSelect = React.forwardRef(function (props, ref) {
    var _a;
    var errors = useFormContext().formState.errors;
    var name = props.name, label = props.label, placeholder = props.placeholder, value = props.value, 
    // helperText,
    disabled = props.disabled, options = props.options, popupIcon = props.popupIcon, onChange = props.onChange, onBlur = props.onBlur, onSync = props.onSync;
    var classes = useStyles();
    var _b = useState(false), open = _b[0], setOpen = _b[1];
    var handleClick = function () {
        setOpen(function (open) { return !open; });
    };
    var handleChange = function (event) {
        onChange(event);
        onSync();
    };
    var onClose = function () {
        setOpen(false);
    };
    var onOpen = function () {
        setOpen(true);
    };
    return (React.createElement(FormControl, { fullWidth: true, error: !!errors[name] },
        React.createElement(InputLabel, { shrink: true }, label),
        React.createElement(Select, { disabled: !!disabled, value: value || '', placeholder: placeholder, inputRef: ref, onBlur: onBlur, onChange: handleChange, open: open, onOpen: onOpen, onClose: onClose, endAdornment: React.createElement(IconButton, { onClick: handleClick, tabIndex: "-1" }, popupIcon || React.createElement(ArrowDropDown, null)), IconComponent: function () { return React.createElement(React.Fragment, null); }, MenuProps: {
                anchorOrigin: {
                    vertical: 'bottom',
                    horizontal: 'left',
                },
                transformOrigin: {
                    vertical: -4,
                    horizontal: 'left',
                },
                getContentAnchorEl: null,
            }, displayEmpty: true, renderValue: value !== undefined
                ? undefined
                : function () { return React.createElement("div", { className: classes.placeholder }, placeholder); } }, options === null || options === void 0 ? void 0 : options.map(function (option) { return (React.createElement(MenuItem, { value: option.value, key: option.value }, option.label)); })),
        React.createElement(FormHelperText, null,
            React.createElement(MyHelperText, { message: (_a = errors[name]) === null || _a === void 0 ? void 0 : _a.message }))));
});
var useStyles = makeStyles({
    placeholder: {
        opacity: 0.4,
    },
});
