import React from 'react';
import { IconButton, InputAdornment, makeStyles, TextField, } from '@material-ui/core';
import { useFormContext } from 'react-hook-form';
import { KeyboardArrowDown, KeyboardArrowUp } from '@material-ui/icons';
import MyHelperText from '../../helper/FormHelperText';
var useStyles = makeStyles({
    root: {
        // hide default button increase/decrease 
        '& input[type=number]::-webkit-inner-spin-button, & input[type=number]::-webkit-outer-spin-button': {
            '-webkit-appearance': 'none',
            margin: 0,
        },
    },
    btnIncrease: {
        padding: '0px 12px',
        position: 'absolute',
        transform: 'translateY(-12px)',
        '& svg > *': {
            transform: 'translateY(6px)',
        },
    },
    btnDecrease: {
        padding: '0px 12px',
        transform: 'translateY(12px)',
        '& svg > *': {
            transform: 'translateY(-6px)',
        },
    },
});
export var FormInputNumber = React.forwardRef(function (props, ref) {
    var _a;
    var classes = useStyles();
    var _b = useFormContext(), setValue = _b.setValue, setFocus = _b.setFocus, errors = _b.formState.errors;
    var name = props.name, label = props.label, placeholder = props.placeholder, _c = props.value, value = _c === void 0 ? '' : _c, 
    // helperText,
    disabled = props.disabled, onChange = props.onChange, onBlur = props.onBlur, onSync = props.onSync;
    var handleChange = function (event) {
        onChange(event);
        onSync();
    };
    var increase = function () {
        setFocus(name);
        setValue(name, +value + 1);
        onSync();
    };
    var decrease = function () {
        setFocus(name);
        setValue(name, +value - 1);
        onSync();
    };
    return (React.createElement(TextField, { fullWidth: true, label: label, value: value, placeholder: placeholder, inputRef: ref, disabled: !!disabled, onBlur: onBlur, onChange: handleChange, type: 'number', error: !!errors[name], helperText: React.createElement(MyHelperText, { message: (_a = errors[name]) === null || _a === void 0 ? void 0 : _a.message }), className: classes.root, InputLabelProps: {
            shrink: true,
        }, InputProps: {
            endAdornment: (!disabled &&
                React.createElement(InputAdornment, { position: "end" },
                    React.createElement(IconButton, { className: classes.btnIncrease, onClick: increase },
                        React.createElement(KeyboardArrowUp, null)),
                    React.createElement(IconButton, { className: classes.btnDecrease, onClick: decrease },
                        React.createElement(KeyboardArrowDown, null)))),
        } }));
});
