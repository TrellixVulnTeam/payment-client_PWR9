import React, { ReactNode } from 'react';
import { RegisterOptions, SubmitHandler } from 'react-hook-form';
import { AutocompleteGetTagProps, AutocompleteRenderGroupParams, AutocompleteRenderInputParams, AutocompleteRenderOptionState } from '@material-ui/lab';
export declare enum FormTypes {
    'INPUT' = 0,
    'INPUT_NUMBER' = 1,
    'INPUT_PASSWORD' = 2,
    'SELECT' = 3,
    'COMPONENT' = 4,
    'DATE' = 5,
    'AUTOCOMPLETE' = 6,
    'RADIO' = 7,
    'CHECKBOX' = 8,
    'CHECKBOX_GROUP' = 9,
    'PHONE_NUMBER' = 10,
    'AUTOCOMPLETE_MULTI' = 11,
    'AUTOCOMPLETE_CHECKBOX' = 12
}
interface Option {
    value: string | number;
    label: string;
    category?: string;
    icon?: any;
    rules?: RegisterOptions;
    disabled?: boolean;
}
export interface FieldData<T = any> {
    name: string;
    value?: any;
    defaultValue?: any;
    type?: FormTypes;
    helperText?: string;
    label?: string;
    placeholder?: string;
    rules?: RegisterOptions;
    touched?: boolean;
    validating?: boolean;
    errors?: string[];
    options?: Array<Option>;
    renderGroup?: (param: AutocompleteRenderGroupParams) => JSX.Element;
    renderOption?: (option: Option, state?: AutocompleteRenderOptionState) => JSX.Element;
    renderInput?: (params: AutocompleteRenderInputParams) => JSX.Element;
    renderTags?: (option: T[], getTagProps: AutocompleteGetTagProps) => React.ReactNode;
    renderReset?: () => React.ReactNode;
    component?: Function;
    referenceName?: string;
    referenceValue?: string | number;
    disabled?: boolean;
    className?: string;
    open?: boolean;
    form?: any;
    popupIcon?: ReactNode;
    customWidth?: boolean;
    colNum?: number;
}
export interface ErrorControlType {
    name: string;
    message: string;
}
export interface ValueControlType {
    name: string;
    value: any;
}
export interface DynamicFormProps {
    id: string;
    fields?: FieldData[];
    defaultValues?: any;
    onSubmit: SubmitHandler<any>;
    valueControl?: ValueControlType[];
    errorControl?: ErrorControlType[];
    syncFormData?: (data: any) => void;
    ref?: any;
    isChildren?: boolean;
    reRender?: any;
}
interface InputsContextProps {
    setValue?: (name: string, value: any, options?: any) => void;
    onSync: () => void;
    getValues: () => void;
}
export declare const useInputsContext: () => InputsContextProps;
export declare const DynamicForm: React.FC<DynamicFormProps>;
export {};
