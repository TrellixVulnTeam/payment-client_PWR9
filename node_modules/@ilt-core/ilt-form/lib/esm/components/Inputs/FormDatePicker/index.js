import React, { useState } from 'react';
import { useFormContext } from 'react-hook-form';
import { IconButton, makeStyles } from '@material-ui/core';
import DateFnsUtils from '@date-io/date-fns';
import { MuiPickersUtilsProvider, KeyboardDatePicker, } from '@material-ui/pickers';
import { Close, Calendar } from '../../icons';
import MyHelperText from '../../helper/FormHelperText';
var useStyles = makeStyles({
    root: {
        '&:active': {
            '& $btnClose, & $splash': {
                display: 'block',
            },
            '& $btnCalendar': {
                '& .MuiButtonBase-root': {
                    color: '#67677A',
                },
            },
        },
        '&$focused': {
            '& $btnClose, & $splash': {
                display: 'block',
            },
            '& $btnCalendar': {
                '& .MuiButtonBase-root': {
                    color: '#2194F3',
                },
            },
        },
    },
    focused: {},
    error: {},
    btnClose: {
        color: '#67677A',
        display: 'none',
    },
    splash: {
        height: '24px',
        borderRight: '1px solid #DBDBDB',
        display: 'none',
    },
    btnCalendar: {},
});
export var FormDatePicker = React.forwardRef(function (props, ref) {
    var _a;
    var classes = useStyles();
    var _b = useFormContext(), setValue = _b.setValue, trigger = _b.trigger, errors = _b.formState.errors;
    var name = props.name, label = props.label, 
    // placeholder,
    _c = props.value, 
    // placeholder,
    value = _c === void 0 ? null : _c, 
    // helperText,
    disabled = props.disabled, 
    // onChange,
    onBlur = props.onBlur, onSync = props.onSync;
    var _d = useState(null), dateError = _d[0], setDateError = _d[1];
    var handleChange = function (date) {
        setValue(name, date);
        onSync();
    };
    var onAccept = function () {
        trigger(name);
    };
    var clearField = function () {
        setValue(name, null);
        trigger(name);
        onSync();
    };
    return (React.createElement(MuiPickersUtilsProvider, { utils: DateFnsUtils },
        React.createElement(KeyboardDatePicker, { label: label, value: value, disabled: disabled, 
            // placeholder={placeholder}
            fullWidth: true, views: ['year', 'month', 'date'], variant: "inline", format: "dd/MM/yyyy", placeholder: "dd/mm/yyyy", autoOk: true, inputRef: ref, onChange: function (date) { return handleChange(date); }, onBlur: onBlur, onAccept: onAccept, onError: function (error) { return setDateError(error); }, error: !!errors[name] || !!dateError, helperText: React.createElement(MyHelperText, { message: ((_a = errors[name]) === null || _a === void 0 ? void 0 : _a.message) || dateError }), InputLabelProps: {
                shrink: true,
            }, InputProps: {
                classes: {
                    root: classes.root,
                    focused: classes.focused,
                    error: classes.error,
                },
                startAdornment: value ? (React.createElement(React.Fragment, null,
                    React.createElement(IconButton, { "aria-label": "Quick clear field", tabIndex: -1, onClick: clearField, className: classes.btnClose, style: { order: 1, padding: '11px 12px' } },
                        React.createElement(Close, null)),
                    React.createElement("div", { className: classes.splash, style: { order: 2 } }))) : null,
            }, InputAdornmentProps: {
                position: 'end',
                style: { order: 3, marginLeft: 0 },
                classes: {
                    root: classes.btnCalendar,
                },
            }, keyboardIcon: React.createElement(Calendar, null) })));
});
