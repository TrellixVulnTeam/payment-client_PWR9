"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormAutoComplete = void 0;
var react_1 = __importDefault(require("react"));
var core_1 = require("@material-ui/core");
var react_hook_form_1 = require("react-hook-form");
var lab_1 = require("@material-ui/lab");
var icons_1 = require("../../icons");
var FormHelperText_1 = __importDefault(require("../../helper/FormHelperText"));
var useStyles = core_1.makeStyles({
    root: {},
    inputRoot: {
        paddingRight: '1px !important',
        paddingBottom: '0px !important',
        '& $input': {
            padding: '12px !important',
        },
    },
    endAdornment: {
        top: 0,
        position: 'unset',
    },
    clearIndicator: {
        padding: '11px',
        margin: '0px',
    },
    popupIndicator: {
        padding: '11px',
        margin: '0px',
    },
    popupIndicatorOpen: {
        transform: 'rotate(0deg)',
    },
});
exports.FormAutoComplete = react_1.default.forwardRef(function (props, ref) {
    var classes = useStyles();
    var _a = react_hook_form_1.useFormContext(), setValue = _a.setValue, errors = _a.formState.errors;
    var name = props.name, label = props.label, placeholder = props.placeholder, value = props.value, options = props.options, 
    // helperText,
    disabled = props.disabled, popupIcon = props.popupIcon, 
    // onChange,
    onBlur = props.onBlur, onSync = props.onSync, pure = props.pure, onChangePure = props.onChangePure;
    return (react_1.default.createElement(lab_1.Autocomplete, { fullWidth: true, autoComplete: true, autoHighlight: true, value: (options && options.find(function (option) { return option.value == value; })) || null, classes: classes, options: options || [], groupBy: function (_a) {
            var category = _a.category;
            return category || '';
        }, getOptionLabel: function (_a) {
            var label = _a.label;
            return label;
        }, getOptionDisabled: function (_a) {
            var disabled = _a.disabled;
            return !!disabled;
        }, disabled: !!disabled, onChange: function (e, option) {
            if (pure) {
                onChangePure === null || onChangePure === void 0 ? void 0 : onChangePure(e, option);
            }
            else {
                e.preventDefault();
                setValue(name, option === null || option === void 0 ? void 0 : option.value);
                onSync();
            }
        }, onBlur: onBlur, popupIcon: popupIcon || react_1.default.createElement(icons_1.Search, null), closeIcon: react_1.default.createElement(icons_1.Close, null), renderInput: function (params) {
            var _a;
            return (react_1.default.createElement(core_1.TextField, __assign({}, params, { label: label, placeholder: placeholder, inputRef: ref, InputLabelProps: {
                    shrink: true,
                }, error: !!errors[name], helperText: react_1.default.createElement(FormHelperText_1.default, { message: (_a = errors[name]) === null || _a === void 0 ? void 0 : _a.message }) })));
        } }));
});
