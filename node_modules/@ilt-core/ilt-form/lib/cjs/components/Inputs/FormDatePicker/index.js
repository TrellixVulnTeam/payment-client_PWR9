"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormDatePicker = void 0;
var react_1 = __importStar(require("react"));
var react_hook_form_1 = require("react-hook-form");
var core_1 = require("@material-ui/core");
var date_fns_1 = __importDefault(require("@date-io/date-fns"));
var pickers_1 = require("@material-ui/pickers");
var icons_1 = require("../../icons");
var FormHelperText_1 = __importDefault(require("../../helper/FormHelperText"));
var useStyles = core_1.makeStyles({
    root: {
        '&:active': {
            '& $btnClose, & $splash': {
                display: 'block',
            },
            '& $btnCalendar': {
                '& .MuiButtonBase-root': {
                    color: '#67677A',
                },
            },
        },
        '&$focused': {
            '& $btnClose, & $splash': {
                display: 'block',
            },
            '& $btnCalendar': {
                '& .MuiButtonBase-root': {
                    color: '#2194F3',
                },
            },
        },
    },
    focused: {},
    error: {},
    btnClose: {
        color: '#67677A',
        display: 'none',
    },
    splash: {
        height: '24px',
        borderRight: '1px solid #DBDBDB',
        display: 'none',
    },
    btnCalendar: {},
});
exports.FormDatePicker = react_1.default.forwardRef(function (props, ref) {
    var _a;
    var classes = useStyles();
    var _b = react_hook_form_1.useFormContext(), setValue = _b.setValue, trigger = _b.trigger, errors = _b.formState.errors;
    var name = props.name, label = props.label, 
    // placeholder,
    _c = props.value, 
    // placeholder,
    value = _c === void 0 ? null : _c, 
    // helperText,
    disabled = props.disabled, 
    // onChange,
    onBlur = props.onBlur, onSync = props.onSync;
    var _d = react_1.useState(null), dateError = _d[0], setDateError = _d[1];
    var handleChange = function (date) {
        setValue(name, date);
        onSync();
    };
    var onAccept = function () {
        trigger(name);
    };
    var clearField = function () {
        setValue(name, null);
        trigger(name);
        onSync();
    };
    return (react_1.default.createElement(pickers_1.MuiPickersUtilsProvider, { utils: date_fns_1.default },
        react_1.default.createElement(pickers_1.KeyboardDatePicker, { label: label, value: value, disabled: disabled, 
            // placeholder={placeholder}
            fullWidth: true, views: ['year', 'month', 'date'], variant: "inline", format: "dd/MM/yyyy", placeholder: "dd/mm/yyyy", autoOk: true, inputRef: ref, onChange: function (date) { return handleChange(date); }, onBlur: onBlur, onAccept: onAccept, onError: function (error) { return setDateError(error); }, error: !!errors[name] || !!dateError, helperText: react_1.default.createElement(FormHelperText_1.default, { message: ((_a = errors[name]) === null || _a === void 0 ? void 0 : _a.message) || dateError }), InputLabelProps: {
                shrink: true,
            }, InputProps: {
                classes: {
                    root: classes.root,
                    focused: classes.focused,
                    error: classes.error,
                },
                startAdornment: value ? (react_1.default.createElement(react_1.default.Fragment, null,
                    react_1.default.createElement(core_1.IconButton, { "aria-label": "Quick clear field", tabIndex: -1, onClick: clearField, className: classes.btnClose, style: { order: 1, padding: '11px 12px' } },
                        react_1.default.createElement(icons_1.Close, null)),
                    react_1.default.createElement("div", { className: classes.splash, style: { order: 2 } }))) : null,
            }, InputAdornmentProps: {
                position: 'end',
                style: { order: 3, marginLeft: 0 },
                classes: {
                    root: classes.btnCalendar,
                },
            }, keyboardIcon: react_1.default.createElement(icons_1.Calendar, null) })));
});
