"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormInput = void 0;
var react_1 = __importStar(require("react"));
var core_1 = require("@material-ui/core");
var react_hook_form_1 = require("react-hook-form");
var __1 = require("..");
var icons_1 = require("../../icons");
var FormHelperText_1 = __importDefault(require("../../helper/FormHelperText"));
var useStyles = core_1.makeStyles({
    root: {
        '&:active': {
            '& $btnClose, & $splash': {
                display: 'block',
            },
        },
        '&$focused': {
            '& $btnShowPass': {
                color: '#2194F3',
            },
            '& $btnClose, & $splash': {
                display: 'block',
            },
        },
    },
    focused: {},
    btnClose: {
        display: 'none',
    },
    splash: {
        height: '24px',
        borderRight: '1px solid #DBDBDB',
        display: 'none',
    },
    btnShowPass: {},
});
exports.FormInput = react_1.default.forwardRef(function (props, ref) {
    var _a;
    var classes = useStyles();
    var _b = react_hook_form_1.useFormContext(), setValue = _b.setValue, setFocus = _b.setFocus, errors = _b.formState.errors;
    var name = props.name, label = props.label, placeholder = props.placeholder, value = props.value, type = props.type, 
    // helperText,
    disabled = props.disabled, onChange = props.onChange, onBlur = props.onBlur, onSync = props.onSync;
    var isPasswordField = type == __1.FormTypes.INPUT_PASSWORD;
    var _c = react_1.useState(isPasswordField ? false : true), showPass = _c[0], setShowPass = _c[1];
    var handleChange = function (event) {
        onChange(event);
        onSync();
    };
    var toggleShowPass = function () {
        if (!!disabled)
            return;
        setShowPass(function (prev) { return !prev; });
        setFocus(name);
    };
    var clearField = function () {
        setValue(name, '');
        setFocus(name);
        onSync();
    };
    return (react_1.default.createElement(core_1.TextField, { fullWidth: true, label: label, value: value || '', placeholder: placeholder, inputRef: ref, disabled: !!disabled, onBlur: onBlur, onChange: handleChange, type: showPass ? 'text' : 'password', error: !!errors[name], helperText: react_1.default.createElement(FormHelperText_1.default, { message: (_a = errors[name]) === null || _a === void 0 ? void 0 : _a.message }), InputLabelProps: {
            shrink: true,
        }, InputProps: {
            classes: {
                root: classes.root,
                focused: classes.focused,
            },
            endAdornment: (react_1.default.createElement(core_1.InputAdornment, { position: "end" },
                (value === null || value === void 0 ? void 0 : value.length) ? (react_1.default.createElement(react_1.default.Fragment, null,
                    react_1.default.createElement(core_1.IconButton, { "aria-label": "Quick clear field", tabIndex: -1, onClick: clearField, className: classes.btnClose, disabled: !!disabled },
                        react_1.default.createElement(icons_1.Close, null)),
                    isPasswordField && react_1.default.createElement("div", { className: classes.splash }))) : null,
                isPasswordField && (react_1.default.createElement(core_1.IconButton, { "aria-label": "Toggle password visibility", tabIndex: -1, onClick: toggleShowPass, className: classes.btnShowPass, disabled: !!disabled }, showPass ? react_1.default.createElement(icons_1.Visibility, null) : react_1.default.createElement(icons_1.VisibilityOff, null))))),
        } }));
});
