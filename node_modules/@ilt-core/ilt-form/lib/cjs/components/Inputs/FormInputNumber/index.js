"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormInputNumber = void 0;
var react_1 = __importDefault(require("react"));
var core_1 = require("@material-ui/core");
var react_hook_form_1 = require("react-hook-form");
var icons_1 = require("@material-ui/icons");
var FormHelperText_1 = __importDefault(require("../../helper/FormHelperText"));
var useStyles = core_1.makeStyles({
    root: {
        // hide default button increase/decrease 
        '& input[type=number]::-webkit-inner-spin-button, & input[type=number]::-webkit-outer-spin-button': {
            '-webkit-appearance': 'none',
            margin: 0,
        },
    },
    btnIncrease: {
        padding: '0px 12px',
        position: 'absolute',
        transform: 'translateY(-12px)',
        '& svg > *': {
            transform: 'translateY(6px)',
        },
    },
    btnDecrease: {
        padding: '0px 12px',
        transform: 'translateY(12px)',
        '& svg > *': {
            transform: 'translateY(-6px)',
        },
    },
});
exports.FormInputNumber = react_1.default.forwardRef(function (props, ref) {
    var _a;
    var classes = useStyles();
    var _b = react_hook_form_1.useFormContext(), setValue = _b.setValue, setFocus = _b.setFocus, errors = _b.formState.errors;
    var name = props.name, label = props.label, placeholder = props.placeholder, _c = props.value, value = _c === void 0 ? '' : _c, 
    // helperText,
    disabled = props.disabled, onChange = props.onChange, onBlur = props.onBlur, onSync = props.onSync;
    var handleChange = function (event) {
        onChange(event);
        onSync();
    };
    var increase = function () {
        setFocus(name);
        setValue(name, +value + 1);
        onSync();
    };
    var decrease = function () {
        setFocus(name);
        setValue(name, +value - 1);
        onSync();
    };
    return (react_1.default.createElement(core_1.TextField, { fullWidth: true, label: label, value: value, placeholder: placeholder, inputRef: ref, disabled: !!disabled, onBlur: onBlur, onChange: handleChange, type: 'number', error: !!errors[name], helperText: react_1.default.createElement(FormHelperText_1.default, { message: (_a = errors[name]) === null || _a === void 0 ? void 0 : _a.message }), className: classes.root, InputLabelProps: {
            shrink: true,
        }, InputProps: {
            endAdornment: (!disabled &&
                react_1.default.createElement(core_1.InputAdornment, { position: "end" },
                    react_1.default.createElement(core_1.IconButton, { className: classes.btnIncrease, onClick: increase },
                        react_1.default.createElement(icons_1.KeyboardArrowUp, null)),
                    react_1.default.createElement(core_1.IconButton, { className: classes.btnDecrease, onClick: decrease },
                        react_1.default.createElement(icons_1.KeyboardArrowDown, null)))),
        } }));
});
