"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NestedInput = void 0;
var react_1 = __importDefault(require("react"));
var react_hook_form_1 = require("react-hook-form");
var Inputs_1 = require("../Inputs");
var FormAutoComplete_1 = require("../Inputs/FormAutoComplete");
var FormCheckBox_1 = require("../Inputs/FormCheckBox");
var FormDatePicker_1 = require("../Inputs/FormDatePicker");
var FormInput_1 = require("../Inputs/FormInput");
var FormInputNumber_1 = require("../Inputs/FormInputNumber");
var FormPhoneNumber_1 = require("../Inputs/FormPhoneNumber");
var FormRadio_1 = require("../Inputs/FormRadio");
var FormSelect_1 = require("../Inputs/FormSelect");
var FormCheckBoxGroup_1 = require("../Inputs/FormCheckBoxGroup");
var Multi_1 = __importDefault(require("../Inputs/FormAutoComplete/Multi"));
var CheckBox_1 = __importDefault(require("../Inputs/FormAutoComplete/CheckBox"));
var NestedInput = function (props) {
    var control = react_hook_form_1.useFormContext().control;
    var name = props.name, rules = props.rules, type = props.type, defaultValue = props.defaultValue, Component = props.component, checkboxGroupProps = props.checkboxGroupProps;
    return (react_1.default.createElement(react_hook_form_1.Controller, { name: name, rules: rules, control: control, defaultValue: defaultValue, render: function (_a) {
            var field = _a.field;
            var rest = __assign(__assign({}, props), field);
            switch (type) {
                case Inputs_1.FormTypes.INPUT:
                case Inputs_1.FormTypes.INPUT_PASSWORD:
                    return react_1.default.createElement(FormInput_1.FormInput, __assign({}, rest));
                case Inputs_1.FormTypes.INPUT_NUMBER:
                    return react_1.default.createElement(FormInputNumber_1.FormInputNumber, __assign({}, rest));
                case Inputs_1.FormTypes.SELECT:
                    return react_1.default.createElement(FormSelect_1.FormSelect, __assign({}, rest));
                case Inputs_1.FormTypes.DATE:
                    return react_1.default.createElement(FormDatePicker_1.FormDatePicker, __assign({}, rest));
                case Inputs_1.FormTypes.AUTOCOMPLETE:
                    return react_1.default.createElement(FormAutoComplete_1.FormAutoComplete, __assign({}, rest));
                case Inputs_1.FormTypes.AUTOCOMPLETE_MULTI:
                    //TODO (huyhuynh) merge it into AUTOCOMPLETE type
                    return react_1.default.createElement(Multi_1.default, __assign({}, rest));
                case Inputs_1.FormTypes.AUTOCOMPLETE_CHECKBOX:
                    //TODO (khanhdh) merge it into AUTOCOMPLETE type
                    return react_1.default.createElement(CheckBox_1.default, __assign({}, rest));
                case Inputs_1.FormTypes.RADIO:
                    return react_1.default.createElement(FormRadio_1.FormRadio, __assign({}, rest));
                case Inputs_1.FormTypes.CHECKBOX:
                    return react_1.default.createElement(FormCheckBox_1.FormCheckBox, __assign({}, rest));
                case Inputs_1.FormTypes.CHECKBOX_GROUP:
                    return react_1.default.createElement(FormCheckBoxGroup_1.FormCheckBoxGroup, __assign({}, rest, checkboxGroupProps));
                case Inputs_1.FormTypes.PHONE_NUMBER:
                    return react_1.default.createElement(FormPhoneNumber_1.FormPhoneNumber, __assign({}, rest));
                case Inputs_1.FormTypes.COMPONENT:
                    return (Component && react_1.default.createElement(Component, __assign({}, rest))) || react_1.default.createElement(react_1.default.Fragment, null);
                default:
                    return react_1.default.createElement(react_1.default.Fragment, null);
            }
        } }));
};
exports.NestedInput = NestedInput;
